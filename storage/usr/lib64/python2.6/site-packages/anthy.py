# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_anthy', [dirname(__file__)])
        except ImportError:
            import _anthy
            return _anthy
        if fp is not None:
            try:
                _mod = imp.load_module('_anthy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _anthy = swig_import_helper()
    del swig_import_helper
else:
    import _anthy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class anthy_conv_stat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anthy_conv_stat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anthy_conv_stat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nr_segment"] = _anthy.anthy_conv_stat_nr_segment_set
    __swig_getmethods__["nr_segment"] = _anthy.anthy_conv_stat_nr_segment_get
    if _newclass:nr_segment = _swig_property(_anthy.anthy_conv_stat_nr_segment_get, _anthy.anthy_conv_stat_nr_segment_set)
    def __init__(self): 
        this = _anthy.new_anthy_conv_stat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _anthy.delete_anthy_conv_stat
    __del__ = lambda self : None;
anthy_conv_stat_swigregister = _anthy.anthy_conv_stat_swigregister
anthy_conv_stat_swigregister(anthy_conv_stat)

class anthy_segment_stat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anthy_segment_stat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anthy_segment_stat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nr_candidate"] = _anthy.anthy_segment_stat_nr_candidate_set
    __swig_getmethods__["nr_candidate"] = _anthy.anthy_segment_stat_nr_candidate_get
    if _newclass:nr_candidate = _swig_property(_anthy.anthy_segment_stat_nr_candidate_get, _anthy.anthy_segment_stat_nr_candidate_set)
    __swig_setmethods__["seg_len"] = _anthy.anthy_segment_stat_seg_len_set
    __swig_getmethods__["seg_len"] = _anthy.anthy_segment_stat_seg_len_get
    if _newclass:seg_len = _swig_property(_anthy.anthy_segment_stat_seg_len_get, _anthy.anthy_segment_stat_seg_len_set)
    def __init__(self): 
        this = _anthy.new_anthy_segment_stat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _anthy.delete_anthy_segment_stat
    __del__ = lambda self : None;
anthy_segment_stat_swigregister = _anthy.anthy_segment_stat_swigregister
anthy_segment_stat_swigregister(anthy_segment_stat)

class anthy_prediction_stat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anthy_prediction_stat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anthy_prediction_stat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nr_prediction"] = _anthy.anthy_prediction_stat_nr_prediction_set
    __swig_getmethods__["nr_prediction"] = _anthy.anthy_prediction_stat_nr_prediction_get
    if _newclass:nr_prediction = _swig_property(_anthy.anthy_prediction_stat_nr_prediction_get, _anthy.anthy_prediction_stat_nr_prediction_set)
    def __init__(self): 
        this = _anthy.new_anthy_prediction_stat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _anthy.delete_anthy_prediction_stat
    __del__ = lambda self : None;
anthy_prediction_stat_swigregister = _anthy.anthy_prediction_stat_swigregister
anthy_prediction_stat_swigregister(anthy_prediction_stat)

NTH_UNCONVERTED_CANDIDATE = _anthy.NTH_UNCONVERTED_CANDIDATE
NTH_KATAKANA_CANDIDATE = _anthy.NTH_KATAKANA_CANDIDATE
NTH_HIRAGANA_CANDIDATE = _anthy.NTH_HIRAGANA_CANDIDATE
NTH_HALFKANA_CANDIDATE = _anthy.NTH_HALFKANA_CANDIDATE
ANTHY_COMPILED_ENCODING = _anthy.ANTHY_COMPILED_ENCODING
ANTHY_EUC_JP_ENCODING = _anthy.ANTHY_EUC_JP_ENCODING
ANTHY_UTF8_ENCODING = _anthy.ANTHY_UTF8_ENCODING
ANTHY_RECONVERT_AUTO = _anthy.ANTHY_RECONVERT_AUTO
ANTHY_RECONVERT_DISABLE = _anthy.ANTHY_RECONVERT_DISABLE
ANTHY_RECONVERT_ALWAYS = _anthy.ANTHY_RECONVERT_ALWAYS

def anthy_init():
  return _anthy.anthy_init()
anthy_init = _anthy.anthy_init

def anthy_quit():
  return _anthy.anthy_quit()
anthy_quit = _anthy.anthy_quit

def anthy_conf_override(*args):
  return _anthy.anthy_conf_override(*args)
anthy_conf_override = _anthy.anthy_conf_override

def anthy_set_personality(*args):
  return _anthy.anthy_set_personality(*args)
anthy_set_personality = _anthy.anthy_set_personality

def anthy_create_context():
  return _anthy.anthy_create_context()
anthy_create_context = _anthy.anthy_create_context

def anthy_reset_context(*args):
  return _anthy.anthy_reset_context(*args)
anthy_reset_context = _anthy.anthy_reset_context

def anthy_release_context(*args):
  return _anthy.anthy_release_context(*args)
anthy_release_context = _anthy.anthy_release_context

def anthy_set_string(*args):
  return _anthy.anthy_set_string(*args)
anthy_set_string = _anthy.anthy_set_string

def anthy_resize_segment(*args):
  return _anthy.anthy_resize_segment(*args)
anthy_resize_segment = _anthy.anthy_resize_segment

def anthy_get_stat(*args):
  return _anthy.anthy_get_stat(*args)
anthy_get_stat = _anthy.anthy_get_stat

def anthy_get_segment_stat(*args):
  return _anthy.anthy_get_segment_stat(*args)
anthy_get_segment_stat = _anthy.anthy_get_segment_stat

def anthy_get_segment(*args):
  return _anthy.anthy_get_segment(*args)
anthy_get_segment = _anthy.anthy_get_segment

def anthy_commit_segment(*args):
  return _anthy.anthy_commit_segment(*args)
anthy_commit_segment = _anthy.anthy_commit_segment

def anthy_set_prediction_string(*args):
  return _anthy.anthy_set_prediction_string(*args)
anthy_set_prediction_string = _anthy.anthy_set_prediction_string

def anthy_get_prediction_stat(*args):
  return _anthy.anthy_get_prediction_stat(*args)
anthy_get_prediction_stat = _anthy.anthy_get_prediction_stat

def anthy_get_prediction(*args):
  return _anthy.anthy_get_prediction(*args)
anthy_get_prediction = _anthy.anthy_get_prediction

def anthy_commit_prediction(*args):
  return _anthy.anthy_commit_prediction(*args)
anthy_commit_prediction = _anthy.anthy_commit_prediction

def anthy_print_context(*args):
  return _anthy.anthy_print_context(*args)
anthy_print_context = _anthy.anthy_print_context

def anthy_get_version_string():
  return _anthy.anthy_get_version_string()
anthy_get_version_string = _anthy.anthy_get_version_string

def anthy_set_logger(*args):
  return _anthy.anthy_set_logger(*args)
anthy_set_logger = _anthy.anthy_set_logger

def anthy_context_set_encoding(*args):
  return _anthy.anthy_context_set_encoding(*args)
anthy_context_set_encoding = _anthy.anthy_context_set_encoding

def anthy_set_reconversion_mode(*args):
  return _anthy.anthy_set_reconversion_mode(*args)
anthy_set_reconversion_mode = _anthy.anthy_set_reconversion_mode
class anthy_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anthy_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anthy_context, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _anthy.new_anthy_context()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _anthy.anthy_context_reset(self)
    def set_string(self, *args): return _anthy.anthy_context_set_string(self, *args)
    def resize_segment(self, *args): return _anthy.anthy_context_resize_segment(self, *args)
    def get_stat(self, *args): return _anthy.anthy_context_get_stat(self, *args)
    def get_segment_stat(self, *args): return _anthy.anthy_context_get_segment_stat(self, *args)
    def get_segment(self, *args): return _anthy.anthy_context_get_segment(self, *args)
    def commit_segment(self, *args): return _anthy.anthy_context_commit_segment(self, *args)
    def set_prediction_string(self, *args): return _anthy.anthy_context_set_prediction_string(self, *args)
    def get_prediction_stat(self, *args): return _anthy.anthy_context_get_prediction_stat(self, *args)
    def get_prediction(self, *args): return _anthy.anthy_context_get_prediction(self, *args)
    def commit_prediction(self, *args): return _anthy.anthy_context_commit_prediction(self, *args)
    def _print(self): return _anthy.anthy_context__print(self)
    def _set_encoding(self, *args): return _anthy.anthy_context__set_encoding(self, *args)
    def set_reconversion_mode(self, *args): return _anthy.anthy_context_set_reconversion_mode(self, *args)
    def init_personality(self, *args): return _anthy.anthy_context_init_personality(self, *args)
    def do_set_personality(self, *args): return _anthy.anthy_context_do_set_personality(self, *args)
    __swig_destroy__ = _anthy.delete_anthy_context
    __del__ = lambda self : None;
anthy_context_swigregister = _anthy.anthy_context_swigregister
anthy_context_swigregister(anthy_context)



