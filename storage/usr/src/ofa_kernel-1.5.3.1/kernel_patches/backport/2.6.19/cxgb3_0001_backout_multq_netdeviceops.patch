commit ffefc559170160b6b25d545429330451e756e57a
Author: root <root@almus.(none)>
Date:   Tue Jun 16 12:14:38 2009 -0700

    updated cxgb3_0001_backout_multq_netdeviceops.patch

diff --git a/drivers/net/cxgb3/adapter.h b/drivers/net/cxgb3/adapter.h
index c888e97..da91aa1 100644
--- a/drivers/net/cxgb3/adapter.h
+++ b/drivers/net/cxgb3/adapter.h
@@ -199,7 +199,6 @@ struct sge_qset {		/* an SGE queue set */
 	int lro_enabled;
 	void *lro_va;
 	struct net_device *netdev;
-	struct netdev_queue *tx_q;	/* associated netdev TX queue */
 	unsigned long txq_stopped;	/* which Tx queues are stopped */
 	struct timer_list tx_reclaim_timer;	/* reclaims TX buffers */
 	struct timer_list rx_reclaim_timer;	/* reclaims RX buffers */
@@ -304,8 +303,7 @@ int t3_mgmt_tx(struct adapter *adap, struct sk_buff *skb);
 void t3_update_qset_coalesce(struct sge_qset *qs, const struct qset_params *p);
 int t3_sge_alloc_qset(struct adapter *adapter, unsigned int id, int nports,
 		      int irq_vec_idx, const struct qset_params *p,
-		      int ntxq, struct net_device *dev,
-		      struct netdev_queue *netdevq);
+		      int ntxq, struct net_device *dev);
 int t3_get_desc(const struct sge_qset *qs, unsigned int qnum, unsigned int idx,
 		unsigned char *data);
 irqreturn_t t3_sge_intr_msix(int irq, void *cookie);
diff --git a/drivers/net/cxgb3/cxgb3_main.c b/drivers/net/cxgb3/cxgb3_main.c
index 17858b9..51a3004 100644
--- a/drivers/net/cxgb3/cxgb3_main.c
+++ b/drivers/net/cxgb3/cxgb3_main.c
@@ -599,8 +599,7 @@ static int setup_sge_qsets(struct adapter *adap)
 			err = t3_sge_alloc_qset(adap, qset_idx, 1,
 				(adap->flags & USING_MSIX) ? qset_idx + 1 :
 							     irq_idx,
-				&adap->params.sge.qset[qset_idx], ntxq, dev,
-				netdev_get_tx_queue(dev, j));
+				&adap->params.sge.qset[qset_idx], ntxq, dev);
 			if (err) {
 				t3_free_sge_resources(adap);
 				return err;
@@ -1220,10 +1219,9 @@ static int cxgb_open(struct net_device *dev)
 			       "Could not initialize offload capabilities\n");
 	}
 
-	dev->real_num_tx_queues = pi->nqsets;
 	link_start(dev);
 	t3_port_intr_enable(adapter, pi->port_id);
-	netif_tx_start_all_queues(dev);
+	netif_start_queue(dev);
 	if (!other_ports)
 		schedule_chk_task(adapter);
 
@@ -1244,7 +1242,7 @@ static int cxgb_close(struct net_device *dev)
 	t3_read_reg(adapter, A_XGM_INT_STATUS + pi->mac.offset);
 
 	t3_port_intr_disable(adapter, pi->port_id);
-	netif_tx_stop_all_queues(dev);
+	netif_stop_queue(dev);
 	pi->phy.ops->power_down(&pi->phy, 1);
 	netif_carrier_off(dev);
 	t3_mac_disable(&pi->mac, MAC_DIRECTION_TX | MAC_DIRECTION_RX);
@@ -2983,22 +2981,6 @@ static void __devinit print_port_info(struct adapter *adap,
 	}
 }
 
-static const struct net_device_ops cxgb_netdev_ops = {
-	.ndo_open		= cxgb_open,
-	.ndo_stop		= cxgb_close,
-	.ndo_start_xmit		= t3_eth_xmit,
-	.ndo_get_stats		= cxgb_get_stats,
-	.ndo_validate_addr	= eth_validate_addr,
-	.ndo_set_multicast_list	= cxgb_set_rxmode,
-	.ndo_do_ioctl		= cxgb_ioctl,
-	.ndo_change_mtu		= cxgb_change_mtu,
-	.ndo_set_mac_address	= cxgb_set_mac_addr,
-	.ndo_vlan_rx_register	= vlan_rx_register,
-#ifdef CONFIG_NET_POLL_CONTROLLER
-	.ndo_poll_controller	= cxgb_netpoll,
-#endif
-};
-
 static int __devinit init_one(struct pci_dev *pdev,
 			      const struct pci_device_id *ent)
 {
@@ -3087,7 +3069,7 @@ static int __devinit init_one(struct pci_dev *pdev,
 	for (i = 0; i < ai->nports0 + ai->nports1; ++i) {
 		struct net_device *netdev;
 
-		netdev = alloc_etherdev_mq(sizeof(struct port_info), SGE_QSETS);
+		netdev = alloc_etherdev(sizeof(struct port_info));
 		if (!netdev) {
 			err = -ENOMEM;
 			goto out_free_dev;
@@ -3112,7 +3093,18 @@ static int __devinit init_one(struct pci_dev *pdev,
 			netdev->features |= NETIF_F_HIGHDMA;
 
 		netdev->features |= NETIF_F_HW_VLAN_TX | NETIF_F_HW_VLAN_RX;
-		netdev->netdev_ops = &cxgb_netdev_ops;
+		netdev->hard_start_xmit = t3_eth_xmit;
+		netdev->vlan_rx_register = vlan_rx_register;
+		netdev->open  = cxgb_open;
+		netdev->stop  = cxgb_close;
+		netdev->get_stats = cxgb_get_stats;
+		netdev->set_multicast_list = cxgb_set_rxmode;
+		netdev->do_ioctl = cxgb_ioctl;
+		netdev->change_mtu = cxgb_change_mtu;
+		netdev->set_mac_address = cxgb_set_mac_addr;
+#ifdef CONFIG_NET_POLL_CONTROLLER
+		netdev->poll_controller = cxgb_netpoll;
+#endif
 		SET_ETHTOOL_OPS(netdev, &cxgb_ethtool_ops);
 	}
 
@@ -3325,7 +3325,6 @@ static int __devinit init_one(struct pci
 				adapter->name = adapter->port[i]->name;
 
 			__set_bit(i, &adapter->registered_device_map);
-			netif_tx_stop_all_queues(adapter->port[i]);
 		}
 	}
 	if (!adapter->registered_device_map) {
diff --git a/drivers/net/cxgb3/sge.c b/drivers/net/cxgb3/sge.c
index b3ee2bc..d32cf4f 100644
--- a/drivers/net/cxgb3/sge.c
+++ b/drivers/net/cxgb3/sge.c
@@ -1200,10 +1200,10 @@ static void write_tx_pkt_wr(struct adapter *adap, struct sk_buff *skb,
 			 htonl(V_WR_TID(q->token)));
 }
 
-static inline void t3_stop_tx_queue(struct netdev_queue *txq,
-				    struct sge_qset *qs, struct sge_txq *q)
+static inline void t3_stop_queue(struct net_device *dev, struct sge_qset *qs, 
+				struct sge_txq *q)
 {
-	netif_tx_stop_queue(txq);
+	netif_stop_queue(dev);
 	set_bit(TXQ_ETH, &qs->txq_stopped);
 	q->stops++;
 }
@@ -1217,13 +1217,11 @@ static inline void t3_stop_tx_queue(struct netdev_queue *txq,
  */
 int t3_eth_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	int qidx;
 	unsigned int ndesc, pidx, credits, gen, compl;
 	const struct port_info *pi = netdev_priv(dev);
 	struct adapter *adap = pi->adapter;
-	struct netdev_queue *txq;
-	struct sge_qset *qs;
-	struct sge_txq *q;
+	struct sge_qset *qs = pi->qs;
+	struct sge_txq *q = &qs->txq[TXQ_ETH];
 
 	/*
 	 * The chip min packet length is 9 octets but play safe and reject
@@ -1234,11 +1232,6 @@ int t3_eth_xmit(struct sk_buff *skb, struct net_device *dev)
 		return NETDEV_TX_OK;
 	}
 
-	qidx = skb_get_queue_mapping(skb);
-	qs = &pi->qs[qidx];
-	q = &qs->txq[TXQ_ETH];
-	txq = netdev_get_tx_queue(dev, qidx);
-
 	spin_lock(&q->lock);
 	reclaim_completed_tx(adap, q, TX_RECLAIM_CHUNK);
 
@@ -1246,7 +1239,7 @@ int t3_eth_xmit(struct sk_buff *skb, struct net_device *dev)
 	ndesc = calc_tx_descs(skb);
 
 	if (unlikely(credits < ndesc)) {
-		t3_stop_tx_queue(txq, qs, q);
+		t3_stop_queue(dev, qs, q);
 		dev_err(&adap->pdev->dev,
 			"%s: Tx ring %u full while queue awake!\n",
 			dev->name, q->cntxt_id & 7);
@@ -1256,12 +1249,12 @@ int t3_eth_xmit(struct sk_buff *skb, struct net_device *dev)
 
 	q->in_use += ndesc;
 	if (unlikely(credits - ndesc < q->stop_thres)) {
-		t3_stop_tx_queue(txq, qs, q);
+		t3_stop_queue(dev, qs, q);
 
 		if (should_restart_tx(q) &&
 		    test_and_clear_bit(TXQ_ETH, &qs->txq_stopped)) {
 			q->restarts++;
-			netif_tx_wake_queue(txq);
+			netif_wake_queue(dev);
 		}
 	}
 
@@ -1925,7 +1918,7 @@ static void restart_tx(struct sge_qset *qs)
 	    test_and_clear_bit(TXQ_ETH, &qs->txq_stopped)) {
 		qs->txq[TXQ_ETH].restarts++;
 		if (netif_running(qs->netdev))
-			netif_tx_wake_queue(qs->tx_q);
+			netif_wake_queue(qs->netdev);
 	}
 
 	if (test_bit(TXQ_OFLD, &qs->txq_stopped) &&
@@ -2944,7 +2937,6 @@ void t3_update_qset_coalesce(struct sge_qset *qs, const struct qset_params *p)
  *	@p: configuration parameters for this queue set
  *	@ntxq: number of Tx queues for the queue set
  *	@netdev: net device associated with this queue set
- *	@netdevq: net device TX queue associated with this queue set
  *
  *	Allocate resources and initialize an SGE queue set.  A queue set
  *	comprises a response queue, two Rx free-buffer queues, and up to 3
@@ -2953,8 +2945,7 @@ void t3_update_qset_coalesce(struct sge_qset *qs, const struct qset_params *p)
  */
 int t3_sge_alloc_qset(struct adapter *adapter, unsigned int id, int nports,
 		      int irq_vec_idx, const struct qset_params *p,
-		      int ntxq, struct net_device *dev,
-		      struct netdev_queue *netdevq)
+		      int ntxq, struct net_device *dev)
 {
 	int i, avail, ret = -ENOMEM;
 	struct sge_qset *q = &adapter->sge.qs[id];
@@ -3088,7 +3079,6 @@ int t3_sge_alloc_qset(struct adapter *adapter, unsigned int id, int nports,
 
 	q->adap = adapter;
 	q->netdev = dev;
-	q->tx_q = netdevq;
 	t3_update_qset_coalesce(q, p);
 
 	avail = refill_fl(adapter, &q->fl[0], q->fl[0].size,
