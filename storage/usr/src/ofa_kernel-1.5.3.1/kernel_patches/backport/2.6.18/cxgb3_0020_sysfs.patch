---
 drivers/net/cxgb3/cxgb3_main.c |   78 +++++++++++++++++++----------------------
 1 file changed, 38 insertions(+), 40 deletions(-)

Index: ofed_kernel/drivers/net/cxgb3/cxgb3_main.c
===================================================================
--- ofed_kernel.orig/drivers/net/cxgb3/cxgb3_main.c
+++ ofed_kernel/drivers/net/cxgb3/cxgb3_main.c
@@ -76,6 +76,8 @@ enum {
 
 #define EEPROM_MAGIC 0x38E2F10C
 
+#define to_net_dev(class) container_of(class, struct net_device, class_dev)
+
 #define CH_DEVICE(devid, idx) \
 	{ PCI_VENDOR_ID_CHELSIO, devid, PCI_ANY_ID, PCI_ANY_ID, 0, 0, idx }
 
@@ -516,7 +518,7 @@ static int setup_sge_qsets(struct adapte
 	return 0;
 }
 
-static ssize_t attr_show(struct device *d, char *buf,
+static ssize_t attr_show(struct class_device *d, char *buf,
 			 ssize_t(*format) (struct net_device *, char *))
 {
 	ssize_t len;
@@ -528,7 +530,7 @@ static ssize_t attr_show(struct device *
 	return len;
 }
 
-static ssize_t attr_store(struct device *d,
+static ssize_t attr_store(struct class_device *d,
 			  const char *buf, size_t len,
 			  ssize_t(*set) (struct net_device *, unsigned int),
 			  unsigned int min_val, unsigned int max_val)
@@ -559,10 +561,9 @@ static ssize_t format_##name(struct net_
 	struct adapter *adap = pi->adapter; \
 	return sprintf(buf, "%u\n", val_expr); \
 } \
-static ssize_t show_##name(struct device *d, struct device_attribute *attr, \
-			   char *buf) \
+static ssize_t show_##name(struct class_device *cd, char *buf) \
 { \
-	return attr_show(d, buf, format_##name); \
+	return attr_show(cd, buf, format_##name); \
 }
 
 static ssize_t set_nfilters(struct net_device *dev, unsigned int val)
@@ -582,10 +583,10 @@ static ssize_t set_nfilters(struct net_d
 	return 0;
 }
 
-static ssize_t store_nfilters(struct device *d, struct device_attribute *attr,
-			      const char *buf, size_t len)
+static ssize_t store_nfilters(struct class_device *cd, const char *buf,
+			      size_t len)
 {
-	return attr_store(d, buf, len, set_nfilters, 0, ~0);
+	return attr_store(cd, buf, len, set_nfilters, 0, ~0);
 }
 
 static ssize_t set_nservers(struct net_device *dev, unsigned int val)
@@ -602,35 +603,34 @@ static ssize_t set_nservers(struct net_d
 	return 0;
 }
 
-static ssize_t store_nservers(struct device *d, struct device_attribute *attr,
-			      const char *buf, size_t len)
+static ssize_t store_nservers(struct class_device *cd, const char *buf,
+			      size_t len)
 {
-	return attr_store(d, buf, len, set_nservers, 0, ~0);
+	return attr_store(cd, buf, len, set_nservers, 0, ~0);
 }
 
 #define CXGB3_ATTR_R(name, val_expr) \
 CXGB3_SHOW(name, val_expr) \
-static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)
+static CLASS_DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)
 
 #define CXGB3_ATTR_RW(name, val_expr, store_method) \
 CXGB3_SHOW(name, val_expr) \
-static DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_method)
+static CLASS_DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_method)
 
 CXGB3_ATTR_R(cam_size, t3_mc5_size(&adap->mc5));
 CXGB3_ATTR_RW(nfilters, adap->params.mc5.nfilters, store_nfilters);
 CXGB3_ATTR_RW(nservers, adap->params.mc5.nservers, store_nservers);
 
 static struct attribute *cxgb3_attrs[] = {
-	&dev_attr_cam_size.attr,
-	&dev_attr_nfilters.attr,
-	&dev_attr_nservers.attr,
+	&class_device_attr_cam_size.attr,
+	&class_device_attr_nfilters.attr,
+	&class_device_attr_nservers.attr,
 	NULL
 };
 
 static struct attribute_group cxgb3_attr_group = {.attrs = cxgb3_attrs };
 
-static ssize_t tm_attr_show(struct device *d,
-			    char *buf, int sched)
+static ssize_t tm_attr_show(struct class_device *d, char *buf, int sched)
 {
 	struct port_info *pi = netdev_priv(to_net_dev(d));
 	struct adapter *adap = pi->adapter;
@@ -655,8 +655,8 @@ static ssize_t tm_attr_show(struct devic
 	return len;
 }
 
-static ssize_t tm_attr_store(struct device *d,
-			     const char *buf, size_t len, int sched)
+static ssize_t tm_attr_store(struct class_device *d, const char *buf,
+			     size_t len, int sched)
 {
 	struct port_info *pi = netdev_priv(to_net_dev(d));
 	struct adapter *adap = pi->adapter;
@@ -680,17 +680,15 @@ static ssize_t tm_attr_store(struct devi
 }
 
 #define TM_ATTR(name, sched) \
-static ssize_t show_##name(struct device *d, struct device_attribute *attr, \
-			   char *buf) \
+static ssize_t show_##name(struct class_device *cd, char *buf) \
 { \
-	return tm_attr_show(d, buf, sched); \
+	return tm_attr_show(cd, buf, sched); \
 } \
-static ssize_t store_##name(struct device *d, struct device_attribute *attr, \
-			    const char *buf, size_t len) \
+static ssize_t store_##name(struct class_device *cd, const char *buf, size_t len) \
 { \
-	return tm_attr_store(d, buf, len, sched); \
+	return tm_attr_store(cd, buf, len, sched); \
 } \
-static DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_##name)
+static CLASS_DEVICE_ATTR(name, S_IRUGO | S_IWUSR, show_##name, store_##name)
 
 TM_ATTR(sched0, 0);
 TM_ATTR(sched1, 1);
@@ -702,14 +700,14 @@ TM_ATTR(sched6, 6);
 TM_ATTR(sched7, 7);
 
 static struct attribute *offload_attrs[] = {
-	&dev_attr_sched0.attr,
-	&dev_attr_sched1.attr,
-	&dev_attr_sched2.attr,
-	&dev_attr_sched3.attr,
-	&dev_attr_sched4.attr,
-	&dev_attr_sched5.attr,
-	&dev_attr_sched6.attr,
-	&dev_attr_sched7.attr,
+	&class_device_attr_sched0.attr,
+	&class_device_attr_sched1.attr,
+	&class_device_attr_sched2.attr,
+	&class_device_attr_sched3.attr,
+	&class_device_attr_sched4.attr,
+	&class_device_attr_sched5.attr,
+	&class_device_attr_sched6.attr,
+	&class_device_attr_sched7.attr,
 	NULL
 };
 
@@ -1051,8 +1049,8 @@ static int offload_open(struct net_devic
 		     adapter->port[0]->mtu : 0xffff);
 	init_smt(adapter);
 
-	if (sysfs_create_group(&tdev->lldev->dev.kobj, &offload_attr_group))
-		dev_dbg(&dev->dev, "cannot create sysfs group\n");
+ 	if (sysfs_create_group(&tdev->lldev->class_dev.kobj, &offload_attr_group))
+		dev_dbg(&adapter->pdev->dev, "cannot create sysfs group\n");
 
 	/* Call back all registered clients */
 	cxgb3_add_clients(tdev);
@@ -1077,7 +1075,7 @@ static int offload_close(struct t3cdev *
 	/* Call back all registered clients */
 	cxgb3_remove_clients(tdev);
 
-	sysfs_remove_group(&tdev->lldev->dev.kobj, &offload_attr_group);
+	sysfs_remove_group(&tdev->lldev->class_dev.kobj, &offload_attr_group);
 
 	tdev->lldev = NULL;
 	cxgb3_set_dummy_ops(tdev);
@@ -2788,7 +2786,7 @@ static int __devinit init_one(struct pci
 	else if (msi > 0 && pci_enable_msi(pdev) == 0)
 		adapter->flags |= USING_MSI;
 
-	err = sysfs_create_group(&adapter->port[0]->dev.kobj,
+	err = sysfs_create_group(&adapter->port[0]->class_dev.kobj,
 				 &cxgb3_attr_group);
 
 	print_port_info(adapter, ai);
@@ -2819,7 +2817,7 @@ static void __devexit remove_one(struct 
 		int i;
 
 		t3_sge_stop(adapter);
-		sysfs_remove_group(&adapter->port[0]->dev.kobj,
+		sysfs_remove_group(&adapter->port[0]->class_dev.kobj,
 				   &cxgb3_attr_group);
 
 		if (is_offload(adapter)) {
