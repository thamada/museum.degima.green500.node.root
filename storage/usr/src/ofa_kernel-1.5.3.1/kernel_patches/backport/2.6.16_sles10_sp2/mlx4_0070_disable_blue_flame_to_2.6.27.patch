From edf73c0165394d31f02b6e1438b987931981556d Mon Sep 17 00:00:00 2001
From: Eli Cohen <eli@mellanox.co.il>
Date: Tue, 30 Nov 2010 15:15:00 +0200
Subject: [PATCH] Disable blue flame for kernels without WC

kernels older than 2.6.28 do not support WC so disable blue flame for them.

Signed-off-by: Eli Cohen <eli@mellanox.co.il>
---
 drivers/net/mlx4/pd.c |   88 ++-----------------------------------------------
 1 files changed, 3 insertions(+), 85 deletions(-)

Index: ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check/drivers/net/mlx4/pd.c
===================================================================
--- ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check.orig/drivers/net/mlx4/pd.c	2010-12-14 10:08:30.000000000 +0200
+++ ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check/drivers/net/mlx4/pd.c	2010-12-14 12:26:57.000000000 +0200
@@ -33,7 +33,6 @@
 
 #include <linux/init.h>
 #include <linux/errno.h>
-#include <linux/io-mapping.h>
 
 #include <asm/page.h>
 
@@ -97,97 +96,14 @@ EXPORT_SYMBOL_GPL(mlx4_uar_free);
 
 int mlx4_bf_alloc(struct mlx4_dev *dev, struct mlx4_bf *bf)
 {
-	struct mlx4_priv *priv = mlx4_priv(dev);
-	struct mlx4_uar *uar;
-	int err = 0;
-	int idx;
-
-	if (!priv->bf_mapping)
-		return -ENOMEM;
-
-	mutex_lock(&priv->bf_mutex);
-	if (!list_empty(&priv->bf_list))
-		uar = list_entry(priv->bf_list.next, struct mlx4_uar, bf_list);
-	else {
-		if (mlx4_bitmap_avail(&priv->uar_table.bitmap) < MLX4_NUM_RESERVED_UARS) {
-			err = -ENOMEM;
-			goto out;
-		}
-		uar = kmalloc(sizeof *uar, GFP_KERNEL);
-		if (!uar) {
-			err = -ENOMEM;
-			goto out;
-		}
-		err = mlx4_uar_alloc(dev, uar);
-		if (err)
-			goto free_kmalloc;
-
-		uar->map = ioremap(uar->pfn << PAGE_SHIFT, PAGE_SIZE);
-		if (!uar->map) {
-			err = -ENOMEM;
-			goto free_uar;
-		}
-
-		uar->bf_map = io_mapping_map_wc(priv->bf_mapping, uar->index << PAGE_SHIFT);
-		if (!uar->bf_map) {
-			err = -ENOMEM;
-			goto unamp_uar;
-		}
-		uar->free_bf_bmap = 0;
-		list_add(&uar->bf_list, &priv->bf_list);
-	}
-
-	bf->uar = uar;
-	idx = ffz(uar->free_bf_bmap);
-	uar->free_bf_bmap |= 1 << idx;
-	bf->uar = uar;
-	bf->offset = 0;
-	bf->buf_size = dev->caps.bf_reg_size / 2;
-	bf->reg = uar->bf_map + idx * dev->caps.bf_reg_size;
-	if (uar->free_bf_bmap == (1 << dev->caps.bf_regs_per_page) - 1)
-		list_del_init(&uar->bf_list);
-
-	goto out;
-
-unamp_uar:
-	bf->uar = NULL;
-	iounmap(uar->map);
-
-free_uar:
-	mlx4_uar_free(dev, uar);
-
-free_kmalloc:
-	kfree(uar);
-
-out:
-	mutex_unlock(&priv->bf_mutex);
-	return err;
+	memset(bf, 0, sizeof *bf);
+	return -ENOSYS;
 }
 EXPORT_SYMBOL_GPL(mlx4_bf_alloc);
 
 void mlx4_bf_free(struct mlx4_dev *dev, struct mlx4_bf *bf)
 {
-	struct mlx4_priv *priv = mlx4_priv(dev);
-	int idx;
-
-	if (!bf->uar || !bf->uar->bf_map)
-		return;
-
-	mutex_lock(&priv->bf_mutex);
-	idx = (bf->reg - bf->uar->bf_map) / dev->caps.bf_reg_size;
-	bf->uar->free_bf_bmap &= ~(1 << idx);
-	if (!bf->uar->free_bf_bmap) {
-		if (!list_empty(&bf->uar->bf_list))
-			list_del(&bf->uar->bf_list);
-
-		io_mapping_unmap(bf->uar->bf_map);
-		iounmap(bf->uar->map);
-		mlx4_uar_free(dev, bf->uar);
-		kfree(bf->uar);
-	} else if (list_empty(&bf->uar->bf_list))
-		list_add(&bf->uar->bf_list, &priv->bf_list);
-
-	mutex_unlock(&priv->bf_mutex);
+	return;
 }
 EXPORT_SYMBOL_GPL(mlx4_bf_free);
 
Index: ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check/drivers/net/mlx4/main.c
===================================================================
--- ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check.orig/drivers/net/mlx4/main.c	2010-12-14 10:08:29.000000000 +0200
+++ ofa_1_5_dev_kernel-20101214-1002_linux-2.6.24.3_check/drivers/net/mlx4/main.c	2010-12-14 12:25:25.000000000 +0200
@@ -38,7 +38,6 @@
 #include <linux/errno.h>
 #include <linux/pci.h>
 #include <linux/dma-mapping.h>
-#include <linux/io-mapping.h>
 
 #include <linux/mlx4/device.h>
 #include <linux/mlx4/doorbell.h>
@@ -876,24 +875,11 @@ static void mlx4_free_icms(struct mlx4_d
 
 static int map_bf_area(struct mlx4_dev *dev)
 {
-	struct mlx4_priv *priv = mlx4_priv(dev);
-	resource_size_t bf_start;
-	resource_size_t bf_len;
-	int err = 0;
-
-	bf_start = pci_resource_start(dev->pdev, 2) + (dev->caps.num_uars << PAGE_SHIFT);
-	bf_len = pci_resource_len(dev->pdev, 2) - (dev->caps.num_uars << PAGE_SHIFT);
-	priv->bf_mapping = io_mapping_create_wc(bf_start, bf_len);
-	if (!priv->bf_mapping)
-		err = -ENOMEM;
-
-	return err;
+	return -1;
 }
 
 static void unmap_bf_area(struct mlx4_dev *dev)
 {
-	if (mlx4_priv(dev)->bf_mapping)
-		io_mapping_free(mlx4_priv(dev)->bf_mapping);
 }
 
 static void mlx4_close_hca(struct mlx4_dev *dev)
