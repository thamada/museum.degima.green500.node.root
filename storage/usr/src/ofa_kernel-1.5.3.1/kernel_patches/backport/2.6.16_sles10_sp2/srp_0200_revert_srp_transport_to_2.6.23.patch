commit 3236822b1c9b67ad10745d965515b528818f1120
Author: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
Date:   Wed Jun 27 16:33:12 2007 +0900

    [SCSI] ib_srp: convert to use the srp transport class
    
    This converts ib_srp to use the srp transport class.
    
    I don't have ib hardware so I've not tested this patch.
    
    Signed-off-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
    Cc: Roland Dreier <rolandd@cisco.com>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

---
 drivers/infiniband/ulp/srp/Kconfig  |    1 -
 drivers/infiniband/ulp/srp/ib_srp.c |   28 ----------------------------
 2 files changed, 29 deletions(-)

Index: ofed_kernel/drivers/infiniband/ulp/srp/Kconfig
===================================================================
--- ofed_kernel.orig/drivers/infiniband/ulp/srp/Kconfig
+++ ofed_kernel/drivers/infiniband/ulp/srp/Kconfig
@@ -1,7 +1,6 @@
 config INFINIBAND_SRP
 	tristate "InfiniBand SCSI RDMA Protocol"
 	depends on SCSI
-	select SCSI_SRP_ATTRS
 	---help---
 	  Support for the SCSI RDMA Protocol over InfiniBand.  This
 	  allows you to access storage devices that speak SRP over
Index: ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/ulp/srp/ib_srp.c
+++ ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.c
@@ -45,7 +45,6 @@
 #include <scsi/scsi_device.h>
 #include <scsi/scsi_dbg.h>
 #include <scsi/srp.h>
-#include <scsi/scsi_transport_srp.h>
 
 #include "ib_srp.h"
 
@@ -90,8 +89,6 @@ static void srp_remove_one(struct ib_dev
 static void srp_completion(struct ib_cq *cq, void *target_ptr);
 static int srp_cm_handler(struct ib_cm_id *cm_id, struct ib_cm_event *event);
 
-static struct scsi_transport_template *ib_srp_transport_template;
-
 static struct ib_client srp_client = {
 	.name   = "srp",
 	.add    = srp_add_one,
@@ -447,7 +444,6 @@ static void srp_remove_work(struct work_
 	list_del(&target->list);
 	spin_unlock(&target->srp_host->target_lock);
 
-	srp_remove_host(target->scsi_host);
 	scsi_remove_host(target->scsi_host);
 	ib_destroy_cm_id(target->cm_id);
 	srp_free_target_ib(target);
@@ -1730,23 +1726,12 @@ static struct scsi_host_template srp_tem
 
 static int srp_add_target(struct srp_host *host, struct srp_target_port *target)
 {
-	struct srp_rport_identifiers ids;
-	struct srp_rport *rport;
-
 	sprintf(target->target_name, "SRP.T10:%016llX",
 		 (unsigned long long) be64_to_cpu(target->id_ext));
 
 	if (scsi_add_host(target->scsi_host, host->srp_dev->dev->dma_device))
 		return -ENODEV;
 
-	memcpy(ids.port_id, &target->id_ext, 8);
-	memcpy(ids.port_id + 8, &target->ioc_guid, 8);
-	rport = srp_rport_add(target->scsi_host, &ids);
-	if (IS_ERR(rport)) {
-		scsi_remove_host(target->scsi_host);
-		return PTR_ERR(rport);
-	}
-
 	spin_lock(&host->target_lock);
 	list_add_tail(&target->list, &host->target_list);
 	spin_unlock(&host->target_lock);
@@ -1973,7 +1958,6 @@ static ssize_t srp_create_target(struct 
 	if (!target_host)
 		return -ENOMEM;
 
-	target_host->transportt = ib_srp_transport_template;
 	target_host->max_lun     = SRP_MAX_LUN;
 	target_host->max_cmd_len = sizeof ((struct srp_cmd *) (void *) 0L)->cdb;
 
@@ -2307,7 +2291,6 @@ static void srp_remove_one(struct ib_dev
 
 		list_for_each_entry_safe(target, tmp_target,
 					 &host->target_list, list) {
-			srp_remove_host(target->scsi_host);
 			scsi_remove_host(target->scsi_host);
 			srp_disconnect_target(target);
 			ib_destroy_cm_id(target->cm_id);
@@ -2326,9 +2309,6 @@ static void srp_remove_one(struct ib_dev
 	kfree(srp_dev);
 }
 
-static struct srp_function_template ib_srp_transport_functions = {
-};
-
 static int __init srp_init_module(void)
 {
 	int ret;
@@ -2338,11 +2318,6 @@ static int __init srp_init_module(void)
 		srp_sg_tablesize = 255;
 	}
 
-	ib_srp_transport_template =
-		srp_attach_transport(&ib_srp_transport_functions);
-	if (!ib_srp_transport_template)
-		return -ENOMEM;
-
 	srp_template.sg_tablesize = srp_sg_tablesize;
 	srp_max_iu_len = (sizeof (struct srp_cmd) +
 			  sizeof (struct srp_indirect_buf) +
@@ -2354,7 +2329,6 @@ static int __init srp_init_module(void)
 	ret = class_register(&srp_class);
 	if (ret) {
 		printk(KERN_ERR PFX "couldn't register class infiniband_srp\n");
-		srp_release_transport(ib_srp_transport_template);
 		return ret;
 	}
 
@@ -2363,7 +2337,6 @@ static int __init srp_init_module(void)
 	ret = ib_register_client(&srp_client);
 	if (ret) {
 		printk(KERN_ERR PFX "couldn't register IB client\n");
-		srp_release_transport(ib_srp_transport_template);
 		ib_sa_unregister_client(&srp_sa_client);
 		class_unregister(&srp_class);
 		return ret;
@@ -2377,7 +2350,6 @@ static void __exit srp_cleanup_module(vo
 	ib_unregister_client(&srp_client);
 	ib_sa_unregister_client(&srp_sa_client);
 	class_unregister(&srp_class);
-	srp_release_transport(ib_srp_transport_template);
 }
 
 module_init(srp_init_module);
