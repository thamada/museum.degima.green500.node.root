---
 drivers/infiniband/ulp/srp/ib_srp.c |  154 ++++++++++++++++--------------------
 drivers/infiniband/ulp/srp/ib_srp.h |    2 
 2 files changed, 72 insertions(+), 84 deletions(-)

Index: ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/ulp/srp/ib_srp.c
+++ ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.c
@@ -1517,10 +1517,9 @@ static int srp_reset_host(struct scsi_cm
 	return ret;
 }
 
-static ssize_t show_id_ext(struct device *dev, struct device_attribute *attr,
-			   char *buf)
+static ssize_t show_id_ext(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1530,10 +1529,9 @@ static ssize_t show_id_ext(struct device
 		       (unsigned long long) be64_to_cpu(target->id_ext));
 }
 
-static ssize_t show_ioc_guid(struct device *dev, struct device_attribute *attr,
-			     char *buf)
+static ssize_t show_ioc_guid(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1543,10 +1541,9 @@ static ssize_t show_ioc_guid(struct devi
 		       (unsigned long long) be64_to_cpu(target->ioc_guid));
 }
 
-static ssize_t show_service_id(struct device *dev,
-			       struct device_attribute *attr, char *buf)
+static ssize_t show_service_id(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1556,10 +1553,9 @@ static ssize_t show_service_id(struct de
 		       (unsigned long long) be64_to_cpu(target->service_id));
 }
 
-static ssize_t show_pkey(struct device *dev, struct device_attribute *attr,
-			 char *buf)
+static ssize_t show_pkey(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1568,10 +1564,9 @@ static ssize_t show_pkey(struct device *
 	return sprintf(buf, "0x%04x\n", be16_to_cpu(target->path.pkey));
 }
 
-static ssize_t show_dgid(struct device *dev, struct device_attribute *attr,
-			 char *buf)
+static ssize_t show_dgid(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1588,10 +1583,9 @@ static ssize_t show_dgid(struct device *
 		       be16_to_cpu(((__be16 *) target->path.dgid.raw)[7]));
 }
 
-static ssize_t show_orig_dgid(struct device *dev,
-			      struct device_attribute *attr, char *buf)
+static ssize_t show_orig_dgid(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1608,10 +1602,9 @@ static ssize_t show_orig_dgid(struct dev
 		       be16_to_cpu(target->orig_dgid[7]));
 }
 
-static ssize_t show_zero_req_lim(struct device *dev,
-				 struct device_attribute *attr, char *buf)
+static ssize_t show_zero_req_lim(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	if (target->state == SRP_TARGET_DEAD ||
 	    target->state == SRP_TARGET_REMOVED)
@@ -1620,27 +1613,24 @@ static ssize_t show_zero_req_lim(struct 
 	return sprintf(buf, "%d\n", target->zero_req_lim);
 }
 
-static ssize_t show_local_ib_port(struct device *dev,
-				  struct device_attribute *attr, char *buf)
+static ssize_t show_local_ib_port(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	return sprintf(buf, "%d\n", target->srp_host->port);
 }
 
-static ssize_t show_local_ib_device(struct device *dev,
-				    struct device_attribute *attr, char *buf)
+static ssize_t show_local_ib_device(struct class_device *cdev, char *buf)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	return sprintf(buf, "%s\n", target->srp_host->srp_dev->dev->name);
 }
 
-static ssize_t srp_target_oofabric(struct device *dev,
-				   struct device_attribute *attr, const char *buf,
-				   size_t count)
+static ssize_t srp_target_oofabric(struct class_device *cdev,
+				   const char *buf, size_t count)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	shost_printk(KERN_DEBUG, target->scsi_host, PFX
 		     "Get async_event out-of-fabric at state=%d qp_err=%d\n",
@@ -1657,11 +1647,10 @@ static ssize_t srp_target_oofabric(struc
 	return count;
 }
 
-static ssize_t srp_target_infabric(struct device *dev,
-				   struct device_attribute *attr, const char *buf,
-				   size_t count)
+static ssize_t srp_target_infabric(struct class_device *cdev,
+				   const char *buf, size_t count)
 {
-	struct srp_target_port *target = host_to_target(class_to_shost(dev));
+	struct srp_target_port *target = host_to_target(class_to_shost(cdev));
 
 	shost_printk(KERN_DEBUG, target->scsi_host, PFX
 		     "Get async_event in-fabric at state=%d qp_err=%d\n",
@@ -1681,30 +1670,30 @@ static ssize_t srp_target_infabric(struc
 	return count;
 }
 
-static DEVICE_ATTR(id_ext,	    S_IRUGO, show_id_ext,	   NULL);
-static DEVICE_ATTR(ioc_guid,	    S_IRUGO, show_ioc_guid,	   NULL);
-static DEVICE_ATTR(service_id,	    S_IRUGO, show_service_id,	   NULL);
-static DEVICE_ATTR(pkey,	    S_IRUGO, show_pkey,		   NULL);
-static DEVICE_ATTR(dgid,	    S_IRUGO, show_dgid,		   NULL);
-static DEVICE_ATTR(orig_dgid,	    S_IRUGO, show_orig_dgid,	   NULL);
-static DEVICE_ATTR(zero_req_lim,    S_IRUGO, show_zero_req_lim,	   NULL);
-static DEVICE_ATTR(local_ib_port,   S_IRUGO, show_local_ib_port,   NULL);
-static DEVICE_ATTR(local_ib_device, S_IRUGO, show_local_ib_device, NULL);
-static DEVICE_ATTR(target_oofabric, S_IWUSR, NULL,  srp_target_oofabric);
-static DEVICE_ATTR(target_infabric, S_IWUSR, NULL,  srp_target_infabric);
-
-static struct device_attribute *srp_host_attrs[] = {
-	&dev_attr_id_ext,
-	&dev_attr_ioc_guid,
-	&dev_attr_service_id,
-	&dev_attr_pkey,
-	&dev_attr_dgid,
-	&dev_attr_orig_dgid,
-	&dev_attr_zero_req_lim,
-	&dev_attr_local_ib_port,
-	&dev_attr_local_ib_device,
-	&dev_attr_target_oofabric,
-	&dev_attr_target_infabric,
+static CLASS_DEVICE_ATTR(id_ext,	  S_IRUGO, show_id_ext,		 NULL);
+static CLASS_DEVICE_ATTR(ioc_guid,	  S_IRUGO, show_ioc_guid,	 NULL);
+static CLASS_DEVICE_ATTR(service_id,	  S_IRUGO, show_service_id,	 NULL);
+static CLASS_DEVICE_ATTR(pkey,		  S_IRUGO, show_pkey,		 NULL);
+static CLASS_DEVICE_ATTR(dgid,		  S_IRUGO, show_dgid,		 NULL);
+static CLASS_DEVICE_ATTR(orig_dgid,	  S_IRUGO, show_orig_dgid,	 NULL);
+static CLASS_DEVICE_ATTR(zero_req_lim,	  S_IRUGO, show_zero_req_lim,	 NULL);
+static CLASS_DEVICE_ATTR(local_ib_port,   S_IRUGO, show_local_ib_port,	 NULL);
+static CLASS_DEVICE_ATTR(local_ib_device, S_IRUGO, show_local_ib_device, NULL);
+static CLASS_DEVICE_ATTR(target_oofabric, S_IWUSR, NULL,  srp_target_oofabric);
+static CLASS_DEVICE_ATTR(target_infabric, S_IWUSR, NULL,  srp_target_infabric);
+
+static struct class_device_attribute *srp_host_attrs[] = {
+	&class_device_attr_id_ext,
+	&class_device_attr_ioc_guid,
+	&class_device_attr_service_id,
+	&class_device_attr_pkey,
+	&class_device_attr_dgid,
+	&class_device_attr_orig_dgid,
+	&class_device_attr_zero_req_lim,
+	&class_device_attr_local_ib_port,
+	&class_device_attr_local_ib_device,
+	&class_device_attr_target_oofabric,
+	&class_device_attr_target_infabric,
 	NULL
 };
 
@@ -1744,17 +1733,17 @@ static int srp_add_target(struct srp_hos
 	return 0;
 }
 
-static void srp_release_dev(struct device *dev)
+static void srp_release_class_dev(struct class_device *class_dev)
 {
 	struct srp_host *host =
-		container_of(dev, struct srp_host, dev);
+		container_of(class_dev, struct srp_host, class_dev);
 
 	complete(&host->released);
 }
 
 static struct class srp_class = {
 	.name    = "infiniband_srp",
-	.dev_release = srp_release_dev
+	.release = srp_release_class_dev
 };
 
 /*
@@ -1942,12 +1931,11 @@ out:
 	return ret;
 }
 
-static ssize_t srp_create_target(struct device *dev,
-				 struct device_attribute *attr,
+static ssize_t srp_create_target(struct class_device *class_dev,
 				 const char *buf, size_t count)
 {
 	struct srp_host *host =
-		container_of(dev, struct srp_host, dev);
+		container_of(class_dev, struct srp_host, class_dev);
 	struct Scsi_Host *target_host;
 	struct srp_target_port *target;
 	int ret;
@@ -2033,27 +2021,27 @@ err:
 	return ret;
 }
 
-static DEVICE_ATTR(add_target, S_IWUSR, NULL, srp_create_target);
+static CLASS_DEVICE_ATTR(add_target, S_IWUSR, NULL, srp_create_target);
 
-static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
-			  char *buf)
+static ssize_t show_ibdev(struct class_device *class_dev, char *buf)
 {
-	struct srp_host *host = container_of(dev, struct srp_host, dev);
+	struct srp_host *host =
+		container_of(class_dev, struct srp_host, class_dev);
 
 	return sprintf(buf, "%s\n", host->srp_dev->dev->name);
 }
 
-static DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
+static CLASS_DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
 
-static ssize_t show_port(struct device *dev, struct device_attribute *attr,
-			 char *buf)
+static ssize_t show_port(struct class_device *class_dev, char *buf)
 {
-	struct srp_host *host = container_of(dev, struct srp_host, dev);
+	struct srp_host *host =
+		container_of(class_dev, struct srp_host, class_dev);
 
 	return sprintf(buf, "%d\n", host->port);
 }
 
-static DEVICE_ATTR(port, S_IRUGO, show_port, NULL);
+static CLASS_DEVICE_ATTR(port, S_IRUGO, show_port, NULL);
 
 static struct srp_host *srp_add_port(struct srp_device *device, u8 port)
 {
@@ -2069,24 +2057,24 @@ static struct srp_host *srp_add_port(str
 	host->srp_dev = device;
 	host->port = port;
 
-	host->dev.class = &srp_class;
-	host->dev.parent = device->dev->dma_device;
-	snprintf(host->dev.bus_id, BUS_ID_SIZE, "srp-%s-%d",
+	host->class_dev.class = &srp_class;
+	host->class_dev.dev   = device->dev->dma_device;
+	snprintf(host->class_dev.class_id, BUS_ID_SIZE, "srp-%s-%d",
 		 device->dev->name, port);
 
-	if (device_register(&host->dev))
+	if (class_device_register(&host->class_dev))
 		goto free_host;
-	if (device_create_file(&host->dev, &dev_attr_add_target))
+	if (class_device_create_file(&host->class_dev, &class_device_attr_add_target))
 		goto err_class;
-	if (device_create_file(&host->dev, &dev_attr_ibdev))
+	if (class_device_create_file(&host->class_dev, &class_device_attr_ibdev))
 		goto err_class;
-	if (device_create_file(&host->dev, &dev_attr_port))
+	if (class_device_create_file(&host->class_dev, &class_device_attr_port))
 		goto err_class;
 
 	return host;
 
 err_class:
-	device_unregister(&host->dev);
+	class_device_unregister(&host->class_dev);
 
 free_host:
 	kfree(host);
@@ -2263,7 +2251,7 @@ static void srp_remove_one(struct ib_dev
 	ib_unregister_event_handler(&srp_dev->event_handler);
 
 	list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list) {
-		device_unregister(&host->dev);
+		class_device_unregister(&host->class_dev);
 		/*
 		 * Wait for the sysfs entry to go away, so that no new
 		 * target ports can be created.
Index: ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.h
===================================================================
--- ofed_kernel.orig/drivers/infiniband/ulp/srp/ib_srp.h
+++ ofed_kernel/drivers/infiniband/ulp/srp/ib_srp.h
@@ -98,7 +98,7 @@ struct srp_device {
 struct srp_host {
 	struct srp_device      *srp_dev;
 	u8			port;
-	struct device		dev;
+	struct class_device	class_dev;
 	struct list_head	target_list;
 	spinlock_t		target_lock;
 	struct completion	released;
