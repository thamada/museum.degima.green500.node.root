Index: ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check/drivers/net/mlx4/en_netdev.c
===================================================================
--- ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check.orig/drivers/net/mlx4/en_netdev.c	2011-02-24 11:42:18.000000000 +0200
+++ ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check/drivers/net/mlx4/en_netdev.c	2011-02-24 11:55:13.000000000 +0200
@@ -163,40 +163,29 @@ static void mlx4_en_do_set_mac(struct wo
 static void mlx4_en_clear_list(struct net_device *dev)
 {
 	struct mlx4_en_priv *priv = netdev_priv(dev);
-	struct dev_mc_list *plist = priv->mc_list;
-	struct dev_mc_list *next;
 
-	while (plist) {
-		next = plist->next;
-		kfree(plist);
-		plist = next;
-	}
-	priv->mc_list = NULL;
+	kfree(priv->mc_addrs);
+	priv->mc_addrs_cnt = 0;
 }
 
 static void mlx4_en_cache_mclist(struct net_device *dev)
 {
 	struct mlx4_en_priv *priv = netdev_priv(dev);
-	struct dev_mc_list *mclist;
-	struct dev_mc_list *tmp;
-	struct dev_mc_list *plist = NULL;
+	struct netdev_hw_addr *ha;
+	char *mc_addrs;
+	int mc_addrs_cnt = netdev_mc_count(dev);
+	int i;
 
-	mlx4_en_clear_list(dev);
-	for (mclist = dev->mc_list; mclist; mclist = mclist->next) {
-		tmp = kmalloc(sizeof(struct dev_mc_list), GFP_ATOMIC);
-		if (!tmp) {
-			en_err(priv, "failed to allocate multicast list\n");
-			mlx4_en_clear_list(dev);
-			return;
-		}
-		memcpy(tmp, mclist, sizeof(struct dev_mc_list));
-		tmp->next = NULL;
-		if (plist)
-			plist->next = tmp;
-		else
-			priv->mc_list = tmp;
-		plist = tmp;
+	mc_addrs = kmalloc(mc_addrs_cnt * ETH_ALEN, GFP_ATOMIC);
+	if (!mc_addrs) {
+		en_err(priv, "failed to allocate multicast list\n");
+		return;
 	}
+	i = 0;
+	netdev_for_each_mc_addr(ha, dev)
+		memcpy(mc_addrs + i++ * ETH_ALEN, ha->addr, ETH_ALEN);
+	priv->mc_addrs = mc_addrs;
+	priv->mc_addrs_cnt = mc_addrs_cnt;
 }
 
 
@@ -216,7 +205,6 @@ static void mlx4_en_do_set_multicast(str
 						 mcast_task);
 	struct mlx4_en_dev *mdev = priv->mdev;
 	struct net_device *dev = priv->dev;
-	struct dev_mc_list *mclist;
 	u64 mcast_addr = 0;
 	u8 mc_list[16] = {0};
 	int err;
@@ -342,7 +330,7 @@ static void mlx4_en_do_set_multicast(str
 			priv->flags |= MLX4_EN_FLAG_MC_PROMISC;
 		}
 	} else {
-
+		int i;
 		/* Disable Multicast promisc */
 		if (priv->flags & MLX4_EN_FLAG_MC_PROMISC) {
 			err = mlx4_multicast_promisc_remove(mdev->dev, priv->base_qpn,
@@ -358,8 +346,8 @@ static void mlx4_en_do_set_multicast(str
 			en_err(priv, "Failed disabling multicast filter\n");
 
 		/* Detach our qp from all the multicast addresses */
-		for (mclist = priv->mc_list; mclist; mclist = mclist->next) {
-			memcpy(&mc_list[10], mclist->dmi_addr, ETH_ALEN);
+		for (i = 0; i < priv->mc_addrs_cnt; i++) {
+			memcpy(&mc_list[10], priv->mc_addrs + i * ETH_ALEN, ETH_ALEN);
 			mc_list[5] = priv->port;
 			mlx4_multicast_detach(mdev->dev, &priv->rss_map.indir_qp,
 					      mc_list, MLX4_PROT_ETH, 0);
@@ -373,12 +361,13 @@ static void mlx4_en_do_set_multicast(str
 		netif_tx_lock_bh(dev);
 		mlx4_en_cache_mclist(dev);
 		netif_tx_unlock_bh(dev);
-		for (mclist = priv->mc_list; mclist; mclist = mclist->next) {
-			memcpy(&mc_list[10], mclist->dmi_addr, ETH_ALEN);
+ 		for (i = 0; i < priv->mc_addrs_cnt; i++) {
+ 			mcast_addr =
+ 			      mlx4_en_mac_to_u64(priv->mc_addrs + i * ETH_ALEN);
+ 			memcpy(&mc_list[10], priv->mc_addrs + i * ETH_ALEN, ETH_ALEN);
 			mc_list[5] = priv->port;
 			mlx4_multicast_attach(mdev->dev, &priv->rss_map.indir_qp,
 					      mc_list, 0, MLX4_PROT_ETH, 0);
-			mcast_addr = mlx4_en_mac_to_u64(mclist->dmi_addr);
 			mlx4_SET_MCAST_FLTR(mdev->dev, priv->port,
 					    mcast_addr, 0, MLX4_MCAST_CONFIG);
 		}
@@ -831,7 +820,6 @@ void mlx4_en_stop_port(struct net_device
 {
 	struct mlx4_en_priv *priv = netdev_priv(dev);
 	struct mlx4_en_dev *mdev = priv->mdev;
-	struct dev_mc_list *mclist;
 	int i;
 	u8 mc_list[16] = {0};
 
@@ -853,8 +841,8 @@ void mlx4_en_stop_port(struct net_device
 	mc_list[5] = priv->port;
 	mlx4_multicast_detach(mdev->dev, &priv->rss_map.indir_qp, mc_list,
 			      MLX4_PROT_ETH, 0);
-	for (mclist = priv->mc_list; mclist; mclist = mclist->next) {
-		memcpy(&mc_list[10], mclist->dmi_addr, ETH_ALEN);
+	for (i = 0; i < priv->mc_addrs_cnt; i++) {
+		memcpy(&mc_list[10], priv->mc_addrs + i * ETH_ALEN, ETH_ALEN);
 		mc_list[5] = priv->port;
 		mlx4_multicast_detach(mdev->dev, &priv->rss_map.indir_qp,
 				      mc_list, MLX4_PROT_ETH, 0);
@@ -1142,7 +1130,6 @@ int mlx4_en_init_netdev(struct mlx4_en_d
 	priv->tx_ring_num = prof->tx_ring_num;
 	priv->rx_ring_num = prof->rx_ring_num;
 	priv->udp_rings = mdev->profile.udp_rss ? prof->rx_ring_num / 2 : 1;
-	priv->mc_list = NULL;
 	priv->mac_index = -1;
 	priv->msg_enable = MLX4_EN_MSG_LEVEL;
 	spin_lock_init(&priv->stats_lock);
Index: ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check/drivers/net/mlx4/mlx4_en.h
===================================================================
--- ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check.orig/drivers/net/mlx4/mlx4_en.h	2011-02-24 11:42:18.000000000 +0200
+++ ofa_1_5_dev_kernel-20110224-1114_linux-2.6.35_check/drivers/net/mlx4/mlx4_en.h	2011-02-24 11:45:49.000000000 +0200
@@ -548,7 +548,8 @@ struct mlx4_en_priv {
 	struct mlx4_en_perf_stats pstats;
 	struct mlx4_en_pkt_stats pkstats;
 	struct mlx4_en_port_stats port_stats;
-	struct dev_mc_list *mc_list;
+	char *mc_addrs;
+	int mc_addrs_cnt;
 	struct mlx4_en_stat_out_mbox hw_stats;
 	int vids[128];
 };
