---
 drivers/infiniband/core/cm.c          |    2 
 drivers/infiniband/core/sysfs.c       |  172 ++++++++++++++++------------------
 drivers/infiniband/core/ucm.c         |   62 ++++++------
 drivers/infiniband/core/user_mad.c    |  109 ++++++++++-----------
 drivers/infiniband/core/uverbs.h      |    4 
 drivers/infiniband/core/uverbs_main.c |   51 ++++------
 include/rdma/ib_verbs.h               |    2 
 7 files changed, 199 insertions(+), 203 deletions(-)

Index: ofed_kernel/drivers/infiniband/core/cm.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/cm.c
+++ ofed_kernel/drivers/infiniband/core/cm.c
@@ -175,7 +175,7 @@ struct cm_port {
 struct cm_device {
 	struct list_head list;
 	struct ib_device *ib_device;
-	struct device *device;
+	struct class_device *device;
 	u8 ack_delay;
 	struct cm_port *port[0];
 };
@@ -3738,8 +3738,8 @@ static void cm_add_one(struct ib_device 
 	cm_dev->ib_device = ib_device;
 	cm_get_ack_delay(cm_dev);
 
-	cm_dev->device = device_create(&cm_class, &ib_device->dev,
-					       MKDEV(0, 0),
+	cm_dev->device = class_device_create(&cm_class, &ib_device->class_dev,
+					       MKDEV(0, 0), NULL,
 					       "%s", ib_device->name);
 	if (!cm_dev->device) {
 		kfree(cm_dev);
@@ -3794,7 +3794,7 @@ error1:
 		ib_unregister_mad_agent(port->mad_agent);
 		cm_remove_port_fs(port);
 	}
-	device_unregister(cm_dev->device);
+	class_device_unregister(cm_dev->device);
 	kfree(cm_dev);
 }
 
@@ -3823,7 +3823,7 @@ static void cm_remove_one(struct ib_devi
 		flush_workqueue(cm.wq);
 		cm_remove_port_fs(port);
 	}
-	device_unregister(cm_dev->device);
+	class_device_unregister(cm_dev->device);
 	kfree(cm_dev);
 }
 
Index: ofed_kernel/drivers/infiniband/core/sysfs.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/sysfs.c
+++ ofed_kernel/drivers/infiniband/core/sysfs.c
@@ -425,25 +425,28 @@ static struct kobj_type port_type = {
 	.default_attrs = port_default_attrs
 };
 
-static void ib_device_release(struct device *device)
+static void ib_device_release(struct class_device *cdev)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 
 	kfree(dev);
 }
 
-static int ib_device_uevent(struct device *device,
-			    struct kobj_uevent_env *env)
+static int ib_device_uevent(struct class_device *cdev, char **envp,
+			    int num_envp, char *buf, int size)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
+	int i = 0, len = 0;
 
-	if (add_uevent_var(env, "NAME=%s", dev->name))
+	if (add_uevent_var(envp, num_envp, &i, buf, size, &len,
+			   "NAME=%s", dev->name))
 		return -ENOMEM;
 
 	/*
 	 * It would be nice to pass the node GUID with the event...
 	 */
 
+	envp[i] = NULL;
 	return 0;
 }
 
@@ -565,10 +568,9 @@ err_put:
 	return ret;
 }
 
-static ssize_t show_node_type(struct device *device,
-			      struct device_attribute *attr, char *buf)
+static ssize_t show_node_type(struct class_device *cdev, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 
 	if (!ibdev_is_alive(dev))
 		return -ENODEV;
@@ -582,10 +584,9 @@ static ssize_t show_node_type(struct dev
 	}
 }
 
-static ssize_t show_sys_image_guid(struct device *device,
-				   struct device_attribute *dev_attr, char *buf)
+static ssize_t show_sys_image_guid(struct class_device *cdev, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 	struct ib_device_attr attr;
 	ssize_t ret;
 
@@ -603,10 +604,9 @@ static ssize_t show_sys_image_guid(struc
 		       be16_to_cpu(((__be16 *) &attr.sys_image_guid)[3]));
 }
 
-static ssize_t show_node_guid(struct device *device,
-			      struct device_attribute *attr, char *buf)
+static ssize_t show_node_guid(struct class_device *cdev, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 
 	if (!ibdev_is_alive(dev))
 		return -ENODEV;
@@ -618,19 +618,17 @@ static ssize_t show_node_guid(struct dev
 		       be16_to_cpu(((__be16 *) &dev->node_guid)[3]));
 }
 
-static ssize_t show_node_desc(struct device *device,
-			      struct device_attribute *attr, char *buf)
+static ssize_t show_node_desc(struct class_device *cdev, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 
 	return sprintf(buf, "%.64s\n", dev->node_desc);
 }
 
-static ssize_t set_node_desc(struct device *device,
-			     struct device_attribute *attr,
-			     const char *buf, size_t count)
+static ssize_t set_node_desc(struct class_device *cdev, const char *buf,
+			      size_t count)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 	struct ib_device_modify desc = {};
 	int ret;
 
@@ -645,30 +643,30 @@ static ssize_t set_node_desc(struct devi
 	return count;
 }
 
-static DEVICE_ATTR(node_type, S_IRUGO, show_node_type, NULL);
-static DEVICE_ATTR(sys_image_guid, S_IRUGO, show_sys_image_guid, NULL);
-static DEVICE_ATTR(node_guid, S_IRUGO, show_node_guid, NULL);
-static DEVICE_ATTR(node_desc, S_IRUGO | S_IWUSR, show_node_desc, set_node_desc);
-
-static struct device_attribute *ib_class_attributes[] = {
-	&dev_attr_node_type,
-	&dev_attr_sys_image_guid,
-	&dev_attr_node_guid,
-	&dev_attr_node_desc
+static CLASS_DEVICE_ATTR(node_type, S_IRUGO, show_node_type, NULL);
+static CLASS_DEVICE_ATTR(sys_image_guid, S_IRUGO, show_sys_image_guid, NULL);
+static CLASS_DEVICE_ATTR(node_guid, S_IRUGO, show_node_guid, NULL);
+static CLASS_DEVICE_ATTR(node_desc, S_IRUGO | S_IWUSR, show_node_desc, set_node_desc);
+
+static struct class_device_attribute *ib_class_attributes[] = {
+	&class_device_attr_node_type,
+	&class_device_attr_sys_image_guid,
+	&class_device_attr_node_guid,
+	&class_device_attr_node_desc
 };
 
 static struct class ib_class = {
 	.name    = "infiniband",
-	.dev_release = ib_device_release,
-	.dev_uevent = ib_device_uevent,
+	.release = ib_device_release,
+	.uevent = ib_device_uevent,
 };
 
 /* Show a given an attribute in the statistics group */
-static ssize_t show_protocol_stat(const struct device *device,
-			    struct device_attribute *attr, char *buf,
+static ssize_t show_protocol_stat(struct class_device *cdev,
+			    char *buf,
 			    unsigned offset)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = container_of(cdev, struct ib_device, class_dev);
 	union rdma_protocol_stats stats;
 	ssize_t ret;
 
@@ -682,14 +680,14 @@ static ssize_t show_protocol_stat(const 
 
 /* generate a read-only iwarp statistics attribute */
 #define IW_STATS_ENTRY(name)						\
-static ssize_t show_##name(struct device *device,			\
-			   struct device_attribute *attr, char *buf)	\
+static ssize_t show_##name(struct class_device *cdev,			\
+			   char *buf)					\
 {									\
-	return show_protocol_stat(device, attr, buf,			\
+	return show_protocol_stat(cdev, buf,			\
 				  offsetof(struct iw_protocol_stats, name) / \
 				  sizeof (u64));			\
 }									\
-static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)
+static CLASS_DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)
 
 IW_STATS_ENTRY(ipInReceives);
 IW_STATS_ENTRY(ipInHdrErrors);
@@ -731,44 +729,44 @@ IW_STATS_ENTRY(tcpInErrs);
 IW_STATS_ENTRY(tcpOutRsts);
 
 static struct attribute *iw_proto_stats_attrs[] = {
-	&dev_attr_ipInReceives.attr,
-	&dev_attr_ipInHdrErrors.attr,
-	&dev_attr_ipInTooBigErrors.attr,
-	&dev_attr_ipInNoRoutes.attr,
-	&dev_attr_ipInAddrErrors.attr,
-	&dev_attr_ipInUnknownProtos.attr,
-	&dev_attr_ipInTruncatedPkts.attr,
-	&dev_attr_ipInDiscards.attr,
-	&dev_attr_ipInDelivers.attr,
-	&dev_attr_ipOutForwDatagrams.attr,
-	&dev_attr_ipOutRequests.attr,
-	&dev_attr_ipOutDiscards.attr,
-	&dev_attr_ipOutNoRoutes.attr,
-	&dev_attr_ipReasmTimeout.attr,
-	&dev_attr_ipReasmReqds.attr,
-	&dev_attr_ipReasmOKs.attr,
-	&dev_attr_ipReasmFails.attr,
-	&dev_attr_ipFragOKs.attr,
-	&dev_attr_ipFragFails.attr,
-	&dev_attr_ipFragCreates.attr,
-	&dev_attr_ipInMcastPkts.attr,
-	&dev_attr_ipOutMcastPkts.attr,
-	&dev_attr_ipInBcastPkts.attr,
-	&dev_attr_ipOutBcastPkts.attr,
-	&dev_attr_tcpRtoAlgorithm.attr,
-	&dev_attr_tcpRtoMin.attr,
-	&dev_attr_tcpRtoMax.attr,
-	&dev_attr_tcpMaxConn.attr,
-	&dev_attr_tcpActiveOpens.attr,
-	&dev_attr_tcpPassiveOpens.attr,
-	&dev_attr_tcpAttemptFails.attr,
-	&dev_attr_tcpEstabResets.attr,
-	&dev_attr_tcpCurrEstab.attr,
-	&dev_attr_tcpInSegs.attr,
-	&dev_attr_tcpOutSegs.attr,
-	&dev_attr_tcpRetransSegs.attr,
-	&dev_attr_tcpInErrs.attr,
-	&dev_attr_tcpOutRsts.attr,
+	&class_device_attr_ipInReceives.attr,
+	&class_device_attr_ipInHdrErrors.attr,
+	&class_device_attr_ipInTooBigErrors.attr,
+	&class_device_attr_ipInNoRoutes.attr,
+	&class_device_attr_ipInAddrErrors.attr,
+	&class_device_attr_ipInUnknownProtos.attr,
+	&class_device_attr_ipInTruncatedPkts.attr,
+	&class_device_attr_ipInDiscards.attr,
+	&class_device_attr_ipInDelivers.attr,
+	&class_device_attr_ipOutForwDatagrams.attr,
+	&class_device_attr_ipOutRequests.attr,
+	&class_device_attr_ipOutDiscards.attr,
+	&class_device_attr_ipOutNoRoutes.attr,
+	&class_device_attr_ipReasmTimeout.attr,
+	&class_device_attr_ipReasmReqds.attr,
+	&class_device_attr_ipReasmOKs.attr,
+	&class_device_attr_ipReasmFails.attr,
+	&class_device_attr_ipFragOKs.attr,
+	&class_device_attr_ipFragFails.attr,
+	&class_device_attr_ipFragCreates.attr,
+	&class_device_attr_ipInMcastPkts.attr,
+	&class_device_attr_ipOutMcastPkts.attr,
+	&class_device_attr_ipInBcastPkts.attr,
+	&class_device_attr_ipOutBcastPkts.attr,
+	&class_device_attr_tcpRtoAlgorithm.attr,
+	&class_device_attr_tcpRtoMin.attr,
+	&class_device_attr_tcpRtoMax.attr,
+	&class_device_attr_tcpMaxConn.attr,
+	&class_device_attr_tcpActiveOpens.attr,
+	&class_device_attr_tcpPassiveOpens.attr,
+	&class_device_attr_tcpAttemptFails.attr,
+	&class_device_attr_tcpEstabResets.attr,
+	&class_device_attr_tcpCurrEstab.attr,
+	&class_device_attr_tcpInSegs.attr,
+	&class_device_attr_tcpOutSegs.attr,
+	&class_device_attr_tcpRetransSegs.attr,
+	&class_device_attr_tcpInErrs.attr,
+	&class_device_attr_tcpOutRsts.attr,
 	NULL
 };
 
@@ -779,23 +777,23 @@ static struct attribute_group iw_stats_g
 
 int ib_device_register_sysfs(struct ib_device *device)
 {
-	struct device *class_dev = &device->dev;
+	struct class_device *class_dev = &device->class_dev;
 	int ret;
 	int i;
 
 	class_dev->class      = &ib_class;
-	class_dev->driver_data = device;
-	class_dev->parent     = device->dma_device;
-	strlcpy(class_dev->bus_id, device->name, BUS_ID_SIZE);
+	class_dev->class_data = device;
+	class_dev->dev	      = device->dma_device;
+	strlcpy(class_dev->class_id, device->name, BUS_ID_SIZE);
 
 	INIT_LIST_HEAD(&device->port_list);
 
-	ret = device_register(class_dev);
+	ret = class_device_register(class_dev);
 	if (ret)
 		goto err;
 
 	for (i = 0; i < ARRAY_SIZE(ib_class_attributes); ++i) {
-		ret = device_create_file(class_dev, ib_class_attributes[i]);
+		ret = class_device_create_file(class_dev, ib_class_attributes[i]);
 		if (ret)
 			goto err_unregister;
 	}
@@ -845,7 +843,7 @@ err_put:
 	kobject_unregister(&class_dev->kobj);
 
 err_unregister:
-	device_unregister(class_dev);
+	class_device_unregister(class_dev);
 
 err:
 	return ret;
@@ -868,7 +866,7 @@ void ib_device_unregister_sysfs(struct i
 	kobject_put(device->ports_parent);
 	/* WA for memory leak */
 	kfree(device->ports_parent);
-	device_unregister(&device->dev);
+	class_device_unregister(&device->class_dev);
 }
 
 int ib_sysfs_setup(void)
Index: ofed_kernel/drivers/infiniband/core/ucm.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/ucm.c
+++ ofed_kernel/drivers/infiniband/core/ucm.c
@@ -56,8 +56,8 @@ MODULE_LICENSE("Dual BSD/GPL");
 
 struct ib_ucm_device {
 	int			devnum;
-	struct cdev		cdev;
-	struct device		dev;
+	struct cdev		dev;
+	struct class_device	class_dev;
 	struct ib_device	*ib_dev;
 };
 
@@ -1177,7 +1177,7 @@ static int ib_ucm_open(struct inode *ino
 
 	filp->private_data = file;
 	file->filp = filp;
-	file->device = container_of(inode->i_cdev, struct ib_ucm_device, cdev);
+	file->device = container_of(inode->i_cdev, struct ib_ucm_device, dev);
 
 	return 0;
 }
@@ -1208,14 +1208,14 @@ static int ib_ucm_close(struct inode *in
 	return 0;
 }
 
-static void ib_ucm_release_dev(struct device *dev)
+static void ucm_release_class_dev(struct class_device *class_dev)
 {
-	struct ib_ucm_device *ucm_dev;
+	struct ib_ucm_device *dev;
 
-	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
-	cdev_del(&ucm_dev->cdev);
-	clear_bit(ucm_dev->devnum, dev_map);
-	kfree(ucm_dev);
+	dev = container_of(class_dev, struct ib_ucm_device, class_dev);
+	cdev_del(&dev->dev);
+	clear_bit(dev->devnum, dev_map);
+	kfree(dev);
 }
 
 static const struct file_operations ucm_fops = {
@@ -1226,15 +1226,14 @@ static const struct file_operations ucm_
 	.poll    = ib_ucm_poll,
 };
 
-static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
-			  char *buf)
+static ssize_t show_ibdev(struct class_device *class_dev, char *buf)
 {
-	struct ib_ucm_device *ucm_dev;
+	struct ib_ucm_device *dev;
 
-	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
-	return sprintf(buf, "%s\n", ucm_dev->ib_dev->name);
+	dev = container_of(class_dev, struct ib_ucm_device, class_dev);
+	return sprintf(buf, "%s\n", dev->ib_dev->name);
 }
-static DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
+static CLASS_DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
 
 static void ib_ucm_add_one(struct ib_device *device)
 {
@@ -1256,31 +1255,32 @@ static void ib_ucm_add_one(struct ib_dev
 
 	set_bit(ucm_dev->devnum, dev_map);
 
-	cdev_init(&ucm_dev->cdev, &ucm_fops);
-	ucm_dev->cdev.owner = THIS_MODULE;
-	kobject_set_name(&ucm_dev->cdev.kobj, "ucm%d", ucm_dev->devnum);
-	if (cdev_add(&ucm_dev->cdev, IB_UCM_BASE_DEV + ucm_dev->devnum, 1))
+	cdev_init(&ucm_dev->dev, &ucm_fops);
+	ucm_dev->dev.owner = THIS_MODULE;
+	kobject_set_name(&ucm_dev->dev.kobj, "ucm%d", ucm_dev->devnum);
+	if (cdev_add(&ucm_dev->dev, IB_UCM_BASE_DEV + ucm_dev->devnum, 1))
 		goto err;
 
-	ucm_dev->dev.class = &cm_class;
-	ucm_dev->dev.parent = device->dma_device;
-	ucm_dev->dev.devt = ucm_dev->cdev.dev;
-	ucm_dev->dev.release = ib_ucm_release_dev;
-	snprintf(ucm_dev->dev.bus_id, BUS_ID_SIZE, "ucm%d",
+	ucm_dev->class_dev.class = &cm_class;
+	ucm_dev->class_dev.dev = device->dma_device;
+	ucm_dev->class_dev.devt = ucm_dev->dev.dev;
+	ucm_dev->class_dev.release = ucm_release_class_dev;
+	snprintf(ucm_dev->class_dev.class_id, BUS_ID_SIZE, "ucm%d",
 		 ucm_dev->devnum);
-	if (device_register(&ucm_dev->dev))
+	if (class_device_register(&ucm_dev->class_dev))
 		goto err_cdev;
 
-	if (device_create_file(&ucm_dev->dev, &dev_attr_ibdev))
-		goto err_dev;
+	if (class_device_create_file(&ucm_dev->class_dev,
+				     &class_device_attr_ibdev))
+		goto err_class;
 
 	ib_set_client_data(device, &ucm_client, ucm_dev);
 	return;
 
-err_dev:
-	device_unregister(&ucm_dev->dev);
+err_class:
+	class_device_unregister(&ucm_dev->class_dev);
 err_cdev:
-	cdev_del(&ucm_dev->cdev);
+	cdev_del(&ucm_dev->dev);
 	clear_bit(ucm_dev->devnum, dev_map);
 err:
 	kfree(ucm_dev);
@@ -1294,7 +1294,7 @@ static void ib_ucm_remove_one(struct ib_
 	if (!ucm_dev)
 		return;
 
-	device_unregister(&ucm_dev->dev);
+	class_device_unregister(&ucm_dev->class_dev);
 }
 
 static ssize_t show_abi_version(struct class *class, char *buf)
Index: ofed_kernel/drivers/infiniband/core/user_mad.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/user_mad.c
+++ ofed_kernel/drivers/infiniband/core/user_mad.c
@@ -86,11 +86,11 @@ enum {
  */
 
 struct ib_umad_port {
-	struct cdev           *cdev;
-	struct device	      *dev;
+	struct cdev           *dev;
+	struct class_device   *class_dev;
 
-	struct cdev           *sm_cdev;
-	struct device	      *sm_dev;
+	struct cdev           *sm_dev;
+	struct class_device   *sm_class_dev;
 	struct semaphore       sm_sem;
 
 	struct mutex	       file_mutex;
@@ -959,29 +959,27 @@ static struct ib_client umad_client = {
 	.remove = ib_umad_remove_one
 };
 
-static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
-			  char *buf)
+static ssize_t show_ibdev(struct class_device *class_dev, char *buf)
 {
-	struct ib_umad_port *port = dev_get_drvdata(dev);
+	struct ib_umad_port *port = class_get_devdata(class_dev);
 
 	if (!port)
 		return -ENODEV;
 
 	return sprintf(buf, "%s\n", port->ib_dev->name);
 }
-static DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
+static CLASS_DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
 
-static ssize_t show_port(struct device *dev, struct device_attribute *attr,
-			 char *buf)
+static ssize_t show_port(struct class_device *class_dev, char *buf)
 {
-	struct ib_umad_port *port = dev_get_drvdata(dev);
+	struct ib_umad_port *port = class_get_devdata(class_dev);
 
 	if (!port)
 		return -ENODEV;
 
 	return sprintf(buf, "%d\n", port->port_num);
 }
-static DEVICE_ATTR(port, S_IRUGO, show_port, NULL);
+static CLASS_DEVICE_ATTR(port, S_IRUGO, show_port, NULL);
 
 static ssize_t show_abi_version(struct class *class, char *buf)
 {
@@ -1007,47 +1005,48 @@ static int ib_umad_init_port(struct ib_d
 	mutex_init(&port->file_mutex);
 	INIT_LIST_HEAD(&port->file_list);
 
-	port->cdev = cdev_alloc();
-	if (!port->cdev)
+	port->dev = cdev_alloc();
+	if (!port->dev)
 		return -1;
-	port->cdev->owner = THIS_MODULE;
-	port->cdev->ops   = &umad_fops;
-	kobject_set_name(&port->cdev->kobj, "umad%d", port->dev_num);
-	if (cdev_add(port->cdev, base_dev + port->dev_num, 1))
+	port->dev->owner = THIS_MODULE;
+	port->dev->ops   = &umad_fops;
+	kobject_set_name(&port->dev->kobj, "umad%d", port->dev_num);
+	if (cdev_add(port->dev, base_dev + port->dev_num, 1))
 		goto err_cdev;
 
-	port->dev = device_create(umad_class, device->dma_device,
-				  port->cdev->dev, "umad%d", port->dev_num);
-	if (IS_ERR(port->dev))
+	port->class_dev = class_device_create(umad_class, NULL, port->dev->dev,
+					      device->dma_device,
+					      "umad%d", port->dev_num);
+	if (IS_ERR(port->class_dev))
 		goto err_cdev;
 
-	if (device_create_file(port->dev, &dev_attr_ibdev))
-		goto err_dev;
-	if (device_create_file(port->dev, &dev_attr_port))
-		goto err_dev;
-
-	port->sm_cdev = cdev_alloc();
-	if (!port->sm_cdev)
-		goto err_dev;
-	port->sm_cdev->owner = THIS_MODULE;
-	port->sm_cdev->ops   = &umad_sm_fops;
-	kobject_set_name(&port->sm_cdev->kobj, "issm%d", port->dev_num);
-	if (cdev_add(port->sm_cdev, base_dev + port->dev_num + IB_UMAD_MAX_PORTS, 1))
+	if (class_device_create_file(port->class_dev, &class_device_attr_ibdev))
+		goto err_class;
+	if (class_device_create_file(port->class_dev, &class_device_attr_port))
+		goto err_class;
+
+	port->sm_dev = cdev_alloc();
+	if (!port->sm_dev)
+		goto err_class;
+	port->sm_dev->owner = THIS_MODULE;
+	port->sm_dev->ops   = &umad_sm_fops;
+	kobject_set_name(&port->sm_dev->kobj, "issm%d", port->dev_num);
+	if (cdev_add(port->sm_dev, base_dev + port->dev_num + IB_UMAD_MAX_PORTS, 1))
 		goto err_sm_cdev;
 
-	port->sm_dev = device_create(umad_class, device->dma_device,
-				     port->sm_cdev->dev,
-				     "issm%d", port->dev_num);
-	if (IS_ERR(port->sm_dev))
+	port->sm_class_dev = class_device_create(umad_class, NULL, port->sm_dev->dev,
+						 device->dma_device,
+						 "issm%d", port->dev_num);
+	if (IS_ERR(port->sm_class_dev))
 		goto err_sm_cdev;
 
-	dev_set_drvdata(port->dev,    port);
-	dev_set_drvdata(port->sm_dev, port);
+	class_set_devdata(port->class_dev,    port);
+	class_set_devdata(port->sm_class_dev, port);
 
-	if (device_create_file(port->sm_dev, &dev_attr_ibdev))
-		goto err_sm_dev;
-	if (device_create_file(port->sm_dev, &dev_attr_port))
-		goto err_sm_dev;
+	if (class_device_create_file(port->sm_class_dev, &class_device_attr_ibdev))
+		goto err_sm_class;
+	if (class_device_create_file(port->sm_class_dev, &class_device_attr_port))
+		goto err_sm_class;
 
 	spin_lock(&port_lock);
 	umad_port[port->dev_num] = port;
@@ -1055,17 +1054,17 @@ static int ib_umad_init_port(struct ib_d
 
 	return 0;
 
-err_sm_dev:
-	device_destroy(umad_class, port->sm_cdev->dev);
+err_sm_class:
+	class_device_destroy(umad_class, port->sm_dev->dev);
 
 err_sm_cdev:
-	cdev_del(port->sm_cdev);
+	cdev_del(port->sm_dev);
 
-err_dev:
-	device_destroy(umad_class, port->cdev->dev);
+err_class:
+	class_device_destroy(umad_class, port->dev->dev);
 
 err_cdev:
-	cdev_del(port->cdev);
+	cdev_del(port->dev);
 	clear_bit(port->dev_num, dev_map);
 
 	return -1;
@@ -1077,14 +1076,14 @@ static void ib_umad_kill_port(struct ib_
 	int already_dead;
 	int id;
 
-	dev_set_drvdata(port->dev,    NULL);
-	dev_set_drvdata(port->sm_dev, NULL);
+	class_set_devdata(port->class_dev,    NULL);
+	class_set_devdata(port->sm_class_dev, NULL);
 
-	device_destroy(umad_class, port->cdev->dev);
-	device_destroy(umad_class, port->sm_cdev->dev);
+	class_device_destroy(umad_class, port->dev->dev);
+	class_device_destroy(umad_class, port->sm_dev->dev);
 
-	cdev_del(port->cdev);
-	cdev_del(port->sm_cdev);
+	cdev_del(port->dev);
+	cdev_del(port->sm_dev);
 
 	spin_lock(&port_lock);
 	umad_port[port->dev_num] = NULL;
Index: ofed_kernel/drivers/infiniband/core/uverbs.h
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/uverbs.h
+++ ofed_kernel/drivers/infiniband/core/uverbs.h
@@ -71,8 +71,8 @@ struct ib_uverbs_device {
 	struct kref				ref;
 	struct completion			comp;
 	int					devnum;
-	struct cdev			       *cdev;
-	struct device			       *dev;
+	struct cdev			       *dev;
+	struct class_device		       *class_dev;
 	struct ib_device		       *ib_dev;
 	int					num_comp_vectors;
 };
Index: ofed_kernel/drivers/infiniband/core/uverbs_main.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/core/uverbs_main.c
+++ ofed_kernel/drivers/infiniband/core/uverbs_main.c
@@ -737,29 +737,27 @@ static struct ib_client uverbs_client = 
 	.remove = ib_uverbs_remove_one
 };
 
-static ssize_t show_ibdev(struct device *device, struct device_attribute *attr,
-			  char *buf)
+static ssize_t show_ibdev(struct class_device *class_dev, char *buf)
 {
-	struct ib_uverbs_device *dev = dev_get_drvdata(device);
+	struct ib_uverbs_device *dev = class_get_devdata(class_dev);
 
 	if (!dev)
 		return -ENODEV;
 
 	return sprintf(buf, "%s\n", dev->ib_dev->name);
 }
-static DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
+static CLASS_DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);
 
-static ssize_t show_dev_abi_version(struct device *device,
-				    struct device_attribute *attr, char *buf)
+static ssize_t show_dev_abi_version(struct class_device *class_dev, char *buf)
 {
-	struct ib_uverbs_device *dev = dev_get_drvdata(device);
+	struct ib_uverbs_device *dev = class_get_devdata(class_dev);
 
 	if (!dev)
 		return -ENODEV;
 
 	return sprintf(buf, "%d\n", dev->ib_dev->uverbs_abi_ver);
 }
-static DEVICE_ATTR(abi_version, S_IRUGO, show_dev_abi_version, NULL);
+static CLASS_DEVICE_ATTR(abi_version, S_IRUGO, show_dev_abi_version, NULL);
 
 static ssize_t show_abi_version(struct class *class, char *buf)
 {
@@ -793,26 +791,27 @@ static void ib_uverbs_add_one(struct ib_
 	uverbs_dev->ib_dev           = device;
 	uverbs_dev->num_comp_vectors = device->num_comp_vectors;
 
-	uverbs_dev->cdev = cdev_alloc();
-	if (!uverbs_dev->cdev)
+	uverbs_dev->dev = cdev_alloc();
+	if (!uverbs_dev->dev)
 		goto err;
-	uverbs_dev->cdev->owner = THIS_MODULE;
-	uverbs_dev->cdev->ops = device->mmap ? &uverbs_mmap_fops : &uverbs_fops;
-	kobject_set_name(&uverbs_dev->cdev->kobj, "uverbs%d", uverbs_dev->devnum);
-	if (cdev_add(uverbs_dev->cdev, IB_UVERBS_BASE_DEV + uverbs_dev->devnum, 1))
+	uverbs_dev->dev->owner = THIS_MODULE;
+	uverbs_dev->dev->ops = device->mmap ? &uverbs_mmap_fops : &uverbs_fops;
+	kobject_set_name(&uverbs_dev->dev->kobj, "uverbs%d", uverbs_dev->devnum);
+	if (cdev_add(uverbs_dev->dev, IB_UVERBS_BASE_DEV + uverbs_dev->devnum, 1))
 		goto err_cdev;
 
-	uverbs_dev->dev = device_create(uverbs_class, device->dma_device,
-					uverbs_dev->cdev->dev,
-					"uverbs%d", uverbs_dev->devnum);
-	if (IS_ERR(uverbs_dev->dev))
+	uverbs_dev->class_dev = class_device_create(uverbs_class, NULL,
+						    uverbs_dev->dev->dev,
+						    device->dma_device,
+						    "uverbs%d", uverbs_dev->devnum);
+	if (IS_ERR(uverbs_dev->class_dev))
 		goto err_cdev;
 
-	dev_set_drvdata(uverbs_dev->dev, uverbs_dev);
+	class_set_devdata(uverbs_dev->class_dev, uverbs_dev);
 
-	if (device_create_file(uverbs_dev->dev, &dev_attr_ibdev))
+	if (class_device_create_file(uverbs_dev->class_dev, &class_device_attr_ibdev))
 		goto err_class;
-	if (device_create_file(uverbs_dev->dev, &dev_attr_abi_version))
+	if (class_device_create_file(uverbs_dev->class_dev, &class_device_attr_abi_version))
 		goto err_class;
 
 	spin_lock(&map_lock);
@@ -824,10 +823,10 @@ static void ib_uverbs_add_one(struct ib_
 	return;
 
 err_class:
-	device_destroy(uverbs_class, uverbs_dev->cdev->dev);
+	class_device_destroy(uverbs_class, uverbs_dev->dev->dev);
 
 err_cdev:
-	cdev_del(uverbs_dev->cdev);
+	cdev_del(uverbs_dev->dev);
 	clear_bit(uverbs_dev->devnum, dev_map);
 
 err:
@@ -844,9 +843,9 @@ static void ib_uverbs_remove_one(struct 
 	if (!uverbs_dev)
 		return;
 
-	dev_set_drvdata(uverbs_dev->dev, NULL);
-	device_destroy(uverbs_class, uverbs_dev->cdev->dev);
-	cdev_del(uverbs_dev->cdev);
+	class_set_devdata(uverbs_dev->class_dev, NULL);
+	class_device_destroy(uverbs_class, uverbs_dev->dev->dev);
+	cdev_del(uverbs_dev->dev);
 
 	spin_lock(&map_lock);
 	dev_table[uverbs_dev->devnum] = NULL;
Index: ofed_kernel/include/rdma/ib_verbs.h
===================================================================
--- ofed_kernel.orig/include/rdma/ib_verbs.h
+++ ofed_kernel/include/rdma/ib_verbs.h
@@ -1196,7 +1196,7 @@ struct ib_device {
 	struct ib_dma_mapping_ops   *dma_ops;
 
 	struct module               *owner;
-	struct device                dev;
+	struct class_device          class_dev;
 	struct kobject               *ports_parent;
 	struct list_head             port_list;
 
