From 3c40d790e0a29471bbdc5b1beba34fa6a9a83b59 Mon Sep 17 00:00:00 2001
From: Eli Cohen <eli@mellanox.co.il>
Date: Sun, 22 Aug 2010 15:27:07 +0300
Subject: [PATCH] iboe: adapt implementation to match kernel

Signed-off-by: Eli Cohen <eli@mellanox.co.il>
---
 drivers/infiniband/hw/mlx4/ah.c           |   38 +++---------
 drivers/infiniband/hw/mlx4/mad.c          |    4 +-
 drivers/infiniband/hw/mlx4/main.c         |   87 +++++++----------------------
 drivers/infiniband/hw/mlx4/mlx4_ib.h      |    5 +-
 drivers/infiniband/hw/mlx4/qp.c           |   11 ++--
 24 files changed, 122 insertions(+), 268 deletions(-)

Index: ofed_kernel-fixes/drivers/infiniband/hw/mlx4/ah.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/hw/mlx4/ah.c	2010-10-21 10:46:56.000000000 +0200
+++ ofed_kernel-fixes/drivers/infiniband/hw/mlx4/ah.c	2010-10-24 12:32:04.749795177 +0200
@@ -100,14 +100,19 @@ static struct ib_ah *create_rocee_ah(str
 	int err;
 	int is_mcast;
 	u16 vlan_tag;
+	union ib_gid sgid;
 
 	err = mlx4_ib_resolve_grh(ibdev, ah_attr, mac, &is_mcast, ah_attr->port_num);
 	if (err)
 		return ERR_PTR(err);
 
 	memcpy(ah->av.eth.mac, mac, 6);
-	vlan_tag = rdma_get_vlan_id(&ah_attr->grh.dgid);
-	vlan_tag |= (ah_attr->sl & 7) << 13;
+	err = ib_get_cached_gid(pd->device, ah_attr->port_num, ah_attr->grh.sgid_index, &sgid);
+	if (err)
+		return ERR_PTR(err);
+	vlan_tag = rdma_get_vlan_id(&sgid);
+	if (vlan_tag < 0x1000)
+		vlan_tag |= (ah_attr->sl & 7) << 13;
 	ah->av.eth.port_pd = cpu_to_be32(to_mpd(pd)->pdn | (ah_attr->port_num << 24));
 	ah->av.eth.gid_index = ah_attr->grh.sgid_index;
 	ah->av.eth.vlan = cpu_to_be16(vlan_tag);
@@ -139,7 +144,7 @@ struct ib_ah *mlx4_ib_create_ah(struct i
 	if (!ah)
 		return ERR_PTR(-ENOMEM);
 
-	if (rdma_port_link_layer(pd->device, ah_attr->port_num) == IB_LINK_LAYER_ETHERNET) {
+	if (rdma_port_get_link_layer(pd->device, ah_attr->port_num) == IB_LINK_LAYER_ETHERNET) {
 		if (!(ah_attr->ah_flags & IB_AH_GRH)) {
 			ret = ERR_PTR(-EINVAL);
 			goto out;
@@ -171,7 +176,7 @@ int mlx4_ib_query_ah(struct ib_ah *ibah,
 	memset(ah_attr, 0, sizeof *ah_attr);
 	ah_attr->sl = be32_to_cpu(ah->av.ib.sl_tclass_flowlabel) >> 28;
 	ah_attr->port_num = be32_to_cpu(ah->av.ib.port_pd) >> 24;
-	ll = rdma_port_link_layer(ibah->device, ah_attr->port_num);
+	ll = rdma_port_get_link_layer(ibah->device, ah_attr->port_num);
 	ah_attr->dlid = ll == IB_LINK_LAYER_INFINIBAND ? be16_to_cpu(ah->av.ib.dlid) : 0;
 	if (ah->av.ib.stat_rate)
 		ah_attr->static_rate = ah->av.ib.stat_rate - MLX4_STAT_RATE_OFFSET;
@@ -198,26 +203,3 @@ int mlx4_ib_destroy_ah(struct ib_ah *ah)
 	return 0;
 }
 
-int mlx4_ib_get_eth_l2_addr(struct ib_device *device, u8 port, union ib_gid *dgid,
-			    int sgid_idx, u8 *mac, u16 *vlan_id)
-{
-	int err;
-	struct mlx4_ib_dev *ibdev = to_mdev(device);
-	struct ib_ah_attr ah_attr = {
-		.port_num = port,
-	};
-	int is_mcast;
-	union ib_gid sgid;
-
-	memcpy(ah_attr.grh.dgid.raw, dgid, 16);
-	err = mlx4_ib_resolve_grh(ibdev, &ah_attr, mac, &is_mcast, port);
-	if (err)
-		ERR_PTR(err);
-
-	err = ib_get_cached_gid(device, port, sgid_idx, &sgid);
-	if (err)
-		return err;
-	*vlan_id = rdma_get_vlan_id(&sgid);
-	return 0;
-}
-
Index: ofed_kernel-fixes/drivers/infiniband/hw/mlx4/mad.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/hw/mlx4/mad.c	2010-10-21 10:46:55.000000000 +0200
+++ ofed_kernel-fixes/drivers/infiniband/hw/mlx4/mad.c	2010-10-24 12:32:11.625795496 +0200
@@ -368,7 +368,7 @@ int mlx4_ib_process_mad(struct ib_device
 			struct ib_wc *in_wc, struct ib_grh *in_grh,
 			struct ib_mad *in_mad, struct ib_mad *out_mad)
 {
-	switch (rdma_port_link_layer(ibdev, port_num)) {
+	switch (rdma_port_get_link_layer(ibdev, port_num)) {
 	case IB_LINK_LAYER_INFINIBAND:
 		return ib_process_mad(ibdev, mad_flags, port_num, in_wc,
 				      in_grh, in_mad, out_mad);
@@ -394,7 +394,7 @@ int mlx4_ib_mad_init(struct mlx4_ib_dev 
 	enum rdma_link_layer ll;
 
 	for (p = 0; p < dev->num_ports; ++p) {
-		ll = rdma_port_link_layer(&dev->ib_dev, p + 1);
+		ll = rdma_port_get_link_layer(&dev->ib_dev, p + 1);
 		for (q = 0; q <= 1; ++q) {
 			if (ll == IB_LINK_LAYER_INFINIBAND) {
 				agent = ib_register_mad_agent(&dev->ib_dev, p + 1,
Index: ofed_kernel-fixes/drivers/infiniband/hw/mlx4/main.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/hw/mlx4/main.c	2010-10-21 10:46:57.000000000 +0200
+++ ofed_kernel-fixes/drivers/infiniband/hw/mlx4/main.c	2010-10-24 12:32:26.045791988 +0200
@@ -263,35 +263,11 @@ static int eth_link_query_port(struct ib
 {
 	struct mlx4_ib_rocee *rocee = &to_mdev(ibdev)->rocee;
 	struct net_device *ndev;
-	struct mlx4_cmd_mailbox *mailbox;
-	struct mlx4_dev *dev = to_mdev(ibdev)->dev;
-	int err;
-	u32 *outbox;
-	u32 fl;
+	int err = 0;
 	enum ib_mtu tmp;
 
-	mailbox = mlx4_alloc_cmd_mailbox(dev);
-	if (IS_ERR(mailbox))
-		return PTR_ERR(mailbox);
-
-	err = mlx4_cmd_box(dev, 0, mailbox->dma, port, 0, MLX4_CMD_QUERY_PORT,
-			   MLX4_CMD_TIME_CLASS_B);
-	if (err)
-		goto out;
-	outbox = mailbox->buf;
-
-	fl = be32_to_cpu(outbox[0x40 / 4]);
-	if (fl & 1 << 31)
-		props->active_width = eth_to_ib_width(fl & 0xffff);
-	else
-		props->active_width = IB_WIDTH_1X;
-
-	fl = be32_to_cpu(outbox[0x44 / 4]);
-	if (fl & 1 << 31)
-		props->active_speed = eth_to_ib_speed(fl & 0xffff);
-	else
-		props->active_speed = 1;
-
+	props->active_width	= IB_WIDTH_4X;
+	props->active_speed	= 1;
 	props->port_cap_flags	= IB_PORT_CM_SUP;
 	props->gid_tbl_len	= to_mdev(ibdev)->dev->caps.gid_table_len[port];
 	props->max_msg_sz	= to_mdev(ibdev)->dev->caps.max_msg_sz;
@@ -308,19 +284,19 @@ static int eth_link_query_port(struct ib
 	props->active_mtu	= IB_MTU_256;
 	spin_lock(&rocee->lock);
 	ndev = rocee->netdevs[port - 1];
-	if (!ndev)
-		goto out_ul;
+	if (!ndev) {
+		err = -ENOMEM;
+		goto out;
+	}
 
 	tmp = rocee_get_mtu(ndev->mtu);
-	props->active_mtu = tmp ? min(props->max_mtu, tmp) : 0;
+	props->active_mtu = tmp ? min(props->max_mtu, tmp) : IB_MTU_256;
 	props->state		= netif_running(ndev) &&  netif_oper_up(ndev) ?
 					IB_PORT_ACTIVE : IB_PORT_DOWN;
 	props->phys_state	= state_to_phys_state(props->state);
 
-out_ul:
-	spin_unlock(&rocee->lock);
 out:
-	mlx4_free_cmd_mailbox(dev, mailbox);
+	spin_unlock(&rocee->lock);
 	return err;
 }
 
@@ -408,7 +384,7 @@ static int rocee_query_gid(struct ib_dev
 static int mlx4_ib_query_gid(struct ib_device *ibdev, u8 port, int index,
 			     union ib_gid *gid)
 {
-	if (rdma_port_link_layer(ibdev, port) == IB_LINK_LAYER_INFINIBAND)
+	if (rdma_port_get_link_layer(ibdev, port) == IB_LINK_LAYER_INFINIBAND)
 		return __mlx4_ib_query_gid(ibdev, port, index, gid);
 	else
 		return rocee_query_gid(ibdev, port, index, gid);
@@ -1040,11 +1016,11 @@ static struct attribute_group diag_count
 	.attrs  = diag_rprt_attrs
 };
 
-static void mlx4_addrconf_ifid_eui48(u8 *eui, int is_vlan, u16 vlan_id, struct net_device *dev)
+static void mlx4_addrconf_ifid_eui48(u8 *eui, u16 vlan_id, struct net_device *dev)
 {
 	memcpy(eui, dev->dev_addr, 3);
 	memcpy(eui + 5, dev->dev_addr + 3, 3);
-	if (is_vlan) {
+	if (vlan_id < 0x1000) {
 		eui[3] = vlan_id >> 8;
 		eui[4] = vlan_id & 0xff;
 	} else {
@@ -1100,7 +1076,6 @@ static int update_ipv6_gids(struct mlx4_
 	int free;
 	int found;
 	int need_update = 0;
-	int is_vlan;
 	u16 vid;
 
 	work = kzalloc(sizeof *work, GFP_ATOMIC);
@@ -1115,21 +1090,10 @@ static int update_ipv6_gids(struct mlx4_
 
 	read_lock(&dev_base_lock);
 	for_each_netdev(&init_net, tmp) {
-		if (ndev && (tmp == ndev
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-			 || vlan_dev_real_dev(tmp) == ndev)) {
-#else
-						)) {
-#endif
+		if (ndev && (tmp == ndev || rdma_vlan_dev_real_dev(tmp) == ndev)) {
 			gid.global.subnet_prefix = cpu_to_be64(0xfe80000000000000LL);
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-			vid = vlan_dev_vlan_id(tmp);
-			is_vlan = tmp->priv_flags & IFF_802_1Q_VLAN;
-#else
-			vid = 0;
-			is_vlan = 0;
-#endif
-			mlx4_addrconf_ifid_eui48(&gid.raw[8], is_vlan, vid, ndev);
+			vid = rdma_vlan_dev_vlan_id(tmp);
+			mlx4_addrconf_ifid_eui48(&gid.raw[8], vid, ndev);
 			found = 0;
 			free = -1;
 			for (i = 0; i < 128; ++i) {
@@ -1234,19 +1198,11 @@ static int mlx4_ib_netdev_event(struct n
 		}
 	}
 
-	if (dev == iboe->netdevs[0]
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-			|| (iboe->netdevs[0] && vlan_dev_real_dev(dev) == iboe->netdevs[0]))
-#else
-			)
-#endif
+	if (dev == iboe->netdevs[0] ||
+	    (iboe->netdevs[0] && rdma_vlan_dev_real_dev(dev) == iboe->netdevs[0]))
 		handle_en_event(ibdev, 1, event);
 	else if (dev == iboe->netdevs[1]
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-			|| (iboe->netdevs[1] && vlan_dev_real_dev(dev) == iboe->netdevs[1]))
-#else
-			)
-#endif
+		 || (iboe->netdevs[1] && rdma_vlan_dev_real_dev(dev) == iboe->netdevs[1]))
 		handle_en_event(ibdev, 2, event);
 
 	spin_unlock(&rocee->lock);
@@ -1328,8 +1284,7 @@ static void *mlx4_ib_add(struct mlx4_dev
 		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)		|
 		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)		|
 		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)		|
-		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)		|
-		(1ull << IB_USER_VERBS_CMD_GET_ETH_L2_ADDR);
+		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ);
 
 	ibdev->ib_dev.query_device	= mlx4_ib_query_device;
 	ibdev->ib_dev.query_port	= mlx4_ib_query_port;
@@ -1397,7 +1352,6 @@ static void *mlx4_ib_add(struct mlx4_dev
 			(1ull << IB_USER_VERBS_CMD_UNREG_XRC_RCV_QP);
 	}
 
-	ibdev->ib_dev.get_eth_l2_addr		= mlx4_ib_get_eth_l2_addr;
 
 	spin_lock_init(&rocee->lock);
 	if (init_node_data(ibdev))
Index: ofed_kernel-fixes/drivers/infiniband/hw/mlx4/mlx4_ib.h
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/hw/mlx4/mlx4_ib.h	2010-10-21 10:46:58.000000000 +0200
+++ ofed_kernel-fixes/drivers/infiniband/hw/mlx4/mlx4_ib.h	2010-10-24 12:32:04.797796530 +0200
@@ -393,14 +393,11 @@ int mlx4_ib_unreg_xrc_rcv_qp(struct ib_x
 int mlx4_ib_resolve_grh(struct mlx4_ib_dev *dev, const struct ib_ah_attr *ah_attr,
 			u8 *mac, int *is_mcast, u8 port);
 
-int mlx4_ib_get_eth_l2_addr(struct ib_device *device, u8 port, union ib_gid *dgid,
-			    int sgid_idx, u8 *mac, u16 *vlan_id);
-
 static inline int mlx4_ib_ah_grh_present(struct mlx4_ib_ah *ah)
 {
 	u8 port = be32_to_cpu(ah->av.ib.port_pd) >> 24 & 3;
 
-	if (rdma_port_link_layer(ah->ibah.device, port) == IB_LINK_LAYER_ETHERNET)
+	if (rdma_port_get_link_layer(ah->ibah.device, port) == IB_LINK_LAYER_ETHERNET)
 		return 1;
 
 	return !!(ah->av.ib.g_slid & 0x80);
Index: ofed_kernel-fixes/drivers/infiniband/hw/mlx4/qp.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/hw/mlx4/qp.c	2010-10-21 10:46:58.000000000 +0200
+++ ofed_kernel-fixes/drivers/infiniband/hw/mlx4/qp.c	2010-10-24 12:32:04.761794785 +0200
@@ -960,8 +960,8 @@ static int mlx4_set_path(struct mlx4_ib_
 			 struct mlx4_qp_path *path, u8 port)
 {
 	int err;
-	int is_eth = rdma_port_link_layer(&dev->ib_dev, port) ==
-		IB_LINK_LAYER_ETHERNET ? 1 : 0;
+	int is_eth = rdma_port_get_link_layer(&dev->ib_dev, port) ==
+		IB_LINK_LAYER_ETHERNET;
 	u8 mac[6];
 	int is_mcast;
 	u16 vlan_tag;
@@ -1010,7 +1010,7 @@ static int mlx4_set_path(struct mlx4_ib_
 		path->grh_mylmc &= 0x80;
 
 		vlan_tag = rdma_get_vlan_id(&dev->iboe.gid_table[port - 1][ah->grh.sgid_index]);
-		if (vlan_tag) {
+		if (vlan_tag < 0x1000) {
 			if (mlx4_find_cached_vlan(dev->dev, port, vlan_tag, &vidx))
 				return -ENOENT;
 
@@ -1472,22 +1472,21 @@ static int build_mlx_header(struct mlx4_
 	int is_grh;
 	int is_vlan = 0;
 	int err;
-	__be16 vlan = 0;
+	u16 vlan;
 
 	send_size = 0;
 	for (i = 0; i < wr->num_sge; ++i)
 		send_size += wr->sg_list[i].length;
 
-	is_eth = rdma_port_link_layer(sqp->qp.ibqp.device, sqp->qp.port) == IB_LINK_LAYER_ETHERNET;
+	is_eth = rdma_port_get_link_layer(sqp->qp.ibqp.device, sqp->qp.port) == IB_LINK_LAYER_ETHERNET;
 	is_grh = mlx4_ib_ah_grh_present(ah);
 	err = ib_get_cached_gid(ib_dev, be32_to_cpu(ah->av.ib.port_pd) >> 24,
 				ah->av.ib.gid_index, &sgid);
 	if (err)
 		return err;
-
 	if (is_eth) {
-		vlan = cpu_to_be16(rdma_get_vlan_id(&sgid));
-		is_vlan = !!vlan;
+		is_vlan = rdma_get_vlan_id(&sgid) < 0x1000;
+		vlan = rdma_get_vlan_id(&sgid);
 	}
 
 	ib_ud_header_init(send_size, !is_eth, is_eth, is_vlan, is_grh, 0, &sqp->ud_header);
@@ -1548,8 +1547,8 @@ static int build_mlx_header(struct mlx4_
 			u16 pcp;
 
 			sqp->ud_header.vlan.type = cpu_to_be16(MLX4_IBOE_ETHERTYPE);
-			pcp = be32_to_cpu(ah->av.ib.sl_tclass_flowlabel) >> 23 & 0xe0;
-			sqp->ud_header.vlan.tag = vlan | pcp;
+			pcp = (be32_to_cpu(ah->av.ib.sl_tclass_flowlabel) >> 27 & 3) << 13;
+			sqp->ud_header.vlan.tag = cpu_to_be16(vlan | pcp);
 		}
 	} else {
 		sqp->ud_header.lrh.virtual_lane    = !sqp->qp.ibqp.qp_num ? 15 : 0;
@@ -2190,8 +2189,8 @@ static void to_ib_ah_attr(struct mlx4_ib
 	if (ib_ah_attr->port_num == 0 || ib_ah_attr->port_num > dev->caps.num_ports)
 		return;
 
-	is_eth = rdma_port_link_layer(&ib_dev->ib_dev, ib_ah_attr->port_num) ==
-		IB_LINK_LAYER_ETHERNET ? 1 : 0;
+	is_eth = rdma_port_get_link_layer(&ib_dev->ib_dev, ib_ah_attr->port_num) ==
+		IB_LINK_LAYER_ETHERNET;
 	if (is_eth)
 		ib_ah_attr->sl = ((path->sched_queue >> 3) & 0x7) |
 		((path->sched_queue & 4) << 1);
