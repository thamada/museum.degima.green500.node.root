diff --git a/drivers/infiniband/core/cma.c b/drivers/infiniband/core/cma.c
index 53bc1f5..70d43bc 100644
--- a/drivers/infiniband/core/cma.c
+++ b/drivers/infiniband/core/cma.c
@@ -67,7 +67,7 @@ MODULE_PARM_DESC(unify_tcp_port_space, "Unify the host TCP and RDMA port "
 #define CMA_CM_RESPONSE_TIMEOUT 20
 #define CMA_MAX_CM_RETRIES 15
 #define CMA_CM_MRA_SETTING (IB_CM_MRA_FLAG_DELAY | 24)
-#define ROCEE_PACKET_LIFETIME 18
+#define IBOE_PACKET_LIFETIME 18
 
 static int cma_response_timeout = CMA_CM_RESPONSE_TIMEOUT;
 module_param_named(cma_response_timeout, cma_response_timeout, int, 0644);
@@ -189,7 +189,7 @@ struct cma_ndev_work {
 	struct rdma_cm_event	event;
 };
 
-struct rocee_mcast_work {
+struct iboe_mcast_work {
 	struct work_struct	 work;
 	struct rdma_id_private	*id;
 	struct cma_multicast	*mc;
@@ -363,7 +363,7 @@ static int cma_acquire_dev(struct rdma_id_private *id_priv)
 	int ret = -ENODEV;
 
 	if (dev_addr->dev_type != ARPHRD_INFINIBAND) {
-		rocee_addr_get_sgid(dev_addr, &gid);
+		iboe_addr_get_sgid(dev_addr, &gid);
 		list_for_each_entry(cma_dev, &dev_list, list) {
 			ret = ib_find_cached_gid(cma_dev->device, &gid,
 						 &id_priv->id.port_num, NULL);
@@ -1775,7 +1775,7 @@ static int cma_resolve_iw_route(struct rdma_id_private *id_priv, int timeout_ms)
 	return 0;
 }
 
-static int cma_resolve_rocee_route(struct rdma_id_private *id_priv)
+static int cma_resolve_iboe_route(struct rdma_id_private *id_priv)
 {
 	struct rdma_route *route = &id_priv->id.route;
 	struct rdma_addr *addr = &route->addr;
@@ -1803,8 +1803,8 @@ static int cma_resolve_rocee_route(struct rdma_id_private *id_priv)
 
 	route->num_paths = 1;
 
-	rocee_mac_to_ll(&route->path_rec->sgid, addr->dev_addr.src_dev_addr);
-	rocee_mac_to_ll(&route->path_rec->dgid, addr->dev_addr.dst_dev_addr);
+	iboe_mac_to_ll(&route->path_rec->sgid, addr->dev_addr.src_dev_addr);
+	iboe_mac_to_ll(&route->path_rec->dgid, addr->dev_addr.dst_dev_addr);
 
 	route->path_rec->hop_limit = 1;
 	route->path_rec->reversible = 1;
@@ -1818,12 +1818,12 @@ static int cma_resolve_rocee_route(struct rdma_id_private *id_priv)
 		goto err2;
 	}
 
-	route->path_rec->mtu = rocee_get_mtu(ndev->mtu);
+	route->path_rec->mtu = iboe_get_mtu(ndev->mtu);
 	route->path_rec->rate_selector = 2;
-	route->path_rec->rate = rocee_get_rate(ndev);
+	route->path_rec->rate = iboe_get_rate(ndev);
 	dev_put(ndev);
 	route->path_rec->packet_life_time_selector = 2;
-	route->path_rec->packet_life_time = ROCEE_PACKET_LIFETIME;
+	route->path_rec->packet_life_time = IBOE_PACKET_LIFETIME;
 	if (!route->path_rec->mtu) {
 		ret = -EINVAL;
 		goto err2;
@@ -1863,7 +1863,7 @@ int rdma_resolve_route(struct rdma_cm_id *id, int timeout_ms)
 			ret = cma_resolve_ib_route(id_priv, timeout_ms);
 			break;
 		case IB_LINK_LAYER_ETHERNET:
-			ret = cma_resolve_rocee_route(id_priv);
+			ret = cma_resolve_iboe_route(id_priv);
 			break;
 		default:
 			ret = -ENOSYS;
@@ -2956,9 +2956,9 @@ static int cma_join_ib_multicast(struct rdma_id_private *id_priv,
 }
 
 
-static void rocee_mcast_work_handler(struct work_struct *work)
+static void iboe_mcast_work_handler(struct work_struct *work)
 {
-	struct rocee_mcast_work *mw = container_of(work, struct rocee_mcast_work, work);
+	struct iboe_mcast_work *mw = container_of(work, struct iboe_mcast_work, work);
 	struct cma_multicast *mc = mw->mc;
 	struct ib_sa_multicast *m = mc->multicast.ib;
 
@@ -2968,7 +2968,7 @@ static void rocee_mcast_work_handler(struct work_struct *work)
 	kfree(mw);
 }
 
-static void cma_rocee_set_mgid(struct sockaddr *addr, union ib_gid *mgid)
+static void cma_iboe_set_mgid(struct sockaddr *addr, union ib_gid *mgid)
 {
 	struct sockaddr_in *sin = (struct sockaddr_in *)addr;
 	struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)addr;
@@ -2994,10 +2994,10 @@ static void cma_rocee_set_mgid(struct sockaddr *addr, union ib_gid *mgid)
 	}
 }
 
-static int cma_rocee_join_multicast(struct rdma_id_private *id_priv,
+static int cma_iboe_join_multicast(struct rdma_id_private *id_priv,
 				     struct cma_multicast *mc)
 {
-	struct rocee_mcast_work *work;
+	struct iboe_mcast_work *work;
 	struct rdma_dev_addr *dev_addr = &id_priv->id.route.addr.dev_addr;
 	int err;
 	struct sockaddr *addr = (struct sockaddr *)&mc->addr;
@@ -3016,7 +3016,7 @@ static int cma_rocee_join_multicast(struct rdma_id_private *id_priv,
 		goto out1;
 	}
 
-	cma_rocee_set_mgid(addr, &mc->multicast.ib->rec.mgid);
+	cma_iboe_set_mgid(addr, &mc->multicast.ib->rec.mgid);
 
 	mc->multicast.ib->rec.pkey = cpu_to_be16(0xffff);
 	if (id_priv->id.ps == RDMA_PS_UDP)
@@ -3029,18 +3029,18 @@ static int cma_rocee_join_multicast(struct rdma_id_private *id_priv,
 		goto out2;
 	}
 
-	mc->multicast.ib->rec.rate = rocee_get_rate(ndev);
+	mc->multicast.ib->rec.rate = iboe_get_rate(ndev);
 	mc->multicast.ib->rec.hop_limit = 1;
-	mc->multicast.ib->rec.mtu = rocee_get_mtu(ndev->mtu);
+	mc->multicast.ib->rec.mtu = iboe_get_mtu(ndev->mtu);
 	dev_put(ndev);
 	if (!mc->multicast.ib->rec.mtu) {
 		err = -EINVAL;
 		goto out2;
 	}
-	rocee_addr_get_sgid(dev_addr, &mc->multicast.ib->rec.port_gid);
+	iboe_addr_get_sgid(dev_addr, &mc->multicast.ib->rec.port_gid);
 	work->id = id_priv;
 	work->mc = mc;
-	INIT_WORK(&work->work, rocee_mcast_work_handler);
+	INIT_WORK(&work->work, iboe_mcast_work_handler);
 	kref_get(&mc->mcref);
 	queue_work(cma_wq, &work->work);
 
@@ -3085,7 +3085,7 @@ int rdma_join_multicast(struct rdma_cm_id *id, struct sockaddr *addr,
 			break;
 		case IB_LINK_LAYER_ETHERNET:
 			kref_init(&mc->mcref);
-			ret = cma_rocee_join_multicast(id_priv, mc);
+			ret = cma_iboe_join_multicast(id_priv, mc);
 			break;
 		default:
 			ret = -EINVAL;
diff --git a/drivers/infiniband/core/ucma.c b/drivers/infiniband/core/ucma.c
index 2732952..b1c810d 100644
--- a/drivers/infiniband/core/ucma.c
+++ b/drivers/infiniband/core/ucma.c
@@ -580,7 +580,7 @@ static void ucma_copy_ib_route(struct rdma_ucm_query_route_resp *resp,
 	}
 }
 
-static void ucma_copy_rocee_route(struct rdma_ucm_query_route_resp *resp,
+static void ucma_copy_iboe_route(struct rdma_ucm_query_route_resp *resp,
 				   struct rdma_route *route)
 {
 	struct rdma_dev_addr *dev_addr;
@@ -589,9 +589,9 @@ static void ucma_copy_rocee_route(struct rdma_ucm_query_route_resp *resp,
 	switch (route->num_paths) {
 	case 0:
 		dev_addr = &route->addr.dev_addr;
-		rocee_mac_to_ll((union ib_gid *) &resp->ib_route[0].dgid,
+		iboe_mac_to_ll((union ib_gid *) &resp->ib_route[0].dgid,
 				 dev_addr->dst_dev_addr);
-		rocee_addr_get_sgid(dev_addr,
+		iboe_addr_get_sgid(dev_addr,
 				 (union ib_gid *) &resp->ib_route[0].sgid);
 		resp->ib_route[0].pkey = cpu_to_be16(0xffff);
 		break;
@@ -648,7 +648,7 @@ static ssize_t ucma_query_route(struct ucma_file *file,
 			ucma_copy_ib_route(&resp, &ctx->cm_id->route);
 			break;
 		case IB_LINK_LAYER_ETHERNET:
-			ucma_copy_rocee_route(&resp, &ctx->cm_id->route);
+			ucma_copy_iboe_route(&resp, &ctx->cm_id->route);
 			break;
 		default:
 			break;
diff --git a/include/rdma/ib_addr.h b/include/rdma/ib_addr.h
index fe6c1e9..b608bb2 100644
--- a/include/rdma/ib_addr.h
+++ b/include/rdma/ib_addr.h
@@ -130,7 +130,7 @@ static inline int rdma_addr_gid_offset(struct rdma_dev_addr *dev_addr)
 	return dev_addr->dev_type == ARPHRD_INFINIBAND ? 4 : 0;
 }
 
-static inline void rocee_mac_to_ll(union ib_gid *gid, u8 *mac)
+static inline void iboe_mac_to_ll(union ib_gid *gid, u8 *mac)
 {
 	memset(gid->raw, 0, 16);
 	*((u32 *)gid->raw) = cpu_to_be32(0xfe800000);
@@ -141,17 +141,17 @@ static inline void rocee_mac_to_ll(union ib_gid *gid, u8 *mac)
 	gid->raw[8] ^= 2;
 }
 
-static inline void rocee_addr_get_sgid(struct rdma_dev_addr *dev_addr,
+static inline void iboe_addr_get_sgid(struct rdma_dev_addr *dev_addr,
 					union ib_gid *gid)
 {
-	rocee_mac_to_ll(gid, dev_addr->src_dev_addr);
+	iboe_mac_to_ll(gid, dev_addr->src_dev_addr);
 }
 
 static inline void rdma_addr_get_sgid(struct rdma_dev_addr *dev_addr, union ib_gid *gid)
 {
 	if (dev_addr->transport == RDMA_TRANSPORT_IB &&
 	    dev_addr->dev_type != ARPHRD_INFINIBAND)
-		rocee_addr_get_sgid(dev_addr, gid);
+		iboe_addr_get_sgid(dev_addr, gid);
 	else
 		memcpy(gid, dev_addr->src_dev_addr +
 		       rdma_addr_gid_offset(dev_addr), sizeof *gid);
@@ -172,10 +172,10 @@ static inline void rdma_addr_set_dgid(struct rdma_dev_addr *dev_addr, union ib_g
 	memcpy(dev_addr->dst_dev_addr + rdma_addr_gid_offset(dev_addr), gid, sizeof *gid);
 }
 
-static inline enum ib_mtu rocee_get_mtu(int mtu)
+static inline enum ib_mtu iboe_get_mtu(int mtu)
 {
 	/*
-	 * reduce IB headers from effective RoCEE MTU. 28 stands for
+	 * reduce IB headers from effective IBoE MTU. 28 stands for
 	 * atomic header which is the biggest possible header after BTH
 	 */
 	mtu = mtu - IB_GRH_BYTES - IB_BTH_BYTES - 28;
@@ -194,7 +194,7 @@ static inline enum ib_mtu rocee_get_mtu(int mtu)
 		return 0;
 }
 
-static inline int rocee_get_rate(struct net_device *dev)
+static inline int iboe_get_rate(struct net_device *dev)
 {
 	struct ethtool_cmd cmd;
 
