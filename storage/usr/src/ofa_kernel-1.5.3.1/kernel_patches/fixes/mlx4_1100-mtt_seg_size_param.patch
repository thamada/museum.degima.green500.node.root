From 0c1b9ad3d28eb52c18d97aab9a2add48a1313af6 Mon Sep 17 00:00:00 2001
From: Eli Cohen <eli@mellanox.co.il>
Date: Mon, 2 Mar 2009 10:20:28 +0200
Subject: [PATCH] mlx4_core: Use module parameter for number of MTTs per segment

The current MTTs allocator uses kmalloc to allocate buffer for it's buddy
system implementation and thus is limited by the amount of MTT segments that it
can control. As a result, the size of memory that can be registered is limited
too. This patch uses a module parameter to control the number of MTT entries
that each segment represents, thus allowing to register more memory with the
same number of segments.

Signed-off-by: Eli Cohen <eli@mellanox.co.il>
---
 drivers/net/mlx4/main.c     |   14 ++++++++++++--
 drivers/net/mlx4/mr.c       |    6 +++---
 drivers/net/mlx4/profile.c  |    2 +-
 include/linux/mlx4/device.h |    1 +
 4 files changed, 17 insertions(+), 6 deletions(-)

Index: ofed_kernel-fixes/drivers/net/mlx4/main.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/net/mlx4/main.c	2009-03-02 11:01:36.000000000 +0200
+++ ofed_kernel-fixes/drivers/net/mlx4/main.c	2009-03-02 11:07:05.000000000 +0200
@@ -114,6 +114,10 @@ module_param_named(log_num_mtt, mod_para
 MODULE_PARM_DESC(log_num_mtt,
 		 "log maximum number of memory translation table segments per HCA");
 
+static int log_mtts_per_seg = ilog2(MLX4_MTT_ENTRY_PER_SEG);
+module_param_named(log_mtts_per_seg, log_mtts_per_seg, int, 0444);
+MODULE_PARM_DESC(log_mtts_per_seg, "Log2 number of MTT entries per segment (1-5)");
+
 static void process_mod_param_profile(void)
 {
 	default_profile.num_qp = (mod_param_profile.num_qp ?
@@ -274,12 +278,13 @@ static int mlx4_dev_cap(struct mlx4_dev 
 	dev->caps.max_cqes	     = dev_cap->max_cq_sz - 1;
 	dev->caps.reserved_cqs	     = dev_cap->reserved_cqs;
 	dev->caps.reserved_eqs	     = dev_cap->reserved_eqs;
+	dev->caps.mtts_per_seg	     = 1 << log_mtts_per_seg;
 	dev->caps.reserved_mtts	     = DIV_ROUND_UP(dev_cap->reserved_mtts,
-						    MLX4_MTT_ENTRY_PER_SEG);
+						    dev->caps.mtts_per_seg);
 	dev->caps.reserved_mrws	     = dev_cap->reserved_mrws;
 	dev->caps.reserved_uars	     = dev_cap->reserved_uars;
 	dev->caps.reserved_pds	     = dev_cap->reserved_pds;
-	dev->caps.mtt_entry_sz	     = MLX4_MTT_ENTRY_PER_SEG * dev_cap->mtt_entry_sz;
+	dev->caps.mtt_entry_sz	     = dev->caps.mtts_per_seg * dev_cap->mtt_entry_sz;
 	dev->caps.max_msg_sz         = dev_cap->max_msg_sz;
 	dev->caps.page_size_cap	     = ~(u32) (dev_cap->min_page_sz - 1);
 	dev->caps.flags		     = dev_cap->flags;
@@ -1451,6 +1456,11 @@ static int __init mlx4_verify_params(voi
 		return -1;
 	}
 
+	if ((log_mtts_per_seg < 1) || (log_mtts_per_seg > 5)) {
+		printk(KERN_WARNING "mlx4_core: bad log_mtts_per_seg: %d\n", log_mtts_per_seg);
+		return -1;
+	}
+
 	return 0;
 }
 
Index: ofed_kernel-fixes/drivers/net/mlx4/mr.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/net/mlx4/mr.c	2009-03-02 11:01:36.000000000 +0200
+++ ofed_kernel-fixes/drivers/net/mlx4/mr.c	2009-03-02 11:06:26.000000000 +0200
@@ -213,7 +213,7 @@ int mlx4_mtt_init(struct mlx4_dev *dev, 
 	} else
 		mtt->page_shift = page_shift;
 
-	for (mtt->order = 0, i = MLX4_MTT_ENTRY_PER_SEG; i < npages; i <<= 1)
+	for (mtt->order = 0, i = dev->caps.mtts_per_seg; i < npages; i <<= 1)
 		++mtt->order;
 
 	mtt->first_seg = mlx4_alloc_mtt_range(dev, mtt->order);
@@ -391,7 +391,7 @@ int mlx4_mr_enable(struct mlx4_dev *dev,
 		mpt_entry->pd_flags |= cpu_to_be32(MLX4_MPT_PD_FLAG_FAST_REG |
 						   MLX4_MPT_PD_FLAG_RAE);
 		mpt_entry->mtt_sz    = cpu_to_be32((1 << mr->mtt.order) *
-						   MLX4_MTT_ENTRY_PER_SEG);
+						   dev->caps.mtts_per_seg);
 	} else {
 		mpt_entry->flags    |= cpu_to_be32(MLX4_MPT_FLAG_SW_OWNS);
 	}
@@ -432,7 +432,7 @@ static int mlx4_write_mtt_chunk(struct m
 	    (start_index + npages - 1) / (PAGE_SIZE / sizeof (u64)))
 		return -EINVAL;
 
-	if (start_index & (MLX4_MTT_ENTRY_PER_SEG - 1))
+	if (start_index & (dev->caps.mtts_per_seg - 1))
 		return -EINVAL;
 
 	mtts = mlx4_table_find(&priv->mr_table.mtt_table, mtt->first_seg +
Index: ofed_kernel-fixes/drivers/net/mlx4/profile.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/net/mlx4/profile.c	2009-03-02 11:01:12.000000000 +0200
+++ ofed_kernel-fixes/drivers/net/mlx4/profile.c	2009-03-02 11:06:26.000000000 +0200
@@ -98,7 +98,7 @@ u64 mlx4_make_profile(struct mlx4_dev *d
 	profile[MLX4_RES_EQ].size     = dev_cap->eqc_entry_sz;
 	profile[MLX4_RES_DMPT].size   = dev_cap->dmpt_entry_sz;
 	profile[MLX4_RES_CMPT].size   = dev_cap->cmpt_entry_sz;
-	profile[MLX4_RES_MTT].size    = MLX4_MTT_ENTRY_PER_SEG * dev_cap->mtt_entry_sz;
+	profile[MLX4_RES_MTT].size    = dev->caps.mtts_per_seg * dev_cap->mtt_entry_sz;
 	profile[MLX4_RES_MCG].size    = MLX4_MGM_ENTRY_SIZE;
 
 	profile[MLX4_RES_QP].num      = request->num_qp;
Index: ofed_kernel-fixes/include/linux/mlx4/device.h
===================================================================
--- ofed_kernel-fixes.orig/include/linux/mlx4/device.h	2009-03-02 11:01:36.000000000 +0200
+++ ofed_kernel-fixes/include/linux/mlx4/device.h	2009-03-02 11:06:26.000000000 +0200
@@ -209,6 +209,7 @@ struct mlx4_caps {
 	int			num_comp_vectors;
 	int			num_mpts;
 	int			num_mtt_segs;
+	int			mtts_per_seg;
 	int			fmr_reserved_mtts;
 	int			reserved_mtts;
 	int			reserved_mrws;
