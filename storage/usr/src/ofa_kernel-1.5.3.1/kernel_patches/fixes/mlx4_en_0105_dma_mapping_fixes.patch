From 7fb8faa80a0bc03afbd77fdec6f15c40744be607 Mon Sep 17 00:00:00 2001
From: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
Date: Tue, 4 Aug 2009 11:44:01 +0300
Subject: [PATCH 3/7] mlx4_en: DMA mapping fixes

Signed-off-by: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
---
 drivers/net/mlx4/en_rx.c |   17 +++++++++--------
 drivers/net/mlx4/en_tx.c |    1 +
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/net/mlx4/en_rx.c b/drivers/net/mlx4/en_rx.c
index 789064e..899385e 100644
--- a/drivers/net/mlx4/en_rx.c
+++ b/drivers/net/mlx4/en_rx.c
@@ -175,8 +175,9 @@ static void mlx4_en_init_rx_desc(struct mlx4_en_priv *priv,
 static int
 mlx4_en_alloc_rx_skb(struct mlx4_en_priv *priv,
 		     struct mlx4_en_rx_desc *rx_desc,
-		     struct sk_buff **pskb)
+		     struct sk_buff **pskb, int unmap)
 {
+	struct mlx4_en_dev *mdev = priv->mdev;
 	dma_addr_t dma;
 	int size = priv->rx_skb_size + NET_IP_ALIGN;
 	struct sk_buff *new_skb = alloc_skb(size, GFP_ATOMIC);
@@ -184,6 +185,10 @@ mlx4_en_alloc_rx_skb(struct mlx4_en_priv *priv,
 	if (unlikely(new_skb == NULL))
 		return -ENOMEM;
 
+	if (unmap)
+		pci_unmap_single(mdev->pdev, be64_to_cpu(rx_desc->data->addr),
+				 be32_to_cpu(rx_desc->data->byte_count),
+				 PCI_DMA_FROMDEVICE);
 	new_skb->dev = priv->dev;
 	skb_reserve(new_skb, NET_IP_ALIGN);
 	dma = pci_map_single(priv->mdev->pdev, new_skb->data, size, DMA_FROM_DEVICE);
@@ -199,7 +204,7 @@ mlx4_en_prepare_rx_desc_skb(struct mlx4_en_priv *priv,
 	struct mlx4_en_rx_desc *rx_desc = ring->buf + (index * ring->stride);
 	struct sk_buff **pskb = (struct sk_buff **) ring->rx_info + index;
 
-	return mlx4_en_alloc_rx_skb(priv, rx_desc, pskb);
+	return mlx4_en_alloc_rx_skb(priv, rx_desc, pskb, 0);
 }
 
 static int mlx4_en_prepare_rx_desc(struct mlx4_en_priv *priv,
@@ -526,7 +531,7 @@ static int mlx4_en_complete_rx_desc(struct mlx4_en_priv *priv,
 			goto fail;
 
 		/* Unmap buffer */
-		pci_unmap_single(mdev->pdev, dma, skb_frags[nr].size,
+		pci_unmap_single(mdev->pdev, dma, skb_frags_rx[nr].size,
 				 PCI_DMA_FROMDEVICE);
 	}
 	/* Adjust size of last fragment to match actual length */
@@ -654,12 +659,8 @@ mlx4_en_get_rx_skb(struct mlx4_en_priv *priv,
 
 	} else {
 		skb = *pskb;
-		if (unlikely(mlx4_en_alloc_rx_skb(priv, rx_desc, pskb)))
+		if (unlikely(mlx4_en_alloc_rx_skb(priv, rx_desc, pskb, 1)))
 			return NULL;
-
-		pci_unmap_single(mdev->pdev, be64_to_cpu(rx_desc->data->addr),
-				 be32_to_cpu(rx_desc->data->byte_count),
-				 PCI_DMA_FROMDEVICE);
 	}
 
 	skb->tail += length;
diff --git a/drivers/net/mlx4/en_tx.c b/drivers/net/mlx4/en_tx.c
index 4cb8d72..be138aa 100644
--- a/drivers/net/mlx4/en_tx.c
+++ b/drivers/net/mlx4/en_tx.c
@@ -249,6 +249,7 @@ static u32 mlx4_en_free_tx_desc(struct mlx4_en_priv *priv,
 				pci_unmap_page(mdev->pdev,
 					(dma_addr_t) be64_to_cpu(data->addr),
 					 frag->size, PCI_DMA_TODEVICE);
+				++data;
 			}
 		}
 		/* Stamp the freed descriptor */
-- 
1.6.3

