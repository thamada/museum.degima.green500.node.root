diff --git a/drivers/infiniband/hw/qib/qib_eeprom.c b/drivers/infiniband/hw/qib/qib_eeprom.c
index 7a6fe41..4f959c9 100644
--- a/drivers/infiniband/hw/qib/qib_eeprom.c
+++ b/drivers/infiniband/hw/qib/qib_eeprom.c
@@ -58,7 +58,7 @@ int qib_eeprom_read(struct qib_devdata *dd, u8 eeprom_offset,
 	if (!ret) {
 		ret = qib_twsi_reset(dd);
 		if (ret)
-			qib_dev_err(dd, "TWSI Reset failed, EEPROM Rd\n");
+			qib_dev_err(dd, "EEPROM Reset for read failed\n");
 		else
 			ret = qib_twsi_blk_rd(dd, dd->twsi_eeprom_dev,
 					      eeprom_offset, buff, len);
@@ -81,7 +81,7 @@ static int eeprom_write_with_enable(struct qib_devdata *dd, u8 offset,
 	pwen = dd->f_eeprom_wen(dd, 1);
 	ret = qib_twsi_reset(dd);
 	if (ret)
-		qib_dev_err(dd, "TWSI Reset failed, EEPROM Wr\n");
+		qib_dev_err(dd, "EEPROM Reset for write failed\n");
 	else
 		ret = qib_twsi_blk_wr(dd, dd->twsi_eeprom_dev,
 				      offset, buf, len);
diff --git a/drivers/infiniband/hw/qib/qib_qsfp.c b/drivers/infiniband/hw/qib/qib_qsfp.c
index 5ffeddf..759ab3f 100644
--- a/drivers/infiniband/hw/qib/qib_qsfp.c
+++ b/drivers/infiniband/hw/qib/qib_qsfp.c
@@ -89,7 +89,8 @@ static int qsfp_read(struct qib_pportdata *ppd, int addr, void *bp, int len)
 	/* Make sure TWSI bus is in sane state. */
 	ret = qib_twsi_reset(dd);
 	if (ret) {
-		qib_dev_porterr(dd, ppd->port, "TWSI Reset failed, QSFP Rd\n");
+		qib_dev_porterr(dd, ppd->port,
+				"QSFP interface Reset for read failed\n");
 		ret = -EIO;
 		stuck = 1;
 		goto deselect;
@@ -134,7 +135,7 @@ deselect:
 	 * so we must wait.
 	 */
 	if (stuck)
-		qib_dev_err(dd, "TWSI bus stuck non-idle\n");
+		qib_dev_err(dd, "QSFP interface bus stuck non-idle\n");
 
 	if (pass >= QSFP_MAX_RETRY && ret)
 		qib_dev_porterr(dd, ppd->port, "QSFP failed even retrying\n");
@@ -202,7 +203,8 @@ static int qib_qsfp_write(struct qib_pportdata *ppd, int addr, void *bp,
 	/* Make sure TWSI bus is in sane state. */
 	ret = qib_twsi_reset(dd);
 	if (ret) {
-		qib_dev_porterr(dd, ppd->port, "TWSI Reset failed, QSFP Wr\n");
+		qib_dev_porterr(dd, ppd->port,
+				"QSFP interface Reset for write failed\n");
 		ret = -EIO;
 		goto deselect;
 	}
diff --git a/drivers/infiniband/hw/qib/qib_twsi.c b/drivers/infiniband/hw/qib/qib_twsi.c
index a9a1c92..ba2dad7 100644
--- a/drivers/infiniband/hw/qib/qib_twsi.c
+++ b/drivers/infiniband/hw/qib/qib_twsi.c
@@ -110,7 +110,7 @@ static void scl_out(struct qib_devdata *dd, u8 bit)
 			udelay(2);
 		}
 		if (rise_usec <= 0)
-			qib_dev_err(dd, "TWSI SCL stuck low > %d uSec\n",
+			qib_dev_err(dd, "SCL interface stuck low > %d uSec\n",
 				    SCL_WAIT_USEC);
 	}
 	i2c_wait_for_writes(dd);
@@ -301,7 +301,7 @@ int qib_twsi_reset(struct qib_devdata *dd)
 
 		pins = dd->f_gpio_mod(dd, 0, 0, 0);
 		if ((pins & mask) != mask)
-			qib_dev_err(dd, "TWSI pins not at rest: %d\n",
+			qib_dev_err(dd, "GPIO pins not at rest: %d\n",
 				    pins & mask);
 		/* Drop SDA to issue START */
 		udelay(1); /* Guarantee .6 uSec setup */
@@ -390,8 +390,9 @@ int qib_twsi_blk_rd(struct qib_devdata *dd, int dev, int addr,
 		udelay(TWSI_BUF_WAIT_USEC);
 
 		if (ret) {
-			qib_dev_err(dd, "Failed to write TWSI addr %02X\n",
-				    addr);
+			qib_dev_err(dd,
+				"Failed to write interface read addr %02X\n",
+				addr);
 			ret = 1;
 			goto bail;
 		}
@@ -465,7 +466,8 @@ int qib_twsi_blk_wr(struct qib_devdata *dd, int dev, int addr,
 			}
 			ret = qib_twsi_wr(dd, addr, 0);
 			if (ret) {
-				qib_dev_err(dd, "Failed to write TWSI addr\n");
+				qib_dev_err(dd, "Failed to write interface"
+					    " write addr %02X\n", addr);
 				goto failed_write;
 			}
 		}
