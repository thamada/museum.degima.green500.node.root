xprtsock: Fix xs_nospace to return EAGAIN by default

From: Tom Tucker <tom@ogc.us>

The xs_nospace function is called to handle EAGAIN
from underlyling kernel sockets services. The
function has a race such that SOCK_ASYNC_NOSPACE
can be reset before it is tested. If this happens,
xs_nospace will return 0 instead of EAGAIN. This
changes the interpretation to 'partial send' and
xs_tcp_release_rqst will tear down the connection.

Change the default return from xs_nospace to EAGAIN
to handle this race properly.

Signed-off-by: Tom Tucker <tom@opengridcomputing.com>
---

 net/sunrpc/xprtsock.c |    3 +--
 1 files changed, 1 insertions(+), 2 deletions(-)


diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index c90414f..91c3d42 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -537,7 +537,7 @@ static int xs_nospace(struct rpc_task *task)
 	struct rpc_rqst *req = task->tk_rqstp;
 	struct rpc_xprt *xprt = req->rq_xprt;
 	struct sock_xprt *transport = container_of(xprt, struct sock_xprt, xprt);
-	int ret = 0;
+	int ret = -EAGAIN;
 
 	dprintk("RPC: %5u xmit incomplete (%u left of %u)\n",
 			task->tk_pid, req->rq_slen - req->rq_bytes_sent,
@@ -549,7 +549,6 @@ static int xs_nospace(struct rpc_task *task)
 	/* Don't race with disconnect */
 	if (xprt_connected(xprt)) {
 		if (test_bit(SOCK_ASYNC_NOSPACE, &transport->sock->flags)) {
-			ret = -EAGAIN;
 			/*
 			 * Notify TCP that we're limited by the application
 			 * window size
