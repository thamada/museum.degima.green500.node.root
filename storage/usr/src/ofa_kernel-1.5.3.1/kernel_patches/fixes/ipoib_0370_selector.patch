IB/ipoib: user appropriate mtu selector for path queries

IPoIB must set mtu selector in path record query according to dev->mtu:
if we wildcard it, SM can select a path with lower MTU.
This breaks IPoIB on networks with SM Tavor quirk activates.

We can always require this, since IPoIB spec includes the following statement:
    The value (for IB MTU) assigned to the broadcast-GID must not
    be greater than any physical link MTU spanned by the IPoIB
    subnet.

Signed-off-by: Michael S. Tsirkin <mst@mellanox.co.il>

---

Note the following uses IB_SA_GT so it should be applied on top of SA
enum rename.

---

V2: added local pathrec variable so that can separate pathrec used for
query from pathrec currently in use by ipoib.  Reason is that with the
addition of flush levels, the ah allocated for the ipoib_path is
not removed, so the mtu in the pathrec continues to be active.  In
this case, we cannot overwrite it, as was done in the previous version
of the patch.

---
 drivers/infiniband/ulp/ipoib/ipoib_main.c |   32 +++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

Index: ofa_1_4_dev_kernel/drivers/infiniband/ulp/ipoib/ipoib_main.c
===================================================================
--- ofa_1_4_dev_kernel.orig/drivers/infiniband/ulp/ipoib/ipoib_main.c
+++ ofa_1_4_dev_kernel/drivers/infiniband/ulp/ipoib/ipoib_main.c
@@ -203,6 +203,8 @@ static int ipoib_change_mtu(struct net_d
 
 	dev->mtu = min(priv->mcast_mtu, priv->admin_mtu);
 
+	queue_work(ipoib_workqueue, &priv->flush_light);
+
 	return 0;
 }
 
@@ -524,15 +526,41 @@ static int path_rec_start(struct net_dev
 			  struct ipoib_path *path)
 {
 	struct ipoib_dev_priv *priv = netdev_priv(dev);
+	ib_sa_comp_mask comp_mask = IB_SA_PATH_REC_MTU_SELECTOR | IB_SA_PATH_REC_MTU;
+	struct ib_sa_path_rec p_rec;
+
+	p_rec = path->pathrec;
+	p_rec.mtu_selector = IB_SA_GT;
 
-	ipoib_dbg(priv, "Start path record lookup for %pI6\n",
-		  path->pathrec.dgid.raw);
+	switch (roundup_pow_of_two(dev->mtu + IPOIB_ENCAP_LEN)) {
+	case 512:
+		p_rec.mtu = IB_MTU_256;
+		break;
+	case 1024:
+		p_rec.mtu = IB_MTU_512;
+		break;
+	case 2048:
+		p_rec.mtu = IB_MTU_1024;
+		break;
+	case 4096:
+		p_rec.mtu = IB_MTU_2048;
+		break;
+	default:
+		/* Wildcard everything */
+		comp_mask = 0;
+		p_rec.mtu = 0;
+		p_rec.mtu_selector = 0;
+	}
+
+	ipoib_dbg(priv, "Start path record lookup for %pI6 MTU > %d\n",
+		  p_rec.dgid.raw,
+		  comp_mask ? ib_mtu_enum_to_int(p_rec.mtu) : 0);
 
 	init_completion(&path->done);
 
 	path->query_id =
 		ib_sa_path_rec_get(&ipoib_sa_client, priv->ca, priv->port,
-				   &path->pathrec,
+				   &p_rec, comp_mask		|
 				   IB_SA_PATH_REC_DGID		|
 				   IB_SA_PATH_REC_SGID		|
 				   IB_SA_PATH_REC_NUMB_PATH	|
