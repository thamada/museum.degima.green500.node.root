From 3c40d790e0a29471bbdc5b1beba34fa6a9a83b59 Mon Sep 17 00:00:00 2001
From: Eli Cohen <eli@mellanox.co.il>
Date: Sun, 22 Aug 2010 15:27:07 +0300
Subject: [PATCH] iboe: adapt implementation to match kernel

Signed-off-by: Eli Cohen <eli@mellanox.co.il>
---
 drivers/infiniband/core/agent.c           |   18 ++----
 drivers/infiniband/core/cm.c              |    5 +-
 drivers/infiniband/core/cma.c             |   27 ++++-----
 drivers/infiniband/core/mad.c             |    2 +-
 drivers/infiniband/core/multicast.c       |    8 +-
 drivers/infiniband/core/sa_query.c        |   40 ++++++-------
 drivers/infiniband/core/sysfs.c           |    4 +-
 drivers/infiniband/core/ucma.c            |   17 +++---
 drivers/infiniband/core/user_mad.c        |    6 +-
 drivers/infiniband/core/uverbs.h          |    1 -
 drivers/infiniband/core/uverbs_cmd.c      |   32 -----------
 drivers/infiniband/core/uverbs_main.c     |    1 -
 drivers/infiniband/core/verbs.c           |   13 +----
 include/rdma/ib_addr.h                    |   24 ++++++--
 include/rdma/ib_sa.h                      |    3 +-
 include/rdma/ib_user_verbs.h              |   15 -----
 include/rdma/ib_verbs.h                   |   19 +------
 24 files changed, 122 insertions(+), 268 deletions(-)

Index: ofed_kernel-fixes/drivers/infiniband/core/agent.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/agent.c	2010-08-23 09:40:21.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/agent.c	2010-08-23 09:40:24.000000000 +0300
@@ -48,8 +48,6 @@
 struct ib_agent_port_private {
 	struct list_head port_list;
 	struct ib_mad_agent *agent[2];
-	struct ib_device    *device;
-	u8		     port_num;
 };
 
 static DEFINE_SPINLOCK(ib_agent_port_list_lock);
@@ -60,10 +58,11 @@ __ib_get_agent_port(struct ib_device *de
 {
 	struct ib_agent_port_private *entry;
 
-	list_for_each_entry(entry, &ib_agent_port_list, port_list)
-		if (entry->device == device && entry->port_num == port_num)
+	list_for_each_entry(entry, &ib_agent_port_list, port_list) {
+		if (entry->agent[1]->device == device &&
+		    entry->agent[1]->port_num == port_num)
 			return entry;
-
+	}
 	return NULL;
 }
 
@@ -156,7 +155,7 @@ int ib_agent_port_open(struct ib_device 
 		goto error1;
 	}
 
-	if (rdma_port_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND) {
+	if (rdma_port_get_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND) {
 		/* Obtain send only MAD agent for SMI QP */
 		port_priv->agent[0] = ib_register_mad_agent(device, port_num,
 							    IB_QPT_SMI, NULL, 0,
@@ -178,9 +177,6 @@ int ib_agent_port_open(struct ib_device 
 		goto error3;
 	}
 
-	port_priv->device = device;
-	port_priv->port_num = port_num;
-
 	spin_lock_irqsave(&ib_agent_port_list_lock, flags);
 	list_add_tail(&port_priv->port_list, &ib_agent_port_list);
 	spin_unlock_irqrestore(&ib_agent_port_list_lock, flags);
@@ -188,7 +184,7 @@ int ib_agent_port_open(struct ib_device 
 	return 0;
 
 error3:
-	if (rdma_port_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND)
+	if (port_priv->agent[0])
 		ib_unregister_mad_agent(port_priv->agent[0]);
 error2:
 	kfree(port_priv);
@@ -212,7 +208,7 @@ int ib_agent_port_close(struct ib_device
 	spin_unlock_irqrestore(&ib_agent_port_list_lock, flags);
 
 	ib_unregister_mad_agent(port_priv->agent[1]);
-	if (rdma_port_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND)
+	if (port_priv->agent[0])
 		ib_unregister_mad_agent(port_priv->agent[0]);
 
 	kfree(port_priv);
Index: ofed_kernel-fixes/drivers/infiniband/core/cm.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/cm.c	2010-08-23 09:40:21.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/cm.c	2010-08-23 09:46:40.323463468 +0300
@@ -351,7 +351,6 @@ static int cm_init_av_by_path(struct ib_
 	unsigned long flags;
 	int ret;
 	u8 p;
-	int force_grh;
 
 	read_lock_irqsave(&cm.device_lock, flags);
 	list_for_each_entry(cm_dev, &cm.device_list, list) {
@@ -372,10 +371,8 @@ static int cm_init_av_by_path(struct ib_
 		return ret;
 
 	av->port = port;
-	force_grh = rdma_port_link_layer(cm_dev->ib_device, port->port_num) ==
-		IB_LINK_LAYER_ETHERNET ? 1 : 0;
 	ib_init_ah_from_path(cm_dev->ib_device, port->port_num, path,
-			     &av->ah_attr, force_grh);
+			     &av->ah_attr);
 	av->timeout = path->packet_life_time + 1;
 	return 0;
 }
Index: ofed_kernel-fixes/drivers/infiniband/core/cma.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/cma.c	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/cma.c	2010-08-23 09:40:24.000000000 +0300
@@ -608,7 +608,7 @@ static int cma_ib_init_qp_attr(struct rd
 	int ret;
 	u16 pkey;
 
-	if (rdma_port_link_layer(id_priv->id.device, id_priv->id.port_num) ==
+	if (rdma_port_get_link_layer(id_priv->id.device, id_priv->id.port_num) ==
 	    IB_LINK_LAYER_INFINIBAND)
 		pkey = ib_addr_get_pkey(dev_addr);
 	else
@@ -793,7 +793,7 @@ static inline int cma_user_data_offset(e
 
 static void cma_cancel_route(struct rdma_id_private *id_priv)
 {
-	switch (rdma_port_link_layer(id_priv->id.device, id_priv->id.port_num)) {
+	switch (rdma_port_get_link_layer(id_priv->id.device, id_priv->id.port_num)) {
 	case IB_LINK_LAYER_INFINIBAND:
 		if (id_priv->query)
 			ib_sa_cancel_query(id_priv->query_id, id_priv->query);
@@ -874,7 +874,7 @@ static void cma_leave_mc_groups(struct r
 		mc = container_of(id_priv->mc_list.next,
 				  struct cma_multicast, list);
 		list_del(&mc->list);
-		switch (rdma_port_link_layer(id_priv->cma_dev->device, id_priv->id.port_num)) {
+		switch (rdma_port_get_link_layer(id_priv->cma_dev->device, id_priv->id.port_num)) {
 		case IB_LINK_LAYER_INFINIBAND:
 			ib_sa_free_multicast(mc->multicast.ib);
 			kfree(mc);
@@ -1793,7 +1793,7 @@ static int cma_resolve_iboe_route(struct
 	struct sockaddr_in *src_addr = (struct sockaddr_in *)&route->addr.src_addr;
 	struct sockaddr_in *dst_addr = (struct sockaddr_in *)&route->addr.dst_addr;
 	struct net_device *ndev = NULL;
-	u16 vid = 0;
+	u16 vid;
 
 	if (src_addr->sin_family != dst_addr->sin_family)
 		return -EINVAL;
@@ -1820,9 +1820,7 @@ static int cma_resolve_iboe_route(struct
 		goto err2;
 	}
 
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-	vid = vlan_dev_vlan_id(ndev);
-#endif
+	vid = rdma_vlan_dev_vlan_id(ndev);
 
 	iboe_mac_vlan_to_ll(&route->path_rec->sgid, addr->dev_addr.src_dev_addr, vid);
 	iboe_mac_vlan_to_ll(&route->path_rec->dgid, addr->dev_addr.dst_dev_addr, vid);
@@ -1873,7 +1871,7 @@ int rdma_resolve_route(struct rdma_cm_id
 	atomic_inc(&id_priv->refcount);
 	switch (rdma_node_get_transport(id->device->node_type)) {
 	case RDMA_TRANSPORT_IB:
-		switch (rdma_port_link_layer(id->device, id->port_num)) {
+		switch (rdma_port_get_link_layer(id->device, id->port_num)) {
 		case IB_LINK_LAYER_INFINIBAND:
 			ret = cma_resolve_ib_route(id_priv, timeout_ms);
 			break;
@@ -1935,7 +1933,7 @@ port_found:
 		goto out;
 
 	id_priv->id.route.addr.dev_addr.dev_type =
-		(rdma_port_link_layer(cma_dev->device, p) == IB_LINK_LAYER_INFINIBAND) ?
+		(rdma_port_get_link_layer(cma_dev->device, p) == IB_LINK_LAYER_INFINIBAND) ?
 		ARPHRD_INFINIBAND : ARPHRD_ETHER;
 
 	rdma_addr_set_sgid(&id_priv->id.route.addr.dev_addr, &gid);
@@ -2408,7 +2406,6 @@ static int cma_sidr_rep_handler(struct i
 	struct rdma_cm_event event;
 	struct ib_cm_sidr_rep_event_param *rep = &ib_event->param.sidr_rep_rcvd;
 	int ret = 0;
-	int force_grh;
 
 	if (cma_disable_callback(id_priv, CMA_CONNECT))
 		return 0;
@@ -2438,11 +2435,9 @@ static int cma_sidr_rep_handler(struct i
 			event.status = -EINVAL;
 			break;
 		}
-		force_grh = rdma_port_link_layer(cm_id->device, id_priv->id.port_num) ==
-			IB_LINK_LAYER_ETHERNET ? 1 : 0;
 		ib_init_ah_from_path(id_priv->id.device, id_priv->id.port_num,
 				     id_priv->id.route.path_rec,
-				     &event.param.ud.ah_attr, force_grh);
+				     &event.param.ud.ah_attr);
 		event.param.ud.qp_num = rep->qpn;
 		event.param.ud.qkey = rep->qkey;
 		event.event = RDMA_CM_EVENT_ESTABLISHED;
@@ -3010,7 +3005,7 @@ static void cma_iboe_set_mgid(struct soc
 }
 
 static int cma_iboe_join_multicast(struct rdma_id_private *id_priv,
-				     struct cma_multicast *mc)
+				   struct cma_multicast *mc)
 {
 	struct iboe_mcast_work *work;
 	struct rdma_dev_addr *dev_addr = &id_priv->id.route.addr.dev_addr;
@@ -3094,7 +3089,7 @@ int rdma_join_multicast(struct rdma_cm_i
 
 	switch (rdma_node_get_transport(id->device->node_type)) {
 	case RDMA_TRANSPORT_IB:
-		switch (rdma_port_link_layer(id->device, id->port_num)) {
+		switch (rdma_port_get_link_layer(id->device, id->port_num)) {
 		case IB_LINK_LAYER_INFINIBAND:
 			ret = cma_join_ib_multicast(id_priv, mc);
 			break;
@@ -3139,7 +3134,7 @@ void rdma_leave_multicast(struct rdma_cm
 						&mc->multicast.ib->rec.mgid,
 						mc->multicast.ib->rec.mlid);
 			if (rdma_node_get_transport(id_priv->cma_dev->device->node_type) == RDMA_TRANSPORT_IB) {
-				switch (rdma_port_link_layer(id->device, id->port_num)) {
+				switch (rdma_port_get_link_layer(id->device, id->port_num)) {
 				case IB_LINK_LAYER_INFINIBAND:
 					ib_sa_free_multicast(mc->multicast.ib);
 					kfree(mc);
Index: ofed_kernel-fixes/drivers/infiniband/core/mad.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/mad.c	2010-08-23 09:40:21.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/mad.c	2010-08-23 09:40:24.000000000 +0300
@@ -2814,7 +2814,7 @@ static int ib_mad_port_open(struct ib_de
 	init_mad_qp(port_priv, &port_priv->qp_info[1]);
 
 	cq_size = mad_sendq_size + mad_recvq_size;
-	has_smi = rdma_port_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND;
+	has_smi = rdma_port_get_link_layer(device, port_num) == IB_LINK_LAYER_INFINIBAND;
 	if (has_smi)
 		cq_size *= 2;
 
Index: ofed_kernel-fixes/drivers/infiniband/core/multicast.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/multicast.c	2010-08-23 09:40:21.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/multicast.c	2010-08-23 09:46:40.059463207 +0300
@@ -773,7 +773,7 @@ static void mcast_event_handler(struct i
 	int index;
 
 	dev = container_of(handler, struct mcast_device, event_handler);
-	if (rdma_port_link_layer(dev->device, event->element.port_num) !=
+	if (rdma_port_get_link_layer(dev->device, event->element.port_num) !=
 	    IB_LINK_LAYER_INFINIBAND)
 		return;
 
@@ -804,7 +804,7 @@ static void mcast_add_one(struct ib_devi
 	if (rdma_node_get_transport(device->node_type) != RDMA_TRANSPORT_IB)
 		return;
 
-	dev = kzalloc(sizeof *dev + device->phys_port_cnt * sizeof *port,
+	dev = kmalloc(sizeof *dev + device->phys_port_cnt * sizeof *port,
 		      GFP_KERNEL);
 	if (!dev)
 		return;
@@ -817,7 +817,7 @@ static void mcast_add_one(struct ib_devi
 	}
 
 	for (i = 0; i <= dev->end_port - dev->start_port; i++) {
-		if (rdma_port_link_layer(device, dev->start_port + i) !=
+		if (rdma_port_get_link_layer(device, dev->start_port + i) !=
 		    IB_LINK_LAYER_INFINIBAND)
 			continue;
 		port = &dev->port[i];
@@ -856,7 +856,7 @@ static void mcast_remove_one(struct ib_d
 	flush_workqueue(mcast_wq);
 
 	for (i = 0; i <= dev->end_port - dev->start_port; i++) {
-		if (rdma_port_link_layer(device, dev->start_port + i) ==
+		if (rdma_port_get_link_layer(device, dev->start_port + i) ==
 		    IB_LINK_LAYER_INFINIBAND) {
 			port = &dev->port[i];
 			deref_port(port);
Index: ofed_kernel-fixes/drivers/infiniband/core/sa_query.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/sa_query.c	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/sa_query.c	2010-08-23 09:46:40.247464263 +0300
@@ -416,17 +416,17 @@ static void ib_sa_event(struct ib_event_
 		struct ib_sa_port *port =
 			&sa_dev->port[event->element.port_num - sa_dev->start_port];
 
-		if (rdma_port_link_layer(handler->device, port->port_num) == IB_LINK_LAYER_INFINIBAND) {
-			spin_lock_irqsave(&port->ah_lock, flags);
-			if (port->sm_ah)
-				kref_put(&port->sm_ah->ref, free_sm_ah);
-			port->sm_ah = NULL;
-			spin_unlock_irqrestore(&port->ah_lock, flags);
+		if (rdma_port_get_link_layer(handler->device, port->port_num) != IB_LINK_LAYER_INFINIBAND)
+			return;
 
-			schedule_work(&sa_dev->port[event->element.port_num -
-				      sa_dev->start_port].update_task);
-		}
+		spin_lock_irqsave(&port->ah_lock, flags);
+		if (port->sm_ah)
+			kref_put(&port->sm_ah->ref, free_sm_ah);
+		port->sm_ah = NULL;
+		spin_unlock_irqrestore(&port->ah_lock, flags);
 
+		schedule_work(&sa_dev->port[event->element.port_num -
+					    sa_dev->start_port].update_task);
 	}
 }
 
@@ -492,11 +492,11 @@ static u8 get_src_path_mask(struct ib_de
 }
 
 int ib_init_ah_from_path(struct ib_device *device, u8 port_num,
-			 struct ib_sa_path_rec *rec, struct ib_ah_attr *ah_attr,
-			 int force_grh)
+			 struct ib_sa_path_rec *rec, struct ib_ah_attr *ah_attr)
 {
 	int ret;
 	u16 gid_index;
+	int force_grh;
 
 	memset(ah_attr, 0, sizeof *ah_attr);
 	ah_attr->dlid = be16_to_cpu(rec->dlid);
@@ -506,6 +506,8 @@ int ib_init_ah_from_path(struct ib_devic
 	ah_attr->port_num = port_num;
 	ah_attr->static_rate = rec->rate;
 
+	force_grh = rdma_port_get_link_layer(device, port_num) == IB_LINK_LAYER_ETHERNET;
+
 	if (rec->hop_limit > 1 || force_grh) {
 		ah_attr->ah_flags = IB_AH_GRH;
 		ah_attr->grh.dgid = rec->dgid;
@@ -1022,7 +1024,7 @@ static void ib_sa_add_one(struct ib_devi
 
 	for (i = 0; i <= e - s; ++i) {
 		spin_lock_init(&sa_dev->port[i].ah_lock);
-		if (rdma_port_link_layer(device, i + 1) != IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i + 1) != IB_LINK_LAYER_INFINIBAND)
 			continue;
 
 		sa_dev->port[i].sm_ah    = NULL;
@@ -1052,14 +1054,14 @@ static void ib_sa_add_one(struct ib_devi
 		goto err;
 
 	for (i = 0; i <= e - s; ++i)
-		if (rdma_port_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
 			update_sm_ah(&sa_dev->port[i].update_task);
 
 	return;
 
 err:
 	while (--i >= 0)
-		if (rdma_port_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
 			ib_unregister_mad_agent(sa_dev->port[i].agent);
 
 	kfree(sa_dev);
@@ -1080,7 +1082,7 @@ static void ib_sa_remove_one(struct ib_d
 	flush_scheduled_work();
 
 	for (i = 0; i <= sa_dev->end_port - sa_dev->start_port; ++i) {
-		if (rdma_port_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND) {
+		if (rdma_port_get_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND) {
 			ib_unregister_mad_agent(sa_dev->port[i].agent);
 			if (sa_dev->port[i].sm_ah)
 				kref_put(&sa_dev->port[i].sm_ah->ref, free_sm_ah);
Index: ofed_kernel-fixes/drivers/infiniband/core/sysfs.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/sysfs.c	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/sysfs.c	2010-08-23 09:40:24.000000000 +0300
@@ -79,7 +79,7 @@ static ssize_t port_attr_show(struct kob
 	return port_attr->show(p, port_attr, buf);
 }
 
-static struct sysfs_ops port_sysfs_ops = {
+static const struct sysfs_ops port_sysfs_ops = {
 	.show = port_attr_show
 };
 
@@ -225,7 +225,7 @@ static ssize_t phys_state_show(struct ib
 static ssize_t link_layer_show(struct ib_port *p, struct port_attribute *unused,
 			       char *buf)
 {
-	switch (rdma_port_link_layer(p->ibdev, p->port_num)) {
+	switch (rdma_port_get_link_layer(p->ibdev, p->port_num)) {
 	case IB_LINK_LAYER_INFINIBAND:
 		return sprintf(buf, "%s\n", "IB");
 	case IB_LINK_LAYER_ETHERNET:
Index: ofed_kernel-fixes/drivers/infiniband/core/ucma.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/ucma.c	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/ucma.c	2010-08-23 09:40:24.000000000 +0300
@@ -582,7 +582,7 @@ static void ucma_copy_ib_route(struct rd
 }
 
 static void ucma_copy_iboe_route(struct rdma_ucm_query_route_resp *resp,
-				   struct rdma_route *route)
+				 struct rdma_route *route)
 {
 	struct rdma_dev_addr *dev_addr;
 	struct net_device *dev;
@@ -593,17 +593,16 @@ static void ucma_copy_iboe_route(struct 
 	case 0:
 		dev_addr = &route->addr.dev_addr;
 		dev = dev_get_by_index(&init_net, dev_addr->bound_dev_if);
-		if (dev) {
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-			vid = vlan_dev_vlan_id(dev);
-#endif
-			dev_put(dev);
-		}
+			if (dev) {
+				vid = rdma_vlan_dev_vlan_id(dev);
+				dev_put(dev);
+			}
+
 
 		iboe_mac_vlan_to_ll((union ib_gid *) &resp->ib_route[0].dgid,
 				    dev_addr->dst_dev_addr, vid);
 		iboe_addr_get_sgid(dev_addr,
-				 (union ib_gid *) &resp->ib_route[0].sgid);
+				   (union ib_gid *) &resp->ib_route[0].sgid);
 		resp->ib_route[0].pkey = cpu_to_be16(0xffff);
 		break;
 	case 2:
@@ -654,7 +653,7 @@ static ssize_t ucma_query_route(struct u
 	resp.node_guid = (__force __u64) ctx->cm_id->device->node_guid;
 	resp.port_num = ctx->cm_id->port_num;
 	if (rdma_node_get_transport(ctx->cm_id->device->node_type) == RDMA_TRANSPORT_IB) {
-		switch (rdma_port_link_layer(ctx->cm_id->device, ctx->cm_id->port_num)) {
+		switch (rdma_port_get_link_layer(ctx->cm_id->device, ctx->cm_id->port_num)) {
 		case IB_LINK_LAYER_INFINIBAND:
 			ucma_copy_ib_route(&resp, &ctx->cm_id->route);
 			break;
Index: ofed_kernel-fixes/drivers/infiniband/core/user_mad.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/user_mad.c	2010-08-23 09:40:21.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/user_mad.c	2010-08-23 09:40:24.000000000 +0300
@@ -1137,7 +1137,7 @@ static void ib_umad_add_one(struct ib_de
 	for (i = s; i <= e; ++i) {
 		umad_dev->port[i - s].umad_dev = umad_dev;
 
-		if (rdma_port_link_layer(device, i) == IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i) == IB_LINK_LAYER_INFINIBAND)
 			if (ib_umad_init_port(device, i, &umad_dev->port[i - s]))
 				goto err;
 	}
@@ -1148,7 +1148,7 @@ static void ib_umad_add_one(struct ib_de
 
 err:
 	while (--i >= s)
-		if (rdma_port_link_layer(device, i) == IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i) == IB_LINK_LAYER_INFINIBAND)
 			ib_umad_kill_port(&umad_dev->port[i - s]);
 
 	kref_put(&umad_dev->ref, ib_umad_release_dev);
@@ -1163,7 +1163,7 @@ static void ib_umad_remove_one(struct ib
 		return;
 
 	for (i = 0; i <= umad_dev->end_port - umad_dev->start_port; ++i)
-		if (rdma_port_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
+		if (rdma_port_get_link_layer(device, i + 1) == IB_LINK_LAYER_INFINIBAND)
 			ib_umad_kill_port(&umad_dev->port[i]);
 
 	kref_put(&umad_dev->ref, ib_umad_release_dev);
Index: ofed_kernel-fixes/drivers/infiniband/core/uverbs.h
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/uverbs.h	2010-08-23 09:40:22.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/uverbs.h	2010-08-23 09:40:24.000000000 +0300
@@ -214,7 +214,6 @@ IB_UVERBS_DECLARE_CMD(modify_xrc_rcv_qp)
 IB_UVERBS_DECLARE_CMD(query_xrc_rcv_qp);
 IB_UVERBS_DECLARE_CMD(reg_xrc_rcv_qp);
 IB_UVERBS_DECLARE_CMD(unreg_xrc_rcv_qp);
-IB_UVERBS_DECLARE_CMD(get_eth_l2_addr);
 
 
 #endif /* UVERBS_H */
Index: ofed_kernel-fixes/drivers/infiniband/core/uverbs_cmd.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/uverbs_cmd.c	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/uverbs_cmd.c	2010-08-23 09:40:24.000000000 +0300
@@ -1856,38 +1856,6 @@ err:
 	return ret;
 }
 
-ssize_t ib_uverbs_get_eth_l2_addr(struct ib_uverbs_file *file, const char __user *buf,
-				  int in_len, int out_len)
-{
-	struct ib_uverbs_get_eth_l2_addr       cmd;
-	struct ib_uverbs_get_eth_l2_addr_resp  resp;
-	int              ret;
-	struct ib_pd    *pd;
-
-	if (out_len < sizeof resp)
-		return -ENOSPC;
-
-	if (copy_from_user(&cmd, buf, sizeof cmd))
-		return -EFAULT;
-
-	pd = idr_read_pd(cmd.pd_handle, file->ucontext);
-	if (!pd)
-		return -EINVAL;
-
-	ret = ib_get_eth_l2_addr(pd->device, cmd.port, (union ib_gid *)cmd.gid,
-				 cmd.sgid_idx, resp.mac, &resp.vlan_id);
-	put_pd_read(pd);
-	if (!ret) {
-		if (copy_to_user((void __user *) (unsigned long) cmd.response,
-				 &resp, sizeof resp))
-			return -EFAULT;
-
-		return in_len;
-	}
-
-	return ret;
-}
-
 ssize_t ib_uverbs_destroy_ah(struct ib_uverbs_file *file,
 			     const char __user *buf, int in_len, int out_len)
 {
Index: ofed_kernel-fixes/drivers/infiniband/core/uverbs_main.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/uverbs_main.c	2010-08-23 09:40:22.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/uverbs_main.c	2010-08-23 09:40:24.000000000 +0300
@@ -117,7 +117,6 @@ static ssize_t (*uverbs_cmd_table[])(str
 	[IB_USER_VERBS_CMD_QUERY_XRC_RCV_QP]	= ib_uverbs_query_xrc_rcv_qp,
 	[IB_USER_VERBS_CMD_REG_XRC_RCV_QP]	= ib_uverbs_reg_xrc_rcv_qp,
 	[IB_USER_VERBS_CMD_UNREG_XRC_RCV_QP]	= ib_uverbs_unreg_xrc_rcv_qp,
-	[IB_USER_VERBS_CMD_GET_ETH_L2_ADDR]	= ib_uverbs_get_eth_l2_addr,
 };
 
 static struct vfsmount *uverbs_event_mnt;
Index: ofed_kernel-fixes/drivers/infiniband/core/verbs.c
===================================================================
--- ofed_kernel-fixes.orig/drivers/infiniband/core/verbs.c	2010-08-23 09:40:24.000000000 +0300
+++ ofed_kernel-fixes/drivers/infiniband/core/verbs.c	2010-08-23 09:40:24.000000000 +0300
@@ -94,7 +94,7 @@ rdma_node_get_transport(enum rdma_node_t
 }
 EXPORT_SYMBOL(rdma_node_get_transport);
 
-enum rdma_link_layer rdma_port_link_layer(struct ib_device *device, u8 port_num)
+enum rdma_link_layer rdma_port_get_link_layer(struct ib_device *device, u8 port_num)
 {
 	if (device->get_link_layer)
 		return device->get_link_layer(device, port_num);
@@ -108,7 +108,7 @@ enum rdma_link_layer rdma_port_link_laye
 		return IB_LINK_LAYER_UNSPECIFIED;
 	}
 }
-EXPORT_SYMBOL(rdma_port_link_layer);
+EXPORT_SYMBOL(rdma_port_get_link_layer);
 
 /* Protection domains */
 
@@ -1071,12 +1071,3 @@ struct ib_xrcd *ib_alloc_xrcd(struct ib_
 }
 EXPORT_SYMBOL(ib_alloc_xrcd);
 
-int ib_get_eth_l2_addr(struct ib_device *device, u8 port, union ib_gid *gid,
-		       int sgid_idx, u8 *mac, __u16 *vlan_id)
-{
-	if (!device->get_eth_l2_addr)
-		return -ENOSYS;
-
-	return device->get_eth_l2_addr(device, port, gid, sgid_idx, mac, vlan_id);
-}
-EXPORT_SYMBOL(ib_get_eth_l2_addr);
Index: ofed_kernel-fixes/include/rdma/ib_addr.h
===================================================================
--- ofed_kernel-fixes.orig/include/rdma/ib_addr.h	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/include/rdma/ib_addr.h	2010-08-23 09:47:58.771462398 +0300
@@ -135,7 +135,7 @@ static inline void iboe_mac_vlan_to_ll(u
 {
 	memset(gid->raw, 0, 16);
 	*((u32 *)gid->raw) = cpu_to_be32(0xfe800000);
-	if (vid) {
+	if (vid < 0x1000) {
 		gid->raw[12] = vid & 0xff;
 		gid->raw[11] = vid >> 8;
 	} else {
@@ -148,17 +148,21 @@ static inline void iboe_mac_vlan_to_ll(u
 	gid->raw[8] ^= 2;
 }
 
+static inline u16 rdma_vlan_dev_vlan_id(const struct net_device *dev)
+{
+	return dev->priv_flags & IFF_802_1Q_VLAN ?
+		vlan_dev_vlan_id(dev) : 0xffff;
+}
+
 static inline void iboe_addr_get_sgid(struct rdma_dev_addr *dev_addr,
-					union ib_gid *gid)
+				      union ib_gid *gid)
 {
 	struct net_device *dev;
-	u16 vid = 0;
+	u16 vid = 0xffff;
 
 	dev = dev_get_by_index(&init_net, dev_addr->bound_dev_if);
 	if (dev) {
-#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
-		vid = vlan_dev_vlan_id(dev);
-#endif
+		vid = rdma_vlan_dev_vlan_id(dev);
 		dev_put(dev);
 	}
 
@@ -250,7 +254,7 @@ static inline void rdma_get_ll_mac(struc
 
 static inline int rdma_is_multicast_addr(struct in6_addr *addr)
 {
-	return addr->s6_addr[0] == 0xff ? 1 : 0;
+	return addr->s6_addr[0] == 0xff;
 }
 
 static inline void rdma_get_mcast_mac(struct in6_addr *addr, u8 *mac)
@@ -268,7 +272,13 @@ static inline u16 rdma_get_vlan_id(union
 	u16 vid;
 
 	vid = dgid->raw[11] << 8 | dgid->raw[12];
-	return vid == 0xfffe ? 0 : vid  & 0xfff;
+	return vid < 0x1000 ? vid  : 0xffff;
+}
+
+static inline struct net_device *rdma_vlan_dev_real_dev(const struct net_device *dev)
+{
+	return dev->priv_flags & IFF_802_1Q_VLAN ?
+		vlan_dev_real_dev(dev) : 0;
 }
 
 #endif /* IB_ADDR_H */
Index: ofed_kernel-fixes/include/rdma/ib_sa.h
===================================================================
--- ofed_kernel-fixes.orig/include/rdma/ib_sa.h	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/include/rdma/ib_sa.h	2010-08-23 09:46:40.211463811 +0300
@@ -377,8 +377,7 @@ int ib_init_ah_from_mcmember(struct ib_d
  */
 int ib_init_ah_from_path(struct ib_device *device, u8 port_num,
 			 struct ib_sa_path_rec *rec,
-			 struct ib_ah_attr *ah_attr,
-			 int force_grh);
+			 struct ib_ah_attr *ah_attr);
 
 /**
  * ib_sa_unpack_path - Convert a path record from MAD format to struct
Index: ofed_kernel-fixes/include/rdma/ib_user_verbs.h
===================================================================
--- ofed_kernel-fixes.orig/include/rdma/ib_user_verbs.h	2010-08-23 09:40:23.000000000 +0300
+++ ofed_kernel-fixes/include/rdma/ib_user_verbs.h	2010-08-23 09:40:24.000000000 +0300
@@ -90,7 +90,6 @@ enum {
 	IB_USER_VERBS_CMD_QUERY_XRC_RCV_QP,
 	IB_USER_VERBS_CMD_REG_XRC_RCV_QP,
 	IB_USER_VERBS_CMD_UNREG_XRC_RCV_QP,
-	IB_USER_VERBS_CMD_GET_ETH_L2_ADDR,
 };
 
 /*
@@ -631,20 +630,6 @@ struct ib_uverbs_destroy_ah {
 	__u32 ah_handle;
 };
 
-struct ib_uverbs_get_eth_l2_addr {
-	__u64	response;
-	__u32	pd_handle;
-	__u8	port;
-	__u8	sgid_idx;
-	__u8	reserved[2];
-	__u8	gid[16];
-};
-
-struct ib_uverbs_get_eth_l2_addr_resp {
-	__u8	mac[6];
-	__u16	vlan_id;
-};
-
 struct ib_uverbs_attach_mcast {
 	__u8  gid[16];
 	__u32 qp_handle;
Index: ofed_kernel-fixes/include/rdma/ib_verbs.h
===================================================================
--- ofed_kernel-fixes.orig/include/rdma/ib_verbs.h	2010-08-23 09:40:24.000000000 +0300
+++ ofed_kernel-fixes/include/rdma/ib_verbs.h	2010-08-23 09:47:07.891464482 +0300
@@ -1210,9 +1210,6 @@ struct ib_device {
 	int 			   (*unreg_xrc_rcv_qp)(struct ib_xrcd *xrcd,
 						       void *context,
 						       u32 qp_num);
-	int			   (*get_eth_l2_addr)(struct ib_device *device, u8 port,
-						      union ib_gid *dgid, int sgid_idx,
-						      u8 *mac, u16 *vlan_id);
 
 	struct ib_dma_mapping_ops   *dma_ops;
 
@@ -1307,8 +1304,8 @@ int ib_query_device(struct ib_device *de
 int ib_query_port(struct ib_device *device,
 		  u8 port_num, struct ib_port_attr *port_attr);
 
-enum rdma_link_layer rdma_port_link_layer(struct ib_device *device,
-					  u8 port_num);
+enum rdma_link_layer rdma_port_get_link_layer(struct ib_device *device,
+					       u8 port_num);
 
 int ib_query_gid(struct ib_device *device,
 		 u8 port_num, int index, union ib_gid *gid);
@@ -2161,16 +2158,4 @@ int ib_dealloc_xrcd(struct ib_xrcd *xrcd
  */
 struct ib_xrcd *ib_alloc_xrcd(struct ib_device *device);
 
-/**
-  * ib_get_eth_l2_addr - get the mac and vlan id for the specified gid
-  * @device: IB device used for traffic
-  * @port: port number used.
-  * @gid: gid to be resolved into mac
-  * @sgid_idx: index to port's gid table for the corresponding address vector
-  * @mac: mac of the port bearing this gid
-  * @vlan_id: vlan to be used to reach this gid
-  */
-int ib_get_eth_l2_addr(struct ib_device *device, u8 port, union ib_gid *gid,
-		       int sgid_idx, u8 *mac, __u16 *vlan_id);
-
 #endif /* IB_VERBS_H */
