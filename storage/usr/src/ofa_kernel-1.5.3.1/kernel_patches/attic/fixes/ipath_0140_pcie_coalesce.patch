IB/ipath - optionally enable Intel chipset pcie coalescing for performance

Enabling pcie coalescing can significantly improve performance with
infinipath 7220 HCAs on some chipsets.   This feature does not work correctly
on all chipsets, so leave disabled by default.

Signed-off-by: Dave Olson <dave.olson@qlogic.com>

diff --git a/drivers/infiniband/hw/ipath/ipath_iba7220.c b/drivers/infiniband/hw/ipath/ipath_iba7220.c
--- a/drivers/infiniband/hw/ipath/ipath_iba7220.c
+++ b/drivers/infiniband/hw/ipath/ipath_iba7220.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2006, 2007, 2008 QLogic Corporation. All rights reserved.
+ * Copyright (c) 2006, 2007, 2008, 2009 QLogic Corporation. All rights reserved.
  * Copyright (c) 2003, 2004, 2005, 2006 PathScale, Inc. All rights reserved.
  *
  * This software is available to you under a choice of one of two
@@ -58,6 +58,11 @@
 module_param_named(fetch_arb, ipath_sdma_fetch_arb, uint, S_IRUGO);
 MODULE_PARM_DESC(fetch_arb, "IBA7220: change SDMA descriptor arbitration");
 
+static int ipath_pcie_coalesce;
+module_param_named(pcie_coalesce, ipath_pcie_coalesce, int, S_IRUGO);
+MODULE_PARM_DESC(pcie_coalesce, "tune PCIe coalescing on some Intel chipsets");
+
+
 /*
  * This file contains almost all the chip-specific register information and
  * access functions for the QLogic InfiniPath 7220 PCI-Express chip, with the
@@ -1240,6 +1245,90 @@
 	ipath_7220_nomsi(dd);
 }
 
+/*
+ * Enable PCIe completion and data coalescing, on Intel 5x00 and 7300
+ * chipsets.   This is known to be unsafe for some revisions of some
+ * of these chipsets, with some BIOS settings, and enabling it on those
+ * systems may result in the system crashing, and/or data corruption.
+ */
+static void ipath_7220_tune_pcie_coalesce(struct ipath_devdata *dd)
+{
+	int r;
+	struct pci_dev *parent;
+	int ppos;
+	u16 devid;
+	u32 mask, bits, val;
+
+	if (!ipath_pcie_coalesce)
+		return;
+
+	/* Find out supported and configured values for parent (root) */
+	parent = dd->pcidev->bus->self;
+	if (parent->bus->parent) {
+		dev_info(&dd->pcidev->dev, "Parent not root\n");
+		return;
+	}
+	ppos = pci_find_capability(parent, PCI_CAP_ID_EXP);
+	if (!ppos) {
+		ipath_dbg("parent not PCIe root complex!?\n");
+		return;
+	}
+	if (parent->vendor != 0x8086) {
+		ipath_dbg("VendorID 0x%x isn't Intel, skip\n", parent->vendor);
+		return;
+	}
+
+	/*
+	 *  - bit 12: Max_rdcmp_Imt_EN: need to set to 1
+	 *  - bit 11: COALESCE_FORCE: need to set to 0
+	 *  - bit 10: COALESCE_EN: need to set to 1
+	 *  (but limitations on some on some chipsets)
+	 *
+	 *  On the Intel 5000, 5100, and 7300 chipsets, there is
+	 *  also: - bit 25:24: COALESCE_MODE, need to set to 0
+	 *  OLSON OLSON: 10,11,12 may need to be gated by maxpayload
+	 */
+	devid = parent->device;
+	if (devid >= 0x25e2 && devid <= 0x25fa) {
+		/* 5000 P/V/X/Z */
+		u8 rev;
+		pci_read_config_byte(parent, PCI_REVISION_ID, &rev);
+		if (rev <= 0xb2) {
+			bits = 1U << 10;
+			ipath_dbg("Old rev 5000* (0x%x), enable-only\n", rev);
+		} else
+			bits = 7U << 10;
+		mask = (3U << 24) | (7U << 10);
+	} else if (devid >= 0x65e2 && devid <= 0x65fa) {
+		/* 5100 */
+		bits = 1U << 10;
+		mask = (3U << 24) | (7U << 10);
+	} else if (devid >= 0x4021 && devid <= 0x402e) {
+		/* 5400 */
+		bits = 7U << 10;
+		mask = 7U << 10;
+	} else if (devid >= 0x3604 && devid <= 0x360a) {
+		/* 7300 */
+		bits = 7U << 10;
+		mask = (3U << 24) | (7U << 10);
+	} else {
+		/* not one of the chipsets that we know about */
+		ipath_dbg("DeviceID 0x%x isn't one we know, skip\n", devid);
+		return;
+	}
+	pci_read_config_dword(parent, 0x48, &val);
+	ipath_dbg("Read initial value 0x%x at 0x48, deviceid 0x%x\n",
+		val, devid);
+	val &= ~mask;
+	val |= bits;
+	r = pci_write_config_dword(parent, 0x48, val);
+	if (r)
+		ipath_dev_err(dd, "Unable to update deviceid 0x%x to val 0x%x"
+				" for PCIe coalescing\n", devid, val);
+	else
+		dev_info(&dd->pcidev->dev, "Updated deviceid 0x%x to val 0x%x"
+				" for PCIe coalescing\n", devid, val);
+}
 
 static void ipath_7220_pcie_params(struct ipath_devdata *dd, u32 boardrev)
 {
@@ -1299,6 +1389,8 @@
 			"PCIe linkspeed %u is incorrect; "
 			"should be 1 (2500)!\n", speed);
 
+	ipath_7220_tune_pcie_coalesce(dd);
+
 bail:
 	/* fill in string, even on errors */
 	snprintf(dd->ipath_lbus_info, sizeof(dd->ipath_lbus_info),
