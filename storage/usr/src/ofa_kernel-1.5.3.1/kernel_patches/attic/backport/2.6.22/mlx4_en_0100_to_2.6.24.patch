From 6d0a6cc6981404e95297924c9a8f169b3447a98e Mon Sep 17 00:00:00 2001
From: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
Date: Thu, 2 Oct 2008 11:26:30 +0300
Subject: [PATCH] mlx4_en: LRO backport patch

Signed-off-by: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
---
 drivers/net/mlx4/Makefile    |    2 +-
 drivers/net/mlx4/en_cq.c     |   23 ++-
 drivers/net/mlx4/en_lro.c    |  529 ++++++++++++++++++++++++++++++++++++++++++
 drivers/net/mlx4/en_netdev.c |    5 +-
 drivers/net/mlx4/en_params.c |   19 +--
 drivers/net/mlx4/en_rx.c     |  121 +++-------
 drivers/net/mlx4/en_tx.c     |    2 +
 drivers/net/mlx4/mlx4_en.h   |   60 +++++-
 8 files changed, 647 insertions(+), 114 deletions(-)
 create mode 100644 drivers/net/mlx4/en_lro.c

diff --git a/drivers/net/mlx4/Makefile b/drivers/net/mlx4/Makefile
index acb1b91..e6bfdec 100644
--- a/drivers/net/mlx4/Makefile
+++ b/drivers/net/mlx4/Makefile
@@ -5,4 +5,4 @@ mlx4_core-y :=  alloc.o catas.o cmd.o cq.o eq.o fw.o icm.o intf.o main.o mcg.o \

 obj-$(CONFIG_MLX4_EN)                  += mlx4_en.o

-mlx4_en-y := en_main.o en_tx.o en_rx.o en_params.o en_port.o en_cq.o en_resources.o en_netdev.o en_frag.o
+mlx4_en-y := en_main.o en_tx.o en_rx.o en_params.o en_port.o en_cq.o en_resources.o en_netdev.o en_frag.o en_lro.o
diff --git a/drivers/net/mlx4/en_cq.c b/drivers/net/mlx4/en_cq.c
index cf9c5df..2348bfc 100644
--- a/drivers/net/mlx4/en_cq.c
+++ b/drivers/net/mlx4/en_cq.c
@@ -34,6 +34,7 @@
 #include <linux/mlx4/cq.h>
 #include <linux/mlx4/qp.h>
 #include <linux/mlx4/cmd.h>
+#include <linux/delay.h>
 
 #include "mlx4_en.h"
 
@@ -100,8 +101,17 @@ int mlx4_en_activate_cq(struct mlx4_en_priv *priv, struct mlx4_en_cq *cq)
 		cq->timer.function = mlx4_en_poll_tx_cq;
 		cq->timer.data = (unsigned long) cq;
 	} else {
-		netif_napi_add(cq->dev, &cq->napi, mlx4_en_poll_rx_cq, 64);
-		napi_enable(&cq->napi);
+		char name[IFNAMSIZ];
+
+		snprintf(name, IFNAMSIZ, "mlx4_en-%d-%d", priv->port, cq->ring);
+		cq->poll_dev = alloc_netdev(0, name, ether_setup);
+		if (!cq->poll_dev)
+			return -ENOMEM;
+
+		cq->poll_dev->priv = cq;
+		cq->poll_dev->weight = 64;
+		cq->poll_dev->poll = mlx4_en_poll_rx_cq;
+		set_bit(__LINK_STATE_START, &cq->poll_dev->state);
 	}
 
 	return 0;
@@ -123,8 +133,13 @@ void mlx4_en_deactivate_cq(struct mlx4_en_priv *priv, struct mlx4_en_cq *cq)
 
 	if (cq->is_tx)
 		del_timer(&cq->timer);
-	else
-		napi_disable(&cq->napi);
+	else {
+		while (test_bit(__LINK_STATE_RX_SCHED,
+				&cq->poll_dev->state))
+			msleep(1);
+		free_netdev(cq->poll_dev);
+		cq->poll_dev = NULL;
+	}
 
 	mlx4_cq_free(mdev->dev, &cq->mcq);
 }
diff --git a/drivers/net/mlx4/en_lro.c b/drivers/net/mlx4/en_lro.c
new file mode 100644
index 0000000..9d17376
--- /dev/null
+++ b/drivers/net/mlx4/en_lro.c
@@ -0,0 +1,533 @@
+/*
+ * Copyright (c) 2007 Mellanox Technologies. All rights reserved.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ */
+
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <net/tcp.h>
+#include <linux/if_vlan.h>
+#include <linux/delay.h>
+
+#include "mlx4_en.h"
+
+/* LRO hash function - using sum of source and destination port LSBs is
+ * good enough */
+#define LRO_INDEX(th, size) \
+	((*((u8*) &th->source + 1) + *((u8*) &th->dest + 1)) & (size - 1))
+
+/* #define CONFIG_MLX4_EN_DEBUG_LRO */
+
+#ifdef CONFIG_MLX4_EN_DEBUG_LRO
+static void mlx4_en_lro_validate(struct mlx4_en_priv* priv, struct mlx4_en_lro *lro)
+{
+	int i;
+	int size, size2;
+	struct sk_buff *skb = lro->skb;
+	skb_frag_t *frags;
+	int len, len2;
+	int cur_skb = 0;
+
+	/* Sum fragment sizes of first skb */
+	len = skb->len;
+	size = skb_headlen(skb);
+	frags = skb_shinfo(skb)->frags;
+	for (i = 0; i < skb_shinfo(skb)->nr_frags; i++) {
+		size += frags[i].size;
+	}
+
+	/* Add in fragments of linked skb's */
+	skb = skb_shinfo(skb)->frag_list;
+	while (skb) {
+		cur_skb++;
+		len2 = skb->len;
+		if (skb_headlen(skb)) {
+			mlx4_err(priv->mdev, "Bad LRO format: non-zero headlen "
+				  "in fraglist (skb:%d)\n", cur_skb);
+			return;
+		}
+
+		size2 = 0;
+		frags = skb_shinfo(skb)->frags;
+		for (i = 0; i < skb_shinfo(skb)->nr_frags; i++) {
+			size2 += frags[i].size;
+		}
+
+		if (size2 != len2) {
+			mlx4_err(priv->mdev, "Bad skb size:%d in LRO fraglist. "
+			          "Expected:%d (skb:%d)\n", size2, len2, cur_skb);
+			return;
+		}
+		size += size2;
+		skb = skb->next;
+	}
+
+	if (size != len)
+		mlx4_err(priv->mdev, "Bad LRO size:%d expected:%d\n", size, len);
+}
+#endif /* MLX4_EN_DEBUG_LRO */
+
+static void mlx4_en_lro_flush_single(struct mlx4_en_priv* priv,
+		   struct mlx4_en_rx_ring* ring, struct mlx4_en_lro *lro)
+{
+	struct sk_buff *skb = lro->skb;
+	struct iphdr *iph = (struct iphdr *) skb->data;
+	struct tcphdr *th = (struct tcphdr *)(iph + 1);
+	unsigned int headlen = skb_headlen(skb);
+	__wsum tcp_hdr_csum;
+	u32 *ts;
+
+	/* Update IP length and checksum */
+	iph->tot_len = htons(lro->tot_len);
+	iph->check = 0;
+	iph->check = ip_fast_csum((unsigned char *)iph, iph->ihl);
+
+	/* Update latest TCP ack, window, psh, and timestamp */
+	th->ack_seq = lro->ack_seq;
+	th->window = lro->window;
+	th->psh = !!lro->psh;
+	if (lro->has_timestamp) {
+		ts = (u32 *) (th + 1);
+		ts[1] = htonl(lro->tsval);
+		ts[2] = lro->tsecr;
+	}
+	th->check = 0;
+	tcp_hdr_csum = csum_partial((u8 *)th, th->doff << 2, 0);
+	lro->data_csum = csum_add(lro->data_csum, tcp_hdr_csum);
+	th->check = csum_tcpudp_magic(iph->saddr, iph->daddr,
+				      lro->tot_len - (iph->ihl << 2),
+				      IPPROTO_TCP, lro->data_csum);
+
+	/* Update skb */
+	skb->len = lro->tot_len;
+	skb->data_len = lro->tot_len - headlen;
+	skb->truesize = skb->len + sizeof(struct sk_buff);
+	skb_shinfo(skb)->gso_size = lro->mss;
+
+#ifdef CONFIG_MLX4_EN_DEBUG_LRO
+	mlx4_en_lro_validate(priv, lro);
+#endif /* CONFIG_MLX4_EN_DEBUG_LRO */
+
+	/* Push it up the stack */
+	if (priv->vlgrp && lro->has_vlan)
+		vlan_hwaccel_receive_skb(skb, priv->vlgrp,
+					be16_to_cpu(lro->vlan_prio));
+	else
+		netif_receive_skb(skb);
+	priv->dev->last_rx = jiffies;
+
+	/* Increment stats */
+	priv->port_stats.lro_flushed++;
+
+	/* Move session back to the free list */
+	hlist_del(&lro->node);
+	hlist_del(&lro->flush_node);
+	hlist_add_head(&lro->node, &ring->lro_free);
+}
+
+void mlx4_en_lro_flush(struct mlx4_en_priv* priv, struct mlx4_en_rx_ring *ring, u8 all)
+{
+	struct mlx4_en_lro *lro;
+	struct hlist_node *node, *tmp;
+
+	hlist_for_each_entry_safe(lro, node, tmp, &ring->lro_flush, flush_node) {
+		if (all || time_after(jiffies, lro->expires))
+			mlx4_en_lro_flush_single(priv, ring, lro);
+	}
+}
+
+static inline int mlx4_en_lro_append(struct mlx4_en_priv *priv,
+				   struct mlx4_en_lro *lro,
+				   struct mlx4_en_rx_desc *rx_desc,
+				   struct skb_frag_struct *skb_frags,
+				   struct mlx4_en_rx_alloc *page_alloc,
+				   unsigned int data_len,
+				   int hlen)
+{
+	struct sk_buff *skb = lro->skb_last;
+	struct skb_shared_info *info;
+	struct skb_frag_struct *frags_copy;
+	int nr_frags;
+
+	if (skb_shinfo(skb)->nr_frags + priv->num_frags > MAX_SKB_FRAGS)
+		return -ENOMEM;
+
+	info = skb_shinfo(skb);
+
+	/* Copy fragments from descriptor ring to skb */
+	frags_copy = info->frags + info->nr_frags;
+	nr_frags = mlx4_en_complete_rx_desc(priv, rx_desc, skb_frags,
+						frags_copy,
+						page_alloc,
+						data_len + hlen);
+	if (!nr_frags) {
+		mlx4_dbg(DRV, priv, "Failed completing rx desc during LRO append\n");
+		return -ENOMEM;
+	}
+
+	/* Skip over headers */
+	frags_copy[0].page_offset += hlen;
+
+	if (nr_frags == 1)
+		frags_copy[0].size = data_len;
+	else {
+		/* Adjust size of last fragment to match packet length.
+		 * Note: if this fragment is also the first one, the
+		 *       operation is completed in the next line */
+		frags_copy[nr_frags - 1].size = hlen + data_len -
+				priv->frag_info[nr_frags - 1].frag_prefix_size;
+
+		/* Adjust size of first fragment */
+		frags_copy[0].size -= hlen;
+	}
+
+	/* Update skb bookkeeping */
+	skb->len += data_len;
+	skb->data_len += data_len;
+	info->nr_frags += nr_frags;
+	return 0;
+}
+
+static inline struct mlx4_en_lro *mlx4_en_lro_find_session(struct mlx4_en_dev *mdev,
+						       struct mlx4_en_rx_ring *ring,
+						       struct iphdr *iph,
+						       struct tcphdr *th)
+{
+	struct mlx4_en_lro *lro;
+	struct hlist_node *node;
+	int index = LRO_INDEX(th, mdev->profile.num_lro);
+	struct hlist_head *list = &ring->lro_hash[index];
+
+	hlist_for_each_entry(lro, node, list, node) {
+		if (lro->sport_dport == *((u32*) &th->source) &&
+		    lro->saddr == iph->saddr &&
+		    lro->daddr == iph->daddr)
+			return lro;
+	}
+	return NULL;
+}
+
+static inline struct mlx4_en_lro *mlx4_en_lro_alloc_session(struct mlx4_en_priv *priv,
+							struct mlx4_en_rx_ring *ring)
+{
+	return hlist_empty(&ring->lro_free) ? NULL :
+		hlist_entry(ring->lro_free.first, struct mlx4_en_lro, node);
+}
+
+static __wsum mlx4_en_lro_tcp_data_csum(struct iphdr *iph,
+					struct tcphdr *th, int len)
+{
+	__wsum tcp_csum;
+	__wsum tcp_hdr_csum;
+	__wsum tcp_ps_hdr_csum;
+
+	tcp_csum = ~csum_unfold(th->check);
+	tcp_hdr_csum = csum_partial((u8 *)th, th->doff << 2, tcp_csum);
+
+	tcp_ps_hdr_csum = csum_tcpudp_nofold(iph->saddr, iph->daddr,
+					     len + (th->doff << 2),
+					     IPPROTO_TCP, 0);
+
+	return csum_sub(csum_sub(tcp_csum, tcp_hdr_csum),
+			tcp_ps_hdr_csum);
+}
+
+int mlx4_en_lro_rx(struct mlx4_en_priv *priv, struct mlx4_en_rx_ring *ring,
+					  struct mlx4_en_rx_desc *rx_desc,
+					  struct skb_frag_struct *skb_frags,
+					  unsigned int length,
+					  struct mlx4_cqe *cqe)
+{
+	struct mlx4_en_dev *mdev = priv->mdev;
+	struct mlx4_en_lro *lro;
+	struct sk_buff *skb;
+	struct iphdr *iph;
+	struct tcphdr *th;
+	dma_addr_t dma;
+	int tcp_hlen;
+	int tcp_data_len;
+	int hlen;
+	u16 ip_len;
+	void *va;
+	u32 *ts;
+	u32 seq;
+	u32 tsval = (u32) ~0UL;
+	u32 tsecr = 0;
+	u32 ack_seq;
+	u16 window;
+
+	/* This packet is eligible for LRO if it is:
+	 * - DIX Ethernet (type interpretation)
+	 * - TCP/IP (v4)
+	 * - without IP options
+	 * - not an IP fragment */
+	if (!mlx4_en_can_lro(cqe->status))
+			return -1;
+
+	/* Get pointer to TCP header. We already know that the packet is DIX Ethernet/IPv4/TCP
+	 * with no VLAN (HW stripped it) and no IP options */
+	va = page_address(skb_frags[0].page) + skb_frags[0].page_offset;
+	iph = va + ETH_HLEN;
+	th = (struct tcphdr *)(iph + 1);
+
+	/* Synchronsize headers for processing */
+	dma = be64_to_cpu(rx_desc->data[0].addr);
+#define MAX_LRO_HEADER		(ETH_HLEN + \
+				 sizeof(*iph) + \
+				 sizeof(*th) + \
+				 TCPOLEN_TSTAMP_ALIGNED)
+	dma_sync_single_range_for_cpu(&mdev->pdev->dev, dma, 0,
+				      MAX_LRO_HEADER, DMA_FROM_DEVICE);
+
+	/* We only handle aligned timestamp options */
+	tcp_hlen = (th->doff << 2);
+	if (tcp_hlen == sizeof(*th) + TCPOLEN_TSTAMP_ALIGNED) {
+		ts = (u32*) (th + 1);
+		if (unlikely(*ts != htonl((TCPOPT_NOP << 24) |
+					  (TCPOPT_NOP << 16) |
+					  (TCPOPT_TIMESTAMP << 8) |
+					  TCPOLEN_TIMESTAMP)))
+			goto sync_device;
+		tsval = ntohl(ts[1]);
+		tsecr = ts[2];
+	} else if (tcp_hlen != sizeof(*th))
+		goto sync_device;
+	
+
+	/* At this point we know we have a TCP packet that is likely to be
+	 * eligible for LRO. Therefore, see now if we have an oustanding
+	 * session that corresponds to this packet so we could flush it if
+	 * something still prevents LRO */
+	lro = mlx4_en_lro_find_session(mdev, ring, iph, th);
+
+	/* ensure no bits set besides ack or psh */
+	if (th->fin || th->syn || th->rst || th->urg || th->ece ||
+	    th->cwr || !th->ack) {
+		if (lro) {
+			/* First flush session to keep packets in-order */
+			mlx4_en_lro_flush_single(priv, ring, lro);
+		}
+		goto sync_device;
+	}
+
+	/* Get ip length and verify that the frame is big enough */
+	ip_len = ntohs(iph->tot_len);
+	if (unlikely(length < ETH_HLEN + ip_len)) {
+		mlx4_warn(mdev, "Cannot LRO - ip payload exceeds frame!\n");
+		goto sync_device;
+	}
+
+	/* Get TCP payload length */
+	tcp_data_len = ip_len - tcp_hlen - sizeof(struct iphdr);
+	seq = ntohl(th->seq);
+	if (!tcp_data_len)
+		goto flush_session;
+
+	if (lro) {
+		/* Check VLAN tag */
+		if (cqe->vlan_my_qpn & MLX4_CQE_VLAN_PRESENT_MASK) {
+			if (cqe->sl_vid != lro->vlan_prio || !lro->has_vlan) {
+				mlx4_en_lro_flush_single(priv, ring, lro);
+				goto sync_device;
+			}
+		} else if (lro->has_vlan) {
+			mlx4_en_lro_flush_single(priv, ring, lro);
+			goto sync_device;
+		}
+
+		/* Check sequence number */
+		if (unlikely(seq != lro->next_seq)) {
+			mlx4_en_lro_flush_single(priv, ring, lro);
+			goto sync_device;
+		}
+
+		/* If the cummulative IP length is over 64K, flush and start
+		 * a new session */
+		if (lro->tot_len + tcp_data_len > 0xffff) {
+			mlx4_en_lro_flush_single(priv, ring, lro);
+			goto new_session;
+		}
+
+		/* Check timestamps */
+		if (tcp_hlen != sizeof(*th)) {
+			if (unlikely(lro->tsval > tsval || !tsecr))
+				goto sync_device;
+		}
+
+		window = th->window;
+		ack_seq = th->ack_seq;
+		if (likely(tcp_data_len)) {
+			/* Append the data! */
+			hlen = ETH_HLEN + sizeof(struct iphdr) + tcp_hlen;
+			if (mlx4_en_lro_append(priv, lro, rx_desc, skb_frags,
+							ring->page_alloc,
+							tcp_data_len, hlen)) {
+				mlx4_en_lro_flush_single(priv, ring, lro);
+				goto sync_device;
+			}
+		} else {
+			/* No data */
+			dma_sync_single_range_for_device(&mdev->dev->pdev->dev, dma,
+							 0, MAX_LRO_HEADER,
+							 DMA_FROM_DEVICE);
+		}
+
+		/* Update session */
+		lro->psh |= th->psh;
+		lro->next_seq += tcp_data_len;
+		lro->data_csum = csum_block_add(lro->data_csum,
+					mlx4_en_lro_tcp_data_csum(iph, th,
+								  tcp_data_len),
+					lro->tot_len);
+		lro->tot_len += tcp_data_len;
+		lro->tsval = tsval;
+		lro->tsecr = tsecr;
+		lro->ack_seq = ack_seq;
+		lro->window = window;
+		if (tcp_data_len > lro->mss)
+			lro->mss = tcp_data_len;
+		priv->port_stats.lro_aggregated++;
+		if (th->psh)
+			mlx4_en_lro_flush_single(priv, ring, lro);
+		return 0;
+	}
+
+new_session:
+	if (th->psh)
+		goto sync_device;
+	lro = mlx4_en_lro_alloc_session(priv, ring);
+	if (lro) {
+		skb = mlx4_en_rx_skb(priv, rx_desc, skb_frags, ring->page_alloc,
+							     ETH_HLEN + ip_len);
+		if (skb) {
+			int index;
+
+			/* Add in the skb */
+			lro->skb = skb;
+			lro->skb_last = skb;
+			skb->protocol = eth_type_trans(skb, priv->dev);
+			skb->ip_summed = CHECKSUM_UNNECESSARY;
+
+			/* Initialize session */
+			lro->saddr = iph->saddr;
+			lro->daddr = iph->daddr;
+			lro->sport_dport = *((u32*) &th->source);
+
+			lro->next_seq = seq + tcp_data_len;
+			lro->tot_len = ip_len;
+			lro->psh = th->psh;
+			lro->ack_seq = th->ack_seq;
+			lro->window = th->window;
+			lro->mss = tcp_data_len;
+			lro->data_csum = mlx4_en_lro_tcp_data_csum(iph, th,
+						tcp_data_len);
+
+			/* Handle vlans */
+			if (cqe->vlan_my_qpn & MLX4_CQE_VLAN_PRESENT_MASK) {
+				lro->vlan_prio = cqe->sl_vid;
+				lro->has_vlan = 1;
+			} else
+				lro->has_vlan = 0;
+
+			/* Handle timestamps */
+			if (tcp_hlen != sizeof(*th)) {
+				lro->tsval = tsval;
+				lro->tsecr = tsecr;
+				lro->has_timestamp = 1;
+			} else {
+				lro->tsval = (u32) ~0UL;
+				lro->has_timestamp = 0;
+			}
+
+			/* Activate this session */
+			lro->expires = jiffies + HZ / 25;
+			hlist_del(&lro->node);
+			index = LRO_INDEX(th, mdev->profile.num_lro);
+
+			hlist_add_head(&lro->node, &ring->lro_hash[index]);
+			hlist_add_head(&lro->flush_node, &ring->lro_flush);
+			priv->port_stats.lro_aggregated++;
+			return 0;
+		}
+	} else {
+		priv->port_stats.lro_no_desc++;
+	}
+
+flush_session:
+	if (lro)
+		mlx4_en_lro_flush_single(priv, ring, lro);
+sync_device:
+	dma_sync_single_range_for_device(&mdev->pdev->dev, dma, 0,
+					 MAX_LRO_HEADER, DMA_FROM_DEVICE);
+	return -1;
+}
+
+void mlx4_en_lro_destroy(struct mlx4_en_rx_ring *ring)
+{
+	struct mlx4_en_lro *lro;
+	struct hlist_node *node, *tmp;
+
+	hlist_for_each_entry_safe(lro, node, tmp, &ring->lro_free, node) {
+		hlist_del(&lro->node);
+		kfree(lro);
+	}
+	kfree(ring->lro_hash);
+}
+
+int mlx4_en_lro_init(struct mlx4_en_rx_ring *ring, int num_lro)
+{
+	struct mlx4_en_lro *lro;
+	int i;
+
+	INIT_HLIST_HEAD(&ring->lro_free);
+	INIT_HLIST_HEAD(&ring->lro_flush);
+	ring->lro_hash = kmalloc(sizeof(struct hlist_head) * num_lro,
+				 GFP_KERNEL);
+	if (!ring->lro_hash)
+		return -ENOMEM;
+
+	for (i = 0; i < num_lro; i++) {
+		INIT_HLIST_HEAD(&ring->lro_hash[i]);
+		lro = kzalloc(sizeof(struct mlx4_en_lro), GFP_KERNEL);
+		if (!lro) {
+			mlx4_en_lro_destroy(ring);
+			return -ENOMEM;
+		}
+		INIT_HLIST_NODE(&lro->node);
+		INIT_HLIST_NODE(&lro->flush_node);
+		hlist_add_head(&lro->node, &ring->lro_free);
+	}
+	return 0;
+}
+
+
diff --git a/drivers/net/mlx4/en_netdev.c b/drivers/net/mlx4/en_netdev.c
index 6199f4c..92f91d2 100644
--- a/drivers/net/mlx4/en_netdev.c
+++ b/drivers/net/mlx4/en_netdev.c
@@ -333,7 +333,8 @@ void mlx4_en_netpoll(struct net_device *dev)
 	for (i = 0; i < priv->rx_ring_num; i++) {
 		cq = &priv->rx_cq[i];
 		spin_lock_irqsave(&cq->lock, flags);
-		napi_synchronize(&cq->napi);
+		while (test_bit(__LINK_STATE_RX_SCHED, &cq->poll_dev->state))
+			msleep(1);
 		if (priv->rx_ring[i].use_frags)
 			mlx4_en_process_rx_cq(dev, cq, 0);
 		else
@@ -757,8 +758,6 @@ void mlx4_en_stop_port(struct net_device *dev)
 	/* Free RX Rings */
 	for (i = 0; i < priv->rx_ring_num; i++) {
 		mlx4_en_deactivate_rx_ring(priv, &priv->rx_ring[i]);
-		while (test_bit(NAPI_STATE_SCHED, &priv->rx_cq[i].napi.state))
-			msleep(1);
 		mlx4_en_deactivate_cq(priv, &priv->rx_cq[i]);
 	}
 }
diff --git a/drivers/net/mlx4/en_params.c b/drivers/net/mlx4/en_params.c
index 6e96d0a..2b0ca84 100644
--- a/drivers/net/mlx4/en_params.c
+++ b/drivers/net/mlx4/en_params.c
@@ -142,21 +142,6 @@ int mlx4_en_get_profile(struct mlx4_en_dev *mdev)
  * Ethtool support
  */
 
-static void mlx4_en_update_lro_stats(struct mlx4_en_priv *priv)
-{
-	int i;
-
-	priv->port_stats.lro_aggregated = 0;
-	priv->port_stats.lro_flushed = 0;
-	priv->port_stats.lro_no_desc = 0;
-
-	for (i = 0; i < priv->rx_ring_num; i++) {
-		priv->port_stats.lro_aggregated += priv->rx_ring[i].lro.stats.aggregated;
-		priv->port_stats.lro_flushed += priv->rx_ring[i].lro.stats.flushed;
-		priv->port_stats.lro_no_desc += priv->rx_ring[i].lro.stats.no_desc;
-	}
-}
-
 static void
 mlx4_en_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
 {
@@ -266,8 +251,6 @@ static void mlx4_en_get_ethtool_stats(struct net_device *dev,
 
 	spin_lock_bh(&priv->stats_lock);
 
-	mlx4_en_update_lro_stats(priv);
-
 	for (i = 0; i < NUM_MAIN_STATS; i++)
 		data[index++] = ((unsigned long *) &priv->stats)[i];
 	for (i = 0; i < NUM_PORT_STATS; i++)
@@ -457,7 +440,7 @@ const struct ethtool_ops mlx4_en_ethtool_ops = {
 	.get_rx_csum = mlx4_en_get_rx_csum,
 	.set_rx_csum = mlx4_en_set_rx_csum,
 	.get_tx_csum = ethtool_op_get_tx_csum,
-	.set_tx_csum = ethtool_op_set_tx_ipv6_csum,
+	.set_tx_csum = ethtool_op_set_tx_csum,
 	.get_strings = mlx4_en_get_strings,
 	.get_sset_count = mlx4_en_get_sset_count,
 	.get_ethtool_stats = mlx4_en_get_ethtool_stats,
diff --git a/drivers/net/mlx4/en_rx.c b/drivers/net/mlx4/en_rx.c
index 5a95d74..16f07bc 100644
--- a/drivers/net/mlx4/en_rx.c
+++ b/drivers/net/mlx4/en_rx.c
@@ -37,6 +37,7 @@
 #include <linux/if_ether.h>
 #include <linux/if_vlan.h>
 #include <linux/vmalloc.h>
+#include <linux/etherdevice.h>
 
 #include "mlx4_en.h"
 
@@ -51,18 +52,6 @@ static void mlx4_en_srq_event(struct mlx
 	return;
 }
 
-static int mlx4_en_get_frag_header(struct skb_frag_struct *frags, void **mac_hdr,
-				   void **ip_hdr, void **tcpudp_hdr,
-				   u64 *hdr_flags, void *priv)
-{
-	*mac_hdr = page_address(frags->page) + frags->page_offset;
-	*ip_hdr = *mac_hdr + ETH_HLEN;
-	*tcpudp_hdr = (struct tcphdr *)(*ip_hdr + sizeof(struct iphdr));
-	*hdr_flags = LRO_IPV4 | LRO_TCP;
-
-	return 0;
-}
-
 static int mlx4_en_alloc_frag(struct mlx4_en_priv *priv,
 			      struct mlx4_en_rx_desc *rx_desc,
 			      struct skb_frag_struct *skb_frags,
@@ -372,23 +361,11 @@ int mlx4_en_create_rx_ring(struct mlx4_en_priv *priv,
 	}
 	ring->buf = ring->wqres.buf.direct.buf;
 
-	/* Configure lro mngr */
-	memset(&ring->lro, 0, sizeof(struct net_lro_mgr));
-	ring->lro.dev = priv->dev;
-	ring->lro.features = LRO_F_NAPI;
-	ring->lro.frag_align_pad = NET_IP_ALIGN;
-	ring->lro.ip_summed = CHECKSUM_UNNECESSARY;
-	ring->lro.ip_summed_aggr = CHECKSUM_UNNECESSARY;
-	ring->lro.max_desc = mdev->profile.num_lro;
-	ring->lro.max_aggr = MAX_SKB_FRAGS;
-	ring->lro.lro_arr = kzalloc(mdev->profile.num_lro *
-				    sizeof(struct net_lro_desc),
-				    GFP_KERNEL);
-	if (!ring->lro.lro_arr) {
-		mlx4_err(mdev, "Failed to allocate lro array\n");
+	/* Allocate LRO sessions */
+	if (mdev->profile.num_lro && mlx4_en_lro_init(ring, mdev->profile.num_lro)) {
+		mlx4_err(mdev, "Failed allocating lro sessions\n");
 		goto err_map;
 	}
-	ring->lro.get_frag_header = mlx4_en_get_frag_header;
 
 	return 0;
 
@@ -501,7 +478,8 @@ void mlx4_en_destroy_rx_ring(struct mlx4_en_priv *priv,
 {
 	struct mlx4_en_dev *mdev = priv->mdev;
 
-	kfree(ring->lro.lro_arr);
+	if (mdev->profile.num_lro)
+		mlx4_en_lro_destroy(ring);
 	mlx4_en_unmap_buffer(&ring->wqres.buf);
 	mlx4_free_hwq_res(mdev->dev, &ring->wqres, ring->buf_size);
 	vfree(ring->rx_info);
@@ -663,11 +640,9 @@ int mlx4_en_process_rx_cq(struct net_device *dev, struct mlx4_en_cq *cq, int bud
 	struct mlx4_cqe *cqe;
 	struct mlx4_en_rx_ring *ring = &priv->rx_ring[cq->ring];
 	struct skb_frag_struct *skb_frags;
-	struct skb_frag_struct lro_frags[MLX4_EN_MAX_RX_FRAGS];
 	struct mlx4_en_rx_desc *rx_desc;
 	struct sk_buff *skb;
 	int index;
-	int nr;
 	unsigned int length;
 	int polled = 0;
 	int ip_summed;
@@ -718,38 +693,10 @@ int mlx4_en_process_rx_cq(struct net_device *dev, struct mlx4_en_cq *cq, int bud
 			if ((cqe->status & cpu_to_be16(MLX4_CQE_STATUS_IPOK)) &&
 			    (cqe->checksum == 0xffff)) {
 				priv->port_stats.rx_chksum_good++;
-				/* This packet is eligible for LRO if it is:
-				 * - DIX Ethernet (type interpretation)
-				 * - TCP/IP (v4)
-				 * - without IP options
-				 * - not an IP fragment */
-				if (mlx4_en_can_lro(cqe->status) &&
-				    dev->features & NETIF_F_LRO) {
-
-					nr = mlx4_en_complete_rx_desc(
-						priv, rx_desc,
-						skb_frags, lro_frags,
-						ring->page_alloc, length);
-					if (!nr)
-						goto next;
-
-					if (priv->vlgrp && (cqe->vlan_my_qpn &
-						MLX4_CQE_VLAN_PRESENT_MASK)) {
-						lro_vlan_hwaccel_receive_frags(
-						       &ring->lro, lro_frags,
-						       length, length,
-						       priv->vlgrp,
-						       be16_to_cpu(cqe->sl_vid),
-						       NULL, 0);
-					} else
-						lro_receive_frags(&ring->lro,
-								  lro_frags,
-								  length,
-								  length,
-								  NULL, 0);
-
+				if (mdev->profile.num_lro &&
+				    !mlx4_en_lro_rx(priv, ring, rx_desc,
+						    skb_frags, length, cqe))
 					goto next;
-				}
 
 				/* LRO not possible, complete processing here */
 				ip_summed = CHECKSUM_UNNECESSARY;
@@ -790,13 +737,15 @@ next:
 		if (++polled == budget) {
 			/* We are here because we reached the NAPI budget -
 			 * flush only pending LRO sessions */
-			lro_flush_all(&ring->lro);
+			if (mdev->profile.num_lro)
+				mlx4_en_lro_flush(priv, ring, 0);
 			goto out;
 		}
 	}
 
 	/* If CQ is empty flush all LRO sessions unconditionally */
-	lro_flush_all(&ring->lro);
+	if (mdev->profile.num_lro)
+		mlx4_en_lro_flush(priv, ring, 1);
 
 out:
 	AVG_PERF_COUNTER(priv->pstats.rx_coal_avg, polled);
@@ -820,33 +769,37 @@ void mlx4_en_rx_irq(struct mlx4_cq *mcq)
 	struct mlx4_en_priv *priv = netdev_priv(cq->dev);
 
 	if (priv->port_up)
-		netif_rx_schedule(cq->dev, &cq->napi);
+		netif_rx_schedule(cq->poll_dev);
 	else
 		mlx4_en_arm_cq(priv, cq);
 }
 
 /* Rx CQ polling - called by NAPI */
-int mlx4_en_poll_rx_cq(struct napi_struct *napi, int budget)
+int mlx4_en_poll_rx_cq(struct net_device *poll_dev, int *budget)
 {
-	struct mlx4_en_cq *cq = container_of(napi, struct mlx4_en_cq, napi);
+	struct mlx4_en_cq *cq = poll_dev->priv;
 	struct net_device *dev = cq->dev;
 	struct mlx4_en_priv *priv = netdev_priv(dev);
 	int done;
+	int work = min(*budget, poll_dev->quota);

 	if (priv->rx_ring[cq->ring].use_frags)
-		done = mlx4_en_process_rx_cq(dev, cq, budget);
+		done = mlx4_en_process_rx_cq(dev, cq, work);
 	else
-		done = mlx4_en_process_rx_cq_skb(dev, cq, budget);
+		done = mlx4_en_process_rx_cq_skb(dev, cq, work);
+	dev->quota -= done;
+	*budget -= done;
 
 	/* If we used up all the quota - we're probably not done yet... */
-	if (done == budget)
+	if (done == work) {
 		INC_PERF_COUNTER(priv->pstats.napi_quota);
-	else {
-		/* Done for now */
-		netif_rx_complete(dev, napi);
-		mlx4_en_arm_cq(priv, cq);
+		return 1;
 	}
-	return done;
+
+        /* Done for now */
+	netif_rx_complete(poll_dev);
+	mlx4_en_arm_cq(priv, cq);
+	return 0;
 }
 
 
diff --git a/drivers/net/mlx4/en_tx.c b/drivers/net/mlx4/en_tx.c
index 2297fec..59f8772 100644
--- a/drivers/net/mlx4/en_tx.c
+++ b/drivers/net/mlx4/en_tx.c
@@ -37,6 +37,8 @@
 #include <linux/skbuff.h>
 #include <linux/if_vlan.h>
 #include <linux/vmalloc.h>
+#include <linux/tcp.h>
+#include <linux/ip.h>
 
 #include "mlx4_en.h"
 
diff --git a/drivers/net/mlx4/mlx4_en.h b/drivers/net/mlx4/mlx4_en.h
index 1011803..7c8c489 100644
--- a/drivers/net/mlx4/mlx4_en.h
+++ b/drivers/net/mlx4/mlx4_en.h
@@ -38,7 +38,7 @@
 #include <linux/list.h>
 #include <linux/mutex.h>
 #include <linux/netdevice.h>
-#include <linux/inet_lro.h>
+#include <net/checksum.h>
 
 #include <linux/mlx4/device.h>
 #include <linux/mlx4/qp.h>
@@ -268,11 +268,42 @@ struct mlx4_en_rx_desc {
 	struct mlx4_wqe_data_seg data[0];
 };
 
+struct mlx4_en_lro {
+	struct hlist_node node;
+	struct hlist_node flush_node;
+
+	/* Id fields come first: */
+	u32 saddr;
+	u32 daddr;
+	u32 sport_dport;
+	u32 next_seq;
+	u16 tot_len;
+	u8 psh;
+
+	u32 tsval;
+	u32 tsecr;
+	u32 ack_seq;
+	u16 window;
+	__be16 vlan_prio;
+	u16 has_vlan;
+	u16 has_timestamp;
+	u16 mss;
+	__wsum  data_csum;
+
+	unsigned long expires;
+	struct sk_buff *skb;
+	struct sk_buff *skb_last;
+};
+
+
 struct mlx4_en_rx_ring {
 	struct mlx4_srq srq;
 	struct mlx4_hwq_resources wqres;
 	struct mlx4_en_rx_alloc page_alloc[MLX4_EN_MAX_RX_FRAGS];
-	struct net_lro_mgr lro;
+	struct mlx4_en_lro lro;
+	struct hlist_head *lro_hash;
+	struct hlist_head lro_free;
+	struct hlist_head lro_flush;
 	u32 size ;	/* number of Rx descs*/
 	u32 actual_size;
 	u32 size_mask;
@@ -311,7 +342,7 @@ struct mlx4_en_cq {
 	int                     ring;
 	spinlock_t              lock;
 	struct net_device      *dev;
-	struct napi_struct	napi;
+	struct net_device      *poll_dev; /* for napi */
 	/* Per-core Tx cq processing support */
 	struct timer_list timer;
 	int size;
@@ -541,7 +572,7 @@ void mlx4_en_deactivate_rx_ring(struct mlx4_en_priv *priv,
 int mlx4_en_process_rx_cq_skb(struct net_device *dev,
 			      struct mlx4_en_cq *cq,
 			      int budget);
-int mlx4_en_poll_rx_cq(struct napi_struct *napi, int budget);
+int mlx4_en_poll_rx_cq(struct net_device *poll_dev, int *budget);;
 void mlx4_en_fill_qp_context(struct mlx4_en_priv *priv, int size, int stride,
 			     int is_tx, int rss, int qpn, int cqn, int srqn,
 			     struct mlx4_qp_context *context);
@@ -552,6 +583,15 @@ void mlx4_en_calc_rx_buf(struct net_device *dev);
 void mlx4_en_set_default_rss_map(struct mlx4_en_priv *priv,
 				 struct mlx4_en_rss_map *rss_map,
 				 int num_entries, int num_rings);
+
+void mlx4_en_lro_flush(struct mlx4_en_priv* priv, struct mlx4_en_rx_ring *ring, u8 all);
+int mlx4_en_lro_rx(struct mlx4_en_priv *priv, struct mlx4_en_rx_ring *ring,
+		   struct mlx4_en_rx_desc *rx_desc,
+		   struct skb_frag_struct *skb_frags,
+		   unsigned int length, struct mlx4_cqe *cqe);
+void mlx4_en_lro_destroy(struct mlx4_en_rx_ring *ring);
+int mlx4_en_lro_init(struct mlx4_en_rx_ring *ring, int num_lro);
+
 void mlx4_en_set_prio_map(struct mlx4_en_priv *priv, u16 *prio_map, u32 ring_num);
 int mlx4_en_config_rss_steer(struct mlx4_en_priv *priv);
 void mlx4_en_release_rss_steer(struct mlx4_en_priv *priv);
-- 
1.5.4

