BACKPORT - revert struct class_dev to device

This patch reverts commit f4e91eb4a81559da87a3843758a641b5cc590b65 in 2.6.26.

Signed-off-by: Ralph Campbell <ralph.campbell@qlogic.com>

---
 drivers/infiniband/hw/ipath/ipath_diag.c     |   10 +++---
 drivers/infiniband/hw/ipath/ipath_file_ops.c |   44 +++++++++++++--------------
 drivers/infiniband/hw/ipath/ipath_kernel.h   |    8 ++--
 3 files changed, 31 insertions(+), 31 deletions(-)

Index: ofed_kernel/drivers/infiniband/hw/ipath/ipath_diag.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/hw/ipath/ipath_diag.c
+++ ofed_kernel/drivers/infiniband/hw/ipath/ipath_diag.c
@@ -79,7 +79,7 @@ static const struct file_operations diag
 
 static atomic_t diagpkt_count = ATOMIC_INIT(0);
 static struct cdev *diagpkt_cdev;
-static struct device *diagpkt_dev;
+static struct class_device *diagpkt_class_dev;
 
 int ipath_diag_add(struct ipath_devdata *dd)
 {
@@ -89,7 +89,7 @@ int ipath_diag_add(struct ipath_devdata 
 	if (atomic_inc_return(&diagpkt_count) == 1) {
 		ret = ipath_cdev_init(IPATH_DIAGPKT_MINOR,
 				      "ipath_diagpkt", &diagpkt_file_ops,
-				      &diagpkt_cdev, &diagpkt_dev);
+				      &diagpkt_cdev, &diagpkt_class_dev);
 
 		if (ret) {
 			ipath_dev_err(dd, "Couldn't create ipath_diagpkt "
@@ -102,7 +102,7 @@ int ipath_diag_add(struct ipath_devdata 
 
 	ret = ipath_cdev_init(IPATH_DIAG_MINOR_BASE + dd->ipath_unit, name,
 			      &diag_file_ops, &dd->diag_cdev,
-			      &dd->diag_dev);
+			      &dd->diag_class_dev);
 	if (ret)
 		ipath_dev_err(dd, "Couldn't create %s device: %d",
 			      name, ret);
@@ -114,9 +114,9 @@ done:
 void ipath_diag_remove(struct ipath_devdata *dd)
 {
 	if (atomic_dec_and_test(&diagpkt_count))
-		ipath_cdev_cleanup(&diagpkt_cdev, &diagpkt_dev);
+		ipath_cdev_cleanup(&diagpkt_cdev, &diagpkt_class_dev);
 
-	ipath_cdev_cleanup(&dd->diag_cdev, &dd->diag_dev);
+	ipath_cdev_cleanup(&dd->diag_cdev, &dd->diag_class_dev);
 }
 
 /**
Index: ofed_kernel/drivers/infiniband/hw/ipath/ipath_file_ops.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/hw/ipath/ipath_file_ops.c
+++ ofed_kernel/drivers/infiniband/hw/ipath/ipath_file_ops.c
@@ -2424,11 +2424,11 @@ static ssize_t ipath_writev(struct kiocb
 static struct class *ipath_class;
 
 static int init_cdev(int minor, char *name, const struct file_operations *fops,
-		     struct cdev **cdevp, struct device **devp)
+		     struct cdev **cdevp, struct class_device **class_devp)
 {
 	const dev_t dev = MKDEV(IPATH_MAJOR, minor);
 	struct cdev *cdev = NULL;
-	struct device *device = NULL;
+	struct class_device *class_dev = NULL;
 	int ret;
 
 	cdev = cdev_alloc();
@@ -2452,12 +2452,12 @@ static int init_cdev(int minor, char *na
 		goto err_cdev;
 	}
 
-	device = device_create_drvdata(ipath_class, NULL, dev, NULL, name);
+	class_dev = class_device_create(ipath_class, NULL, dev, NULL, name);
 
-	if (IS_ERR(device)) {
-		ret = PTR_ERR(device);
+	if (IS_ERR(class_dev)) {
+		ret = PTR_ERR(class_dev);
 		printk(KERN_ERR IPATH_DRV_NAME ": Could not create "
-		       "device for minor %d, %s (err %d)\n",
+		       "class_dev for minor %d, %s (err %d)\n",
 		       minor, name, -ret);
 		goto err_cdev;
 	}
@@ -2471,29 +2471,29 @@ err_cdev:
 done:
 	if (ret >= 0) {
 		*cdevp = cdev;
-		*devp = device;
+		*class_devp = class_dev;
 	} else {
 		*cdevp = NULL;
-		*devp = NULL;
+		*class_devp = NULL;
 	}
 
 	return ret;
 }
 
 int ipath_cdev_init(int minor, char *name, const struct file_operations *fops,
-		    struct cdev **cdevp, struct device **devp)
+		    struct cdev **cdevp, struct class_device **class_devp)
 {
-	return init_cdev(minor, name, fops, cdevp, devp);
+	return init_cdev(minor, name, fops, cdevp, class_devp);
 }
 
 static void cleanup_cdev(struct cdev **cdevp,
-			 struct device **devp)
+			 struct class_device **class_devp)
 {
-	struct device *dev = *devp;
+	struct class_device *class_dev = *class_devp;
 
-	if (dev) {
-		device_unregister(dev);
-		*devp = NULL;
+	if (class_dev) {
+		class_device_unregister(class_dev);
+		*class_devp = NULL;
 	}
 
 	if (*cdevp) {
@@ -2503,13 +2503,13 @@ static void cleanup_cdev(struct cdev **c
 }
 
 void ipath_cdev_cleanup(struct cdev **cdevp,
-			struct device **devp)
+			struct class_device **class_devp)
 {
-	cleanup_cdev(cdevp, devp);
+	cleanup_cdev(cdevp, class_devp);
 }
 
 static struct cdev *wildcard_cdev;
-static struct device *wildcard_dev;
+static struct class_device *wildcard_class_dev;
 
 static const dev_t dev = MKDEV(IPATH_MAJOR, 0);
 
@@ -2566,7 +2566,7 @@ int ipath_user_add(struct ipath_devdata 
 			goto bail;
 		}
 		ret = init_cdev(0, "ipath", &ipath_file_ops, &wildcard_cdev,
-				&wildcard_dev);
+				&wildcard_class_dev);
 		if (ret < 0) {
 			ipath_dev_err(dd, "Could not create wildcard "
 				      "minor: error %d\n", -ret);
@@ -2579,7 +2579,7 @@ int ipath_user_add(struct ipath_devdata 
 	snprintf(name, sizeof(name), "ipath%d", dd->ipath_unit);
 
 	ret = init_cdev(dd->ipath_unit + 1, name, &ipath_file_ops,
-			&dd->user_cdev, &dd->user_dev);
+			&dd->user_cdev, &dd->user_class_dev);
 	if (ret < 0)
 		ipath_dev_err(dd, "Could not create user minor %d, %s\n",
 			      dd->ipath_unit + 1, name);
@@ -2594,13 +2594,13 @@ bail:
 
 void ipath_user_remove(struct ipath_devdata *dd)
 {
-	cleanup_cdev(&dd->user_cdev, &dd->user_dev);
+	cleanup_cdev(&dd->user_cdev, &dd->user_class_dev);
 
 	if (atomic_dec_return(&user_count) == 0) {
 		if (atomic_read(&user_setup) == 0)
 			goto bail;
 
-		cleanup_cdev(&wildcard_cdev, &wildcard_dev);
+		cleanup_cdev(&wildcard_cdev, &wildcard_class_dev);
 		user_cleanup();
 
 		atomic_set(&user_setup, 0);
Index: ofed_kernel/drivers/infiniband/hw/ipath/ipath_kernel.h
===================================================================
--- ofed_kernel.orig/drivers/infiniband/hw/ipath/ipath_kernel.h
+++ ofed_kernel/drivers/infiniband/hw/ipath/ipath_kernel.h
@@ -477,8 +477,8 @@ struct ipath_devdata {
 	struct pci_dev *pcidev;
 	struct cdev *user_cdev;
 	struct cdev *diag_cdev;
-	struct device *user_dev;
-	struct device *diag_dev;
+	struct class_device *user_class_dev;
+	struct class_device *diag_class_dev;
 	/* timer used to prevent stats overflow, error throttling, etc. */
 	struct timer_list ipath_stats_timer;
 	/* timer to verify interrupts work, and fallback if possible */
@@ -865,9 +865,9 @@ void ipath_clear_freeze(struct ipath_dev
 
 struct file_operations;
 int ipath_cdev_init(int minor, char *name, const struct file_operations *fops,
-		    struct cdev **cdevp, struct device **devp);
+		    struct cdev **cdevp, struct class_device **class_devp);
 void ipath_cdev_cleanup(struct cdev **cdevp,
-			struct device **devp);
+			struct class_device **class_devp);
 
 int ipath_diag_add(struct ipath_devdata *);
 void ipath_diag_remove(struct ipath_devdata *);
