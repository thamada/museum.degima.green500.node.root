---
 drivers/scsi/iscsi_tcp.c            |    1 
 drivers/scsi/libiscsi.c             |    1 
 drivers/scsi/scsi_transport_iscsi.c |   72 +++++++++---------------------------
 3 files changed, 18 insertions(+), 56 deletions(-)

Index: ofed_kernel/drivers/scsi/iscsi_tcp.c
===================================================================
--- ofed_kernel.orig/drivers/scsi/iscsi_tcp.c
+++ ofed_kernel/drivers/scsi/iscsi_tcp.c
@@ -2145,7 +2145,6 @@ static void iscsi_tcp_session_destroy(st
 static struct scsi_host_template iscsi_sht = {
 	.name			= "iSCSI Initiator over TCP/IP",
 	.queuecommand           = iscsi_queuecommand,
-	.change_queue_depth	= iscsi_change_queue_depth,
 	.can_queue		= ISCSI_XMIT_CMDS_MAX - 1,
 	.sg_tablesize		= ISCSI_SG_TABLESIZE,
 	.max_sectors		= 0xFFFF,
Index: ofed_kernel/drivers/scsi/libiscsi.c
===================================================================
--- ofed_kernel.orig/drivers/scsi/libiscsi.c
+++ ofed_kernel/drivers/scsi/libiscsi.c
@@ -1366,7 +1366,6 @@ iscsi_session_setup(struct iscsi_transpo
 	shost->max_lun = iscsit->max_lun;
 	shost->max_cmd_len = iscsit->max_cmd_len;
 	shost->transportt = scsit;
-	shost->transportt->create_work_queue = 1;
 	*hostno = shost->host_no;
 
 	session = iscsi_hostdata(shost->hostdata);
Index: ofed_kernel/drivers/scsi/scsi_transport_iscsi.c
===================================================================
--- ofed_kernel.orig/drivers/scsi/scsi_transport_iscsi.c
+++ ofed_kernel/drivers/scsi/scsi_transport_iscsi.c
@@ -65,6 +65,8 @@ static DEFINE_SPINLOCK(iscsi_transport_l
 #define cdev_to_iscsi_internal(_cdev) \
 	container_of(_cdev, struct iscsi_internal, cdev)
 
+extern int attribute_container_init(void);
+
 static void iscsi_transport_release(struct class_device *cdev)
 {
 	struct iscsi_internal *priv = cdev_to_iscsi_internal(cdev);
@@ -80,6 +82,17 @@ static struct class iscsi_transport_clas
 	.release = iscsi_transport_release,
 };
 
+static void iscsi_host_class_release(struct class_device *class_dev)
+{
+	struct Scsi_Host *shost = transport_class_to_shost(class_dev);
+	put_device(&shost->shost_gendev);
+}
+
+struct class iscsi_host_class = {
+	.name = "iscsi_host",
+	.release = iscsi_host_class_release,
+};
+
 static ssize_t
 show_transport_handle(struct class_device *cdev, char *buf)
 {
@@ -115,10 +128,8 @@ static struct attribute_group iscsi_tran
 	.attrs = iscsi_transport_attrs,
 };
 
-static int iscsi_setup_host(struct transport_container *tc, struct device *dev,
-			    struct class_device *cdev)
+static int iscsi_setup_host(struct Scsi_Host *shost)
 {
-	struct Scsi_Host *shost = dev_to_shost(dev);
 	struct iscsi_host *ihost = shost->shost_data;
 
 	memset(ihost, 0, sizeof(*ihost));
@@ -127,12 +138,6 @@ static int iscsi_setup_host(struct trans
 	return 0;
 }
 
-static DECLARE_TRANSPORT_CLASS(iscsi_host_class,
-			       "iscsi_host",
-			       iscsi_setup_host,
-			       NULL,
-			       NULL);
-
 static DECLARE_TRANSPORT_CLASS(iscsi_session_class,
 			       "iscsi_session",
 			       NULL,
@@ -216,24 +221,6 @@ static int iscsi_is_session_dev(const st
 	return dev->release == iscsi_session_release;
 }
 
-static int iscsi_user_scan(struct Scsi_Host *shost, uint channel,
-			   uint id, uint lun)
-{
-	struct iscsi_host *ihost = shost->shost_data;
-	struct iscsi_cls_session *session;
-
-	mutex_lock(&ihost->mutex);
-	list_for_each_entry(session, &ihost->sessions, host_list) {
-		if ((channel == SCAN_WILD_CARD || channel == 0) &&
-		    (id == SCAN_WILD_CARD || id == session->target_id))
-			scsi_scan_target(&session->dev, 0,
-					 session->target_id, lun, 1);
-	}
-	mutex_unlock(&ihost->mutex);
-
-	return 0;
-}
-
 static void session_recovery_timedout(struct work_struct *work)
 {
 	struct iscsi_cls_session *session =
@@ -362,8 +349,6 @@ void iscsi_remove_session(struct iscsi_c
 	list_del(&session->host_list);
 	mutex_unlock(&ihost->mutex);
 
-	scsi_remove_target(&session->dev);
-
 	transport_unregister_device(&session->dev);
 	device_del(&session->dev);
 }
@@ -1269,24 +1254,6 @@ static int iscsi_conn_match(struct attri
 	return &priv->conn_cont.ac == cont;
 }
 
-static int iscsi_host_match(struct attribute_container *cont,
-			    struct device *dev)
-{
-	struct Scsi_Host *shost;
-	struct iscsi_internal *priv;
-
-	if (!scsi_is_host_device(dev))
-		return 0;
-
-	shost = dev_to_shost(dev);
-	if (!shost->transportt  ||
-	    shost->transportt->host_attrs.ac.class != &iscsi_host_class.class)
-		return 0;
-
-        priv = to_iscsi_internal(shost->transportt);
-        return &priv->t.host_attrs.ac == cont;
-}
-
 struct scsi_transport_template *
 iscsi_register_transport(struct iscsi_transport *tt)
 {
@@ -1306,7 +1273,6 @@ iscsi_register_transport(struct iscsi_tr
 	INIT_LIST_HEAD(&priv->list);
 	priv->daemon_pid = -1;
 	priv->iscsi_transport = tt;
-	priv->t.user_scan = iscsi_user_scan;
 
 	priv->cdev.class = &iscsi_transport_class;
 	snprintf(priv->cdev.class_id, BUS_ID_SIZE, "%s", tt->name);
@@ -1319,12 +1285,10 @@ iscsi_register_transport(struct iscsi_tr
 		goto unregister_cdev;
 
 	/* host parameters */
-	priv->t.host_attrs.ac.attrs = &priv->host_attrs[0];
-	priv->t.host_attrs.ac.class = &iscsi_host_class.class;
-	priv->t.host_attrs.ac.match = iscsi_host_match;
+	priv->t.host_attrs = &priv->host_attrs[0];
+	priv->t.host_class = &iscsi_host_class;
+	priv->t.host_setup = iscsi_setup_host;
 	priv->t.host_size = sizeof(struct iscsi_host);
-	priv->host_attrs[0] = NULL;
-	transport_container_register(&priv->t.host_attrs);
 
 	/* connection parameters */
 	priv->conn_cont.ac.attrs = &priv->conn_attrs[0];
@@ -1402,7 +1366,6 @@ int iscsi_unregister_transport(struct is
 
 	transport_container_unregister(&priv->conn_cont);
 	transport_container_unregister(&priv->session_cont);
-	transport_container_unregister(&priv->t.host_attrs);
 
 	sysfs_remove_group(&priv->cdev.kobj, &iscsi_transport_group);
 	class_device_unregister(&priv->cdev);
@@ -1420,6 +1383,7 @@ static __init int iscsi_transport_init(v
 		ISCSI_TRANSPORT_VERSION);
 
 	atomic_set(&iscsi_session_nr, 0);
+	attribute_container_init();
 
 	err = class_register(&iscsi_transport_class);
 	if (err)
