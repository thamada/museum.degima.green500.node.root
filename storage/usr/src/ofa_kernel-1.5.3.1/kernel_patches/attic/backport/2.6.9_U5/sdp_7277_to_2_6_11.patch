---
 drivers/infiniband/ulp/sdp/sdp_main.c |   12 ++----------
 1 file changed, 2 insertions(+), 10 deletions(-)

Index: ofed_kernel-2.6.9_U4/drivers/infiniband/ulp/sdp/sdp_main.c
===================================================================
--- ofed_kernel-2.6.9_U4.orig/drivers/infiniband/ulp/sdp/sdp_main.c
+++ ofed_kernel-2.6.9_U4/drivers/infiniband/ulp/sdp/sdp_main.c
@@ -575,7 +575,6 @@ adjudge_to_death:
 		/* TODO: tcp_fin_time to get timeout */
 		sdp_dbg(sk, "%s: entering time wait refcnt %d\n", __func__,
 			atomic_read(&sk->sk_refcnt));
-		atomic_inc(sk->sk_prot->orphan_count);
 	}
 
 	/* TODO: limit number of orphaned sockets.
@@ -853,8 +852,6 @@ void sdp_cancel_dreq_wait_timeout(struct
 		/* The timeout hasn't reached - need to clean ref count */
 		sock_put(&ssk->isk.sk, SOCK_REF_DREQ_TO);
 	}
-
-	atomic_dec(ssk->isk.sk.sk_prot->orphan_count);
 }
 
 void sdp_destroy_work(struct work_struct *work)
@@ -894,9 +891,6 @@ void sdp_dreq_wait_timeout_work(struct w
 
 	sdp_sk(sk)->dreq_wait_timeout = 0;
 
-	if (sk->sk_state == TCP_FIN_WAIT1)
-		atomic_dec(ssk->isk.sk.sk_prot->orphan_count);
-
 	sdp_exch_state(sk, TCPF_LAST_ACK | TCPF_FIN_WAIT1, TCP_TIME_WAIT);
 
 	release_sock(sk);
@@ -2184,7 +2178,6 @@ void sdp_urg(struct sdp_sock *ssk, struc
 
 static atomic_t sockets_allocated;
 static atomic_t memory_allocated;
-static atomic_t orphan_count;
 static int memory_pressure;
 struct proto sdp_proto = {
         .close       = sdp_close,
@@ -2205,13 +2198,11 @@ struct proto sdp_proto = {
 	.sockets_allocated = &sockets_allocated,
 	.memory_allocated = &memory_allocated,
 	.memory_pressure = &memory_pressure,
-	.orphan_count = &orphan_count,
         .sysctl_mem             = sysctl_tcp_mem,
         .sysctl_wmem            = sysctl_tcp_wmem,
         .sysctl_rmem            = sysctl_tcp_rmem,
-	.max_header  = sizeof(struct sdp_bsdh),
-        .obj_size    = sizeof(struct sdp_sock),
-	.owner	     = THIS_MODULE,
+	.max_header  		= sizeof(struct sdp_bsdh),
+        .slab_obj_size    	= sizeof(struct sdp_sock),
 	.name	     = "SDP",
 };
 
@@ -2414,10 +2405,6 @@ static void __exit sdp_exit(void)
 	sock_unregister(PF_INET_SDP);
 	proto_unregister(&sdp_proto);
 
-	if (atomic_read(&orphan_count))
-		printk(KERN_WARNING "%s: orphan_count %d\n", __func__,
-		       atomic_read(&orphan_count));
-
 	destroy_workqueue(rx_comp_wq);
 	destroy_workqueue(sdp_wq);
 
