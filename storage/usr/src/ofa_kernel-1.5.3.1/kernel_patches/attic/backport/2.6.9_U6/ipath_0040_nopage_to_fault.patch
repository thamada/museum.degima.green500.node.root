IB/ipath - revert struct vm_operations_struct nopage to fault rename

This patch reverts commit 3c8450860ba9d6279dbc969633eacf99161860d9 in 2.6.25

Signed-off-by: Ralph Campbell <ralph.campbell@qlogic.com>

---
 drivers/infiniband/hw/ipath/ipath_debug.h    |    4 +--
 drivers/infiniband/hw/ipath/ipath_file_ops.c |   29 +++++++++++++++++----------
 2 files changed, 21 insertions(+), 12 deletions(-)

Index: ofed_kernel/drivers/infiniband/hw/ipath/ipath_debug.h
===================================================================
--- ofed_kernel.orig/drivers/infiniband/hw/ipath/ipath_debug.h
+++ ofed_kernel/drivers/infiniband/hw/ipath/ipath_debug.h
@@ -55,7 +55,7 @@
 #define __IPATH_PKTDBG      0x80	/* print packet data */
 /* print process startup (init)/exit messages */
 #define __IPATH_PROCDBG     0x100
-/* print mmap/fault stuff, not using VDBG any more */
+/* print mmap/nopage stuff, not using VDBG any more */
 #define __IPATH_MMDBG       0x200
 #define __IPATH_ERRPKTDBG   0x400
 #define __IPATH_USER_SEND   0x1000	/* use user mode send */
@@ -82,7 +82,7 @@
 #define __IPATH_VERBDBG   0x0	/* very verbose debug */
 #define __IPATH_PKTDBG    0x0	/* print packet data */
 #define __IPATH_PROCDBG   0x0	/* process startup (init)/exit messages */
-/* print mmap/fault stuff, not using VDBG any more */
+/* print mmap/nopage stuff, not using VDBG any more */
 #define __IPATH_MMDBG     0x0
 #define __IPATH_EPKTDBG   0x0	/* print ethernet packet data */
 #define __IPATH_IPATHDBG  0x0	/* Ethernet (IPATH) table dump on */
Index: ofed_kernel/drivers/infiniband/hw/ipath/ipath_file_ops.c
===================================================================
--- ofed_kernel.orig/drivers/infiniband/hw/ipath/ipath_file_ops.c
+++ ofed_kernel/drivers/infiniband/hw/ipath/ipath_file_ops.c
@@ -1130,24 +1130,33 @@ bail:
 }
 
 /*
- * ipath_file_vma_fault - handle a VMA page fault.
+ * ipath_file_vma_nopage - handle a VMA page fault.
  */
-static int ipath_file_vma_fault(struct vm_area_struct *vma,
-					struct vm_fault *vmf)
+static struct page *ipath_file_vma_nopage(struct vm_area_struct *vma,
+					  unsigned long address, int *type)
 {
-	struct page *page;
+	unsigned long offset = address - vma->vm_start;
+	struct page *page = NOPAGE_SIGBUS;
+	void *pageptr;
 
-	page = vmalloc_to_page((void *)(vmf->pgoff << PAGE_SHIFT));
+	/*
+	 * Convert the vmalloc address into a struct page.
+	 */
+	pageptr = (void *)(offset + (vma->vm_pgoff << PAGE_SHIFT));
+	page = vmalloc_to_page(pageptr);
 	if (!page)
-		return VM_FAULT_SIGBUS;
-	get_page(page);
-	vmf->page = page;
+		goto out;
 
-	return 0;
+	/* Increment the reference count. */
+	get_page(page);
+	if (type)
+		*type = VM_FAULT_MINOR;
+out:
+	return page;
 }
 
 static struct vm_operations_struct ipath_file_vm_ops = {
-	.fault = ipath_file_vma_fault,
+	.nopage = ipath_file_vma_nopage,
 };
 
 static int mmap_kvaddr(struct vm_area_struct *vma, u64 pgaddr,
