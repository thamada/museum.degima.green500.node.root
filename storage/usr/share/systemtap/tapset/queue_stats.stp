# qstats.stp: Queue statistics gathering tapset

# ------------------------------------------------------------------------

# The default timing function: microseconds.  This function could
# go into a separate file (say, qstats_qs_time.stp), so that a user
# script can override it with another definition.

function qs_time () { return gettimeofday_us () }

# ------------------------------------------------------------------------

global qs_wtime, qs_wlentime, qs_wcount
global qs_rtime, qs_rlentime, qs_rcount
global qs_stime, qs_utime, qs_dcount

# ------------------------------------------------------------------------

function _qs_update (qname) {
  now = qs_time ()
  then = qs_utime[qname]; if (! then) { then = now }
  delta = now-then

  qs_wtime[qname] += qs_wcount[qname] ? delta : 0
  qs_wlentime[qname] += qs_wcount[qname] * delta
  qs_rtime[qname] += qs_rcount[qname] ? delta : 0
  qs_rlentime[qname] += qs_rcount[qname] * delta
  qs_utime[qname] = now  
}
/*
 * sfunction qs_wait - Function to record enqueue requests
 *
 * General Syntax: qs_wait(qname:string)
 * 
 * @qname: The name of the queue requesting enqueue
 *
 * Description: This function records that a new request
 * was enqueued for the given queue name.
 */
function qs_wait (qname) { # enqueueing request
   _qs_update (qname)
   qs_wcount[qname] ++
}

/*
 * sfunction qs_run - Function to record being moved from 
 * wait queue to being serviced 
 *
 * General Syntax: qs_run(qname:string)
 * 
 * @qname: The name of the service being moved and started 
 *
 * Description: This function records that the previous enqueued
 * request was removed from the given wait queue and is now 
 * being serviced. 
 */
function qs_run (qname) { # starting to service request
  _qs_update (qname)
  if (qs_wcount[qname] > 0) {
    qs_wcount[qname] --
    qs_rcount[qname] ++
  }
}

/*
 * sfunction qs_run - Function to record finishing request 
 *
 * General Syntax: qs_done(qname:string)
 * 
 * @qname: The name of the service that finished 
 *
 * Description: This function records that a request 
 * originally from the given queue has completed being 
 * serviced.
*/
function qs_done (qname) { # done servicing request
  _qs_update (qname)
  if (qs_rcount[qname] > 0) {
    qs_rcount[qname] --
    qs_dcount[qname] ++
  }
}

# ------------------------------------------------------------------------

/*
 * sfunction qsq_start - Function to reset the stats for a queue
 *
 * General Syntax: qs_start(qname:string)
 * 
 * @qname: The name of the service that finished 
 *
 * Description: This function resets the statistics counters for the given
 * queue, and restarts tracking from the moment the function was called.
 * This function is also used to create intialize a queue.
*/
function qsq_start (qname) {  # reset statistics for new baseline
  qs_rcount[qname] = 0
  delete qs_rtime[qname]
  delete qs_rlentime[qname]
  qs_wcount[qname] = 0
  delete qs_wtime[qname]
  delete qs_wlentime[qname]
  delete qs_dcount[qname]
  delete qs_utime[qname]
  qs_stime[qname] = qs_time ()
}

# ------------------------------------------------------------------------
# Various query functions.  Each returns the average, taken over the time
# interval from the last qsq_start().  Most deal with fractions, and so
# also take a scale parameter (use 100 for percent).

/*
 * sfunction qsq_utilization - Fraction of time that any request
 * was being serviced 
 *
 * General Syntax: qsq_utilization:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the average time in microseconds
 * that at least one request was being serviced. 
*/
function qsq_utilization (qname, scale) {
  _qs_update (qname)
  elapsed = qs_time() - qs_stime[qname]
  return (scale * qs_rtime[qname]) / elapsed
}

# fraction of time that any request was blocked in the wait queue

/*
 * sfunction qsq_blocked - Returns the time reqest was on the wait queue 
 *
 * General Syntax: qsq_blocked:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the fraction of elapsed time during
 * which one or more requests were on the wait queue.
*/
function qsq_blocked (qname, scale) {
  _qs_update (qname)
  elapsed = qs_time() - qs_stime[qname]
  return (scale * qs_wtime[qname]) / elapsed
}

# length of wait queue 
/*
 * sfunction qsq_wait_queue_length - length of wait queue 
 *
 * General Syntax: qsq_wait_queue_length:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the average length of the wait queue 
*/
function qsq_wait_queue_length (qname, scale) {
  _qs_update (qname)
  elapsed = qs_time() - qs_stime[qname]
  return (scale * qs_wlentime[qname]) / elapsed
}

/*
 * sfunction qsq_service_time - Amount of time per request service 
 *
 * General Syntax: qsq_blocked:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the average time in microseconds
 * required to service a request once it is removed from the wait queue.
*/
function qsq_service_time (qname, scale) {
  _qs_update (qname)
  return (scale * qs_rlentime[qname]) / qs_dcount[qname]
}

/*
 * sfunction qsq_wait_time - amount of time in queue + service per request
 *
 * General Syntax: qsq_wait_time:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the average time in microseconds
 * that it took for a request to be serviced (qs_wait() to qa_done()).
*/
function qsq_wait_time (qname, scale) {
  _qs_update (qname)
  return (scale * (qs_rlentime[qname] + qs_wlentime[qname]))
    / qs_dcount[qname]
}

/*
 * sfunction qsq_throughput - Number of requests served per unit time 
 *
 * General Syntax: qsq_throughput:long(qname:string, scale:long)
 * 
 * @qname: Queue name
 * @scope: Scale variable to take account for interval fraction
 *
 * Description: This function returns the average number or requests
 * served per microsecond. 
*/
function qsq_throughput (qname, scale) {
  _qs_update (qname)
  elapsed = qs_time() - qs_stime[qname]
  return (scale * qs_dcount[qname]) / elapsed
}


# ------------------------------------------------------------------------

/*
 * sfunction qsq_blocked - Returns a line of statistics for the given queue
 *
 * General Syntax: qsq_print(qname:string)
 * 
 * @qname: Queue name
 *
 * Description: This function prints a line containing the following
 * statistics for the given queue:
 * Queue name, Average rate of requests per second
 * Average wait queue lengh, Average time on the wait queue
 * Average time to srvice a request, Percentage of time the
 * wait queue was used, Percentage of time request was being
 * serviced.
*/
function qsq_print (qname) {
  qt = qsq_throughput (qname, 1000000000) # 1000 * (number of requests served per second)
  qwl = qsq_wait_queue_length (qname, 1000)
  printf("%s: %d.%03d ops/s, %d.%03d qlen, %d await, %d svctm, %d%% wait, %d%% util\n",
    qname,
    qt/1000, qt%1000,
    qwl/1000, qwl%1000,
    qsq_wait_time (qname, 1),
    qsq_service_time (qname, 1),
    qsq_blocked (qname, 100),
    qsq_utilization (qname, 100))
}

/* What follows in an example form src/testsuite/systemtap.samples/queue_demo.stp
 * It uses the randomize feature of the timer probe to simulate queuing activity.
 *
 * probe begin {
 *	qsq_start ("block-read")
 *	qsq_start ("block-write")
 * }
 * 
 * probe timer.ms(3500), end {
 * 	qsq_print ("block-read")
 *	qsq_start ("block-read")
 *	qsq_print ("block-write")
 * 	qsq_start ("block-write")
 * }
 * 
 * probe timer.ms(10000) {
 * 	exit()
 * }
 * 
 * // synthesize queue work/service using three randomized "threads" for each queue.
 * global tc
 * 
 * function qs_doit (thread, name) {
 * 	n = tc[thread] = (tc[thread]+1) % 3 //per-thread state counter
 * 	if (n==1) qs_wait (name)
 * 	else if (n==2) qs_run (name)
 *      else if (n==0) qs_done (name)
 * }
 * 
 * probe timer.ms(100).randomize(100) { qs_doit (0, "block-read") }
 * probe timer.ms(100).randomize(100) { qs_doit (1, "block-read") }
 * probe timer.ms(100).randomize(100) { qs_doit (2, "block-read") }
 * probe timer.ms(100).randomize(100) { qs_doit (3, "block-write") }
 * probe timer.ms(100).randomize(100) { qs_doit (4, "block-write") }
 * probe timer.ms(100).randomize(100) { qs_doit (5, "block-write") }
 * 
 * //This prints:
 * block-read: 9 ops/s, 1.090 qlen, 215749 await, 96382 svctm, 69% wait, 64% util
 * block-write: 9 ops/s, 0.992 qlen, 208485 await, 103150 svctm, 69% wait, 61% util
 * block-read: 9 ops/s, 0.968 qlen, 197411 await, 97762 svctm, 63% wait, 63% util
 * block-write: 8 ops/s, 0.930 qlen, 202414 await, 93870 svctm, 60% wait, 56% util
 * block-read: 8 ops/s, 0.744 qlen, 192957 await, 99995 svctm, 58% wait, 62% util
 * block-write: 9 ops/s, 0.861 qlen, 193857 await, 101573 svctm, 56% wait, 64% util
 */

